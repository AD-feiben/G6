{"componentChunkName":"component---node-modules-antv-gatsby-theme-antv-1-1-1-antv-gatsby-theme-antv-site-templates-example-tsx","path":"/zh/examples/case/graphDemos","result":{"data":{"site":{"siteMetadata":{"title":"G6","galleryMenuCloseAll":false,"examples":[{"slug":"case","icon":"gallery","title":{"zh":"场景案例","en":"Case"}},{"slug":"gallery","icon":"gallery","title":{"zh":"所有图表","en":"All Demos"}},{"slug":"net","icon":"net","title":{"zh":"布局：一般图","en":"Layout：General Graph"}},{"slug":"tree","icon":"tree","title":{"zh":"布局：树图","en":"Layout：Tree Graph"}},{"slug":"graphql","icon":"graphql","title":{"zh":"其他表达形式","en":"Net Charts"}},{"slug":"item","icon":"shape","title":{"zh":"元素","en":"Item"}},{"slug":"interaction","icon":"interaction","title":{"zh":"交互","en":"Interaction"}},{"slug":"scatter","icon":"scatter","title":{"zh":"动画","en":"Animation"}},{"slug":"tool","icon":"tool","title":{"zh":"组件","en":"Component"}},{"slug":"algorithm","icon":"gallery","title":{"zh":"算法","en":"Algorithm"}},{"slug":"performance","icon":"net","title":{"zh":"性能测试","en":"Performance"}}],"playground":{"container":null,"playgroundDidMount":null,"playgroundWillUnmount":null,"dependencies":null,"htmlCodeTemplate":null}},"pathPrefix":""},"allMarkdownRemark":{"edges":[{"node":{"fields":{"slug":"/en/examples/gallery"},"frontmatter":{"title":"Gallery","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/gallery"},"frontmatter":{"title":"所有图表","order":-1,"icon":"other"},"parent":{"__typename":"File","relativePath":"gallery/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/compactBox"},"frontmatter":{"title":"CompactBox","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"tree/compactBox/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/compactBox"},"frontmatter":{"title":"紧凑树","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"tree/compactBox/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/tooltip"},"frontmatter":{"title":"Tooltip","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"tool/tooltip/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/tooltip"},"frontmatter":{"title":"提示框","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"tool/tooltip/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/scatter/node"},"frontmatter":{"title":"节点动画","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/node/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/scatter/node"},"frontmatter":{"title":"Node Animation","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/node/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/performance/perf"},"frontmatter":{"title":"性能案例","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"performance/perf/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/performance/perf"},"frontmatter":{"title":"Performance Case","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"performance/perf/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/net/forceDirected"},"frontmatter":{"title":"Force-directed Layout","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"net/forceDirected/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/forceDirected"},"frontmatter":{"title":"力导向图布局","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"net/forceDirected/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/defaultNodes"},"frontmatter":{"title":"Built-in Nodes","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultNodes/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/defaultNodes"},"frontmatter":{"title":"内置节点","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultNodes/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/highlight"},"frontmatter":{"title":"高亮相邻节点","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/highlight/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/highlight"},"frontmatter":{"title":"Highlight Nodes","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/highlight/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/case/graphDemos"},"frontmatter":{"title":"General Graph Demos","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/graphDemos/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/graphDemos"},"frontmatter":{"title":"一般图场景案例","order":0,"icon":null},"parent":{"__typename":"File","relativePath":"case/graphDemos/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/dendrogram"},"frontmatter":{"title":"Dendrogram","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"tree/dendrogram/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/dendrogram"},"frontmatter":{"title":"生态树","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"tree/dendrogram/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/contextMenu"},"frontmatter":{"title":"上下文菜单","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"tool/contextMenu/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/contextMenu"},"frontmatter":{"title":"ContextMenu","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"tool/contextMenu/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/scatter/edge"},"frontmatter":{"title":"Edge Animation","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/edge/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/scatter/edge"},"frontmatter":{"title":"边动画","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/edge/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/dagreFlow"},"frontmatter":{"title":"Dagre Layout","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"net/dagreFlow/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/dagreFlow"},"frontmatter":{"title":"Dagre 流程图布局","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"net/dagreFlow/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/defaultEdges"},"frontmatter":{"title":"Built-in Edges","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultEdges/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/defaultEdges"},"frontmatter":{"title":"内置边","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultEdges/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/treeBehavior"},"frontmatter":{"title":"Custom Tree Graph Behavior","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/treeBehavior/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/treeBehavior"},"frontmatter":{"title":"自定义树图交互","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/treeBehavior/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/treeDemos"},"frontmatter":{"title":"树图场景案例","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"case/treeDemos/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/case/treeDemos"},"frontmatter":{"title":"Tree Graph Demos","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"case/treeDemos/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/algorithm/algoDemos"},"frontmatter":{"title":"Shortest Path","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"algorithm/algoDemos/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/algorithm/algoDemos"},"frontmatter":{"title":"算法示例","order":1,"icon":null},"parent":{"__typename":"File","relativePath":"algorithm/algoDemos/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/mindmap"},"frontmatter":{"title":"Mindmap","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tree/mindmap/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/mindmap"},"frontmatter":{"title":"脑图树","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tree/mindmap/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/minimap"},"frontmatter":{"title":"Minimap","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tool/minimap/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/minimap"},"frontmatter":{"title":"Minimap","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"tool/minimap/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/scatter/stateChange"},"frontmatter":{"title":"State Switch","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/stateChange/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/scatter/stateChange"},"frontmatter":{"title":"状态切换","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/stateChange/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/furchtermanLayout"},"frontmatter":{"title":"Fruchterman 图布局","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"net/furchtermanLayout/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/furchtermanLayout"},"frontmatter":{"title":"Fruchterman Layout","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"net/furchtermanLayout/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/item/defaultCombos"},"frontmatter":{"title":"Built-in Combos","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultCombos/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/defaultCombos"},"frontmatter":{"title":"内置 Combo","order":2,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultCombos/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/indented"},"frontmatter":{"title":"Indented","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"tree/indented/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/indented"},"frontmatter":{"title":"缩进树","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"tree/indented/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/edgeBundling"},"frontmatter":{"title":"边绑定","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"tool/edgeBundling/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/edgeBundling"},"frontmatter":{"title":"Edge Bundling","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"tool/edgeBundling/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/net/radialLayout"},"frontmatter":{"title":"Radial Layout","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"net/radialLayout/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/radialLayout"},"frontmatter":{"title":"Radial 辐射布局","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"net/radialLayout/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/arrows"},"frontmatter":{"title":"Arrow of Edge","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"item/arrows/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/arrows"},"frontmatter":{"title":"边的箭头","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"item/arrows/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/label"},"frontmatter":{"title":"Label and Background Updating","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/label/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/label"},"frontmatter":{"title":"改变标签或背景","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/label/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/case/others"},"frontmatter":{"title":"Others","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"case/others/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/others"},"frontmatter":{"title":"其它","order":3,"icon":null},"parent":{"__typename":"File","relativePath":"case/others/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/radialtree"},"frontmatter":{"title":"Radial Tree","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"tree/radialtree/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/radialtree"},"frontmatter":{"title":"辐射树","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"tree/radialtree/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/toolbar"},"frontmatter":{"title":"工具栏","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"tool/toolbar/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/toolbar"},"frontmatter":{"title":"ToolBar","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"tool/toolbar/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/scatter/changePosition"},"frontmatter":{"title":"Node Move Animation","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/changePosition/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/scatter/changePosition"},"frontmatter":{"title":"节点移动动画","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/changePosition/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/circular"},"frontmatter":{"title":"Circular Layout","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"net/circular/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/circular"},"frontmatter":{"title":"Circular 环形布局","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"net/circular/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/customNode"},"frontmatter":{"title":"Custom Node","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"item/customNode/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/customNode"},"frontmatter":{"title":"自定义节点","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"item/customNode/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/combo"},"frontmatter":{"title":"Node Combo","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/combo/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/combo"},"frontmatter":{"title":"节点分组 Combo","order":4,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/combo/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/customItemTree"},"frontmatter":{"title":"定制树图元素样式","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"tree/customItemTree/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/customItemTree"},"frontmatter":{"title":"Custom Tree Items","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"tree/customItemTree/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/timebar"},"frontmatter":{"title":"时间轴","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"tool/timebar/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/timebar"},"frontmatter":{"title":"TimeBar","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"tool/timebar/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/scatter/customAnimate"},"frontmatter":{"title":"Custom Animation","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/customAnimate/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/scatter/customAnimate"},"frontmatter":{"title":"自定义动画","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/customAnimate/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/gridLayout"},"frontmatter":{"title":"Grid","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"net/gridLayout/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/gridLayout"},"frontmatter":{"title":"Grid 网格布局","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"net/gridLayout/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/customEdge"},"frontmatter":{"title":"自定义边","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"item/customEdge/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/customEdge"},"frontmatter":{"title":"Custom Edge","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"item/customEdge/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/hull"},"frontmatter":{"title":"节点集轮廓包裹","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/hull/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/hull"},"frontmatter":{"title":"Hull","order":5,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/hull/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/fisheye"},"frontmatter":{"title":"Fisheye","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"tool/fisheye/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/fisheye"},"frontmatter":{"title":"鱼眼放大镜","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"tool/fisheye/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/concentricLayout"},"frontmatter":{"title":"Concentric Layout","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"net/concentricLayout/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/concentricLayout"},"frontmatter":{"title":"Concentric 同心圆布局","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"net/concentricLayout/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/customCombo"},"frontmatter":{"title":"Custom Combo","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"item/customCombo/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/customCombo"},"frontmatter":{"title":"自定义 Combo","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"item/customCombo/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/position"},"frontmatter":{"title":"Click to Focus a Node","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/position/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/position"},"frontmatter":{"title":"聚焦一个节点","order":6,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/position/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/edgeFilterLens"},"frontmatter":{"title":"Edge Filter Lens","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"tool/edgeFilterLens/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/edgeFilterLens"},"frontmatter":{"title":"边过滤镜","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"tool/edgeFilterLens/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/mdsLayout"},"frontmatter":{"title":"MDS Layout","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"net/mdsLayout/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/mdsLayout"},"frontmatter":{"title":"MDS 布局","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"net/mdsLayout/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/label"},"frontmatter":{"title":"超长文本","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"item/label/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/label"},"frontmatter":{"title":"Long Label","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"item/label/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/partialResponse"},"frontmatter":{"title":"Region Response","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/partialResponse/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/partialResponse"},"frontmatter":{"title":"响应区域事件","order":7,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/partialResponse/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/snapline"},"frontmatter":{"title":"SnapLine","order":8,"icon":null},"parent":{"__typename":"File","relativePath":"tool/snapline/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/snapline"},"frontmatter":{"title":"对齐线","order":8,"icon":null},"parent":{"__typename":"File","relativePath":"tool/snapline/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/arcDiagram"},"frontmatter":{"title":"Arc Diagram 弧线图","order":8,"icon":null},"parent":{"__typename":"File","relativePath":"net/arcDiagram/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/arcDiagram"},"frontmatter":{"title":"Arc Diagram","order":8,"icon":null},"parent":{"__typename":"File","relativePath":"net/arcDiagram/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/item/labelBg"},"frontmatter":{"title":"Label Background","order":8,"icon":null},"parent":{"__typename":"File","relativePath":"item/labelBg/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/labelBg"},"frontmatter":{"title":"设置文本背景","order":8,"icon":null},"parent":{"__typename":"File","relativePath":"item/labelBg/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/setMode"},"frontmatter":{"title":"Change Mode to Add items","order":8,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/setMode/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/setMode"},"frontmatter":{"title":"切换模式增加点和边","order":8,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/setMode/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/legend"},"frontmatter":{"title":"Legend","order":9,"icon":null},"parent":{"__typename":"File","relativePath":"tool/legend/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/legend"},"frontmatter":{"title":"图例 Legend","order":9,"icon":null},"parent":{"__typename":"File","relativePath":"tool/legend/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/multiEdge"},"frontmatter":{"title":"Multiple Edges Between 2 Nodes","order":9,"icon":null},"parent":{"__typename":"File","relativePath":"item/multiEdge/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/multiEdge"},"frontmatter":{"title":"两节点间存在多条边","order":9,"icon":null},"parent":{"__typename":"File","relativePath":"item/multiEdge/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/comboForce"},"frontmatter":{"title":"Combo Force Layout","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"net/comboForce/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/comboForce"},"frontmatter":{"title":"Combo 力导布局","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"net/comboForce/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/customBehavior"},"frontmatter":{"title":"自定义交互","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/customBehavior/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/customBehavior"},"frontmatter":{"title":"Custom Behavior","order":10,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/customBehavior/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/net/gpuLayout"},"frontmatter":{"title":"GPU Layout","order":12,"icon":null},"parent":{"__typename":"File","relativePath":"net/gpuLayout/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/gpuLayout"},"frontmatter":{"title":"GPU 图布局","order":12,"icon":null},"parent":{"__typename":"File","relativePath":"net/gpuLayout/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/zoomCanvasFixItem"},"frontmatter":{"title":"Fix Items while Zooming","order":12,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/zoomCanvasFixItem/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/zoomCanvasFixItem"},"frontmatter":{"title":"缩放画布时固定选中元素","order":12,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/zoomCanvasFixItem/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/dragCanvasHideItem"},"frontmatter":{"title":"拖拽缩放画布时隐藏元素","order":13,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/dragCanvasHideItem/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/dragCanvasHideItem"},"frontmatter":{"title":"Hide Items while Dragging and Zooming","order":13,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/dragCanvasHideItem/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/createEdge"},"frontmatter":{"title":"Create Edge","order":13,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/createEdge/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/createEdge"},"frontmatter":{"title":"创建边","order":13,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/createEdge/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/select"},"frontmatter":{"title":"Select","order":14,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/select/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/select"},"frontmatter":{"title":"选中","order":14,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/select/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/pagination"},"frontmatter":{"title":"Nodes Paginaion","order":15,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/pagination/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/pagination"},"frontmatter":{"title":"节点分页器","order":15,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/pagination/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/fitView"},"frontmatter":{"title":"Fit View with Shortcuts","order":15,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/fitView/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/fitView"},"frontmatter":{"title":"快捷键适应画布","order":15,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/fitView/index.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/layoutMechanism"},"frontmatter":{"title":"布局机制","order":19,"icon":null},"parent":{"__typename":"File","relativePath":"net/layoutMechanism/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/layoutMechanism"},"frontmatter":{"title":"Layout Mechanism","order":19,"icon":null},"parent":{"__typename":"File","relativePath":"net/layoutMechanism/index.en.md"}}},{"node":{"fields":{"slug":"/en/examples/net/aiLayout"},"frontmatter":{"title":"AI Layout Prediction","order":20,"icon":null},"parent":{"__typename":"File","relativePath":"net/aiLayout/index.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/aiLayout"},"frontmatter":{"title":"AI 智能布局推荐","order":20,"icon":null},"parent":{"__typename":"File","relativePath":"net/aiLayout/index.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/case/treeDemos/API"},"frontmatter":{"title":"","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"case/treeDemos/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/case/treeDemos/API"},"frontmatter":{"title":"","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"case/treeDemos/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/radialtree/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/radialtree/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/radialtree/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/radialtree/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/mindmap/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/mindmap/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/mindmap/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/mindmap/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/indented/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/indented/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/indented/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/indented/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/dendrogram/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/dendrogram/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/dendrogram/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/dendrogram/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/customItemTree/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/customItemTree/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/customItemTree/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/customItemTree/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tree/compactBox/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/compactBox/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tree/compactBox/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tree/compactBox/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/tooltip/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/tooltip/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/tooltip/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/tooltip/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/toolbar/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/toolbar/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/toolbar/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/toolbar/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/timebar/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/timebar/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/timebar/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/timebar/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/snapline/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/snapline/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/snapline/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/snapline/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/minimap/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/minimap/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/minimap/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/minimap/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/legend/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/legend/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/legend/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/legend/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/fisheye/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/fisheye/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/fisheye/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/fisheye/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/edgeFilterLens/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/edgeFilterLens/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/edgeFilterLens/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/edgeFilterLens/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/edgeBundling/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/edgeBundling/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/edgeBundling/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/edgeBundling/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/tool/contextMenu/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/contextMenu/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/tool/contextMenu/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"tool/contextMenu/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/scatter/stateChange/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/stateChange/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/scatter/stateChange/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/stateChange/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/scatter/node/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/node/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/scatter/node/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/node/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/scatter/edge/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/edge/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/scatter/edge/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"scatter/edge/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/radialLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/radialLayout/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/radialLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/radialLayout/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/net/mdsLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/mdsLayout/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/mdsLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/mdsLayout/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/layoutMechanism/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/layoutMechanism/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/layoutMechanism/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/layoutMechanism/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/gridLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/gridLayout/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/gridLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/gridLayout/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/gpuLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/gpuLayout/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/net/furchtermanLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/furchtermanLayout/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/gpuLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/gpuLayout/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/furchtermanLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/furchtermanLayout/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/forceDirected/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/forceDirected/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/forceDirected/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/forceDirected/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/dagreFlow/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/dagreFlow/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/dagreFlow/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/dagreFlow/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/concentricLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/concentricLayout/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/concentricLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/concentricLayout/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/comboForce/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/comboForce/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/comboForce/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/comboForce/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/net/circular/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/circular/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/circular/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/circular/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/net/aiLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/aiLayout/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/net/aiLayout/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"net/aiLayout/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/defaultNodes/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultNodes/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/defaultNodes/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultNodes/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/defaultEdges/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultEdges/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/defaultEdges/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultEdges/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/defaultCombos/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultCombos/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/defaultCombos/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/defaultCombos/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/customNode/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/customNode/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/customNode/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/customNode/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/customEdge/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/customEdge/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/customEdge/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/customEdge/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/customCombo/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/customCombo/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/item/customCombo/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/customCombo/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/item/arrows/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/arrows/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/item/arrows/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"item/arrows/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/zoomCanvasFixItem/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/zoomCanvasFixItem/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/zoomCanvasFixItem/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/zoomCanvasFixItem/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/treeBehavior/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/treeBehavior/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/treeBehavior/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/treeBehavior/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/setMode/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/setMode/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/setMode/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/setMode/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/select/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/select/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/select/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/select/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/position/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/position/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/position/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/position/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/partialResponse/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/partialResponse/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/partialResponse/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/partialResponse/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/label/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/label/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/label/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/label/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/hull/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/hull/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/hull/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/hull/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/highlight/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/highlight/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/highlight/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/highlight/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/fitView/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/fitView/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/fitView/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/fitView/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/dragCanvasHideItem/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/dragCanvasHideItem/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/dragCanvasHideItem/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/dragCanvasHideItem/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/customBehavior/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/customBehavior/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/customBehavior/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/customBehavior/API.zh.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/createEdge/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/createEdge/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/createEdge/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/createEdge/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/interaction/combo/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/combo/API.zh.md"}}},{"node":{"fields":{"slug":"/en/examples/interaction/combo/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"interaction/combo/API.en.md"}}},{"node":{"fields":{"slug":"/en/examples/algorithm/algoDemos/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"algorithm/algoDemos/API.en.md"}}},{"node":{"fields":{"slug":"/zh/examples/algorithm/algoDemos/API"},"frontmatter":{"title":"API","order":null,"icon":null},"parent":{"__typename":"File","relativePath":"algorithm/algoDemos/API.zh.md"}}}]}},"pageContext":{"allDemos":[{"relativePath":"tree/radialtree/demo/radialCompactBox.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/radialtree/demo/radialCompactBox.js","order":1,"filename":"radialCompactBox.js","title":{"zh":"紧凑辐射树","en":"Radial CompactBox Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*xENwSLuyTZ4AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Radial Tree","order":404},"zh":{"title":"辐射树","order":404}}},{"relativePath":"tree/mindmap/demo/hCustomSideMindmap.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/mindmap/demo/hCustomSideMindmap.js","order":3,"filename":"hCustomSideMindmap.js","title":{"zh":"脑图树-自定义子节点分布","en":"Custom Mindmap Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Su39QqQr9PYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Mindmap","order":402},"zh":{"title":"脑图树","order":402}}},{"relativePath":"tree/mindmap/demo/hLeftMindmap.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/mindmap/demo/hLeftMindmap.js","order":2,"filename":"hLeftMindmap.js","title":{"zh":"脑图树-子节点左侧分布","en":"Left Side Mindmap Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*NNUaTaN9yIgAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Mindmap","order":402},"zh":{"title":"脑图树","order":402}}},{"relativePath":"tree/mindmap/demo/hRightMindmap.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/mindmap/demo/hRightMindmap.js","order":1,"filename":"hRightMindmap.js","title":{"zh":"脑图树-子节点右侧分布","en":"Right Side Mindmap Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*W6OGRLg2UJcAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Mindmap","order":402},"zh":{"title":"脑图树","order":402}}},{"relativePath":"tree/radialtree/demo/radialDendrogram.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/radialtree/demo/radialDendrogram.js","order":0,"filename":"radialDendrogram.js","title":{"zh":"生态辐射树","en":"Radial Dendrograme Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*mS3_Rb4VuPoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Radial Tree","order":404},"zh":{"title":"辐射树","order":404}}},{"relativePath":"tree/mindmap/demo/hMindmap.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/mindmap/demo/hMindmap.js","order":0,"filename":"hMindmap.js","title":{"zh":"脑图树-子节点自动两侧分布","en":"Two Side Mindmap Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*wRZjTL3fCbEAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Mindmap","order":402},"zh":{"title":"脑图树","order":402}}},{"relativePath":"tree/indented/demo/hIntended.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/indented/demo/hIntended.js","order":2,"filename":"hIntended.js","title":{"zh":"缩进树-子节点两侧分布","en":"Two Side Indented Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*42EXSYyBcTYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Indented","order":403},"zh":{"title":"缩进树","order":403}}},{"relativePath":"tree/indented/demo/filesystem.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/indented/demo/filesystem.js","order":0,"filename":"filesystem.js","title":{"zh":"缩进树-文件系统","en":"FileSystem-Indented Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*PJnfTKFRaCAAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Indented","order":403},"zh":{"title":"缩进树","order":403}}},{"relativePath":"tree/dendrogram/demo/basicDendrogram.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/dendrogram/demo/basicDendrogram.js","order":0,"filename":"basicDendrogram.js","title":{"zh":"生态树","en":"Basic Dendrogram Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ffD6S74MXw4AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Dendrogram","order":401},"zh":{"title":"生态树","order":401}}},{"relativePath":"tree/dendrogram/demo/tbDendrogram.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/dendrogram/demo/tbDendrogram.js","order":1,"filename":"tbDendrogram.js","title":{"zh":"至上而下的生态树","en":"Top to Bottom Dendrogram"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*nTKmRKkyUVUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Dendrogram","order":401},"zh":{"title":"生态树","order":401}}},{"relativePath":"tree/customItemTree/demo/customEdgeTree.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/customItemTree/demo/customEdgeTree.js","order":0,"filename":"customEdgeTree.js","title":{"zh":"自定义树图中的边","en":"Edges on Tree"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*AncCQ5e7XncAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"定制树图元素样式","order":405},"en":{"title":"Custom Tree Items","order":405}}},{"relativePath":"tree/customItemTree/demo/treeEdgeLabel.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/customItemTree/demo/treeEdgeLabel.js","order":1,"filename":"treeEdgeLabel.js","title":{"zh":"树图边上的标签","en":"Labels on Tree Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*LtTbS4D59H4AAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"定制树图元素样式","order":405},"en":{"title":"Custom Tree Items","order":405}}},{"relativePath":"tree/indented/demo/intendAlignTop.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/indented/demo/intendAlignTop.js","order":1,"filename":"intendAlignTop.js","title":{"zh":"缩进树-顶部对齐","en":"FileSystem-Align Top"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*kbzRRZk2t2cAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Indented","order":403},"zh":{"title":"缩进树","order":403}}},{"relativePath":"tree/customItemTree/demo/customTree.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/customItemTree/demo/customTree.js","order":2,"filename":"customTree.js","title":{"zh":"自定义复杂树图样式","en":"Custom Tree Node 1"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*D8kzQYHaUiIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"定制树图元素样式","order":405},"en":{"title":"Custom Tree Items","order":405}}},{"relativePath":"tree/compactBox/demo/compactBoxLeftAlign.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/compactBox/demo/compactBoxLeftAlign.js","order":2,"filename":"compactBoxLeftAlign.js","title":{"zh":"节点左对齐的紧凑树","en":"CompactBox with Left Align Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*b3G-QZZekE8AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"CompactBox","order":400},"zh":{"title":"紧凑树","order":400}}},{"relativePath":"tree/compactBox/demo/basicCompactBox.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/compactBox/demo/basicCompactBox.js","order":0,"filename":"basicCompactBox.js","title":{"zh":"紧凑树","en":"CompactBox Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*XlXOR5pmM3oAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"CompactBox","order":400},"zh":{"title":"紧凑树","order":400}}},{"relativePath":"tree/compactBox/demo/tbCompactBox.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tree/compactBox/demo/tbCompactBox.js","order":1,"filename":"tbCompactBox.js","title":{"zh":"至上而下的紧凑树","en":"Top to Bottom CompactBox"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*KrAqTrFbNjMAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"CompactBox","order":400},"zh":{"title":"紧凑树","order":400}}},{"relativePath":"tool/tooltip/demo/tooltipClick.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/tooltip/demo/tooltipClick.js","order":3,"filename":"tooltipClick.js","title":{"zh":"点击出现提示框","en":"Tooltip Plugin with Click Trigger"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*kjsSQ5pgVmoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Tooltip","order":900},"zh":{"title":"提示框","order":900}}},{"relativePath":"tool/tooltip/demo/tooltipFix.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/tooltip/demo/tooltipFix.js","order":1,"filename":"tooltipFix.js","title":{"zh":"固定提示框位置","en":"Tooltip Plugin with fixToNode"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*kjsSQ5pgVmoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Tooltip","order":900},"zh":{"title":"提示框","order":900}}},{"relativePath":"tool/tooltip/demo/tooltipLocalCustom.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/tooltip/demo/tooltipLocalCustom.js","order":4,"filename":"tooltipLocalCustom.js","title":{"zh":"局部图形响应提示框 behavior-自定义节点","en":"Local Tooltip Behavor"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*bIHUToKq6OYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Tooltip","order":900},"zh":{"title":"提示框","order":900}}},{"relativePath":"tool/tooltip/demo/tooltipPlugin.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/tooltip/demo/tooltipPlugin.js","order":0,"filename":"tooltipPlugin.js","title":{"zh":"提示框插件","en":"Tooltip Plugin"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*kjsSQ5pgVmoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Tooltip","order":900},"zh":{"title":"提示框","order":900}}},{"relativePath":"tool/tooltip/demo/tooltipPluginLocal.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/tooltip/demo/tooltipPluginLocal.js","order":2,"filename":"tooltipPluginLocal.js","title":{"zh":"提示框插件局部生效","en":"Local Tooltip Plugin"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*kjsSQ5pgVmoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Tooltip","order":900},"zh":{"title":"提示框","order":900}}},{"relativePath":"tool/toolbar/demo/self-toolbar.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/toolbar/demo/self-toolbar.js","order":1,"filename":"self-toolbar.js","title":{"zh":"自定义工具栏","en":"ToolBar"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ljOiTJAuQnIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"工具栏","order":904},"en":{"title":"ToolBar","order":904}}},{"relativePath":"tool/toolbar/demo/toolbar.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/toolbar/demo/toolbar.js","order":0,"filename":"toolbar.js","title":{"zh":"工具栏","en":"ToolBar"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*MhpmS68lZW0AAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"工具栏","order":904},"en":{"title":"ToolBar","order":904}}},{"relativePath":"tool/timebar/demo/timebar.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/timebar/demo/timebar.js","order":0,"filename":"timebar.js","title":{"zh":"趋势时间轴","en":"TrendTimeBar"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*lfvIQJYbs7oAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"时间轴","order":905},"en":{"title":"TimeBar","order":905}}},{"relativePath":"tool/timebar/demo/simple-timebar.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/timebar/demo/simple-timebar.js","order":1,"filename":"simple-timebar.js","title":{"zh":"简易时间轴","en":"SimperTimeBar"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*g2zhQqP6ruYAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"时间轴","order":905},"en":{"title":"TimeBar","order":905}}},{"relativePath":"tool/snapline/demo/default.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/snapline/demo/default.js","order":0,"filename":"default.js","title":{"zh":"对齐线","en":"SnapLine"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*fRMFSZCjuoMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SnapLine","order":908},"zh":{"title":"对齐线","order":908}}},{"relativePath":"tool/snapline/demo/custom.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/snapline/demo/custom.js","order":1,"filename":"custom.js","title":{"zh":"自定义对齐线样式","en":"Custom SnapLine"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*G-vPSa3I1lkAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"SnapLine","order":908},"zh":{"title":"对齐线","order":908}}},{"relativePath":"tool/minimap/demo/imageMinimap.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/minimap/demo/imageMinimap.js","order":1,"filename":"imageMinimap.js","title":{"zh":"使用图片的小地图","en":"Image Minimap"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*r3dAQo-R3BoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"Minimap","order":902},"en":{"title":"Minimap","order":902}}},{"relativePath":"tool/minimap/demo/minimap.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/minimap/demo/minimap.js","order":0,"filename":"minimap.js","title":{"zh":"小地图","en":"Minimap"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*r3dAQo-R3BoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"Minimap","order":902},"en":{"title":"Minimap","order":902}}},{"relativePath":"tool/legend/demo/legendClick.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/legend/demo/legendClick.js","order":2,"filename":"legendClick.js","title":{"zh":"图例-点击筛选2","en":"Legend with Clicking Filtering 2"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*nCTfRq6522kAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Legend","order":909},"zh":{"title":"图例 Legend","order":909}}},{"relativePath":"tool/legend/demo/legendMouseenter.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/legend/demo/legendMouseenter.js","order":1,"filename":"legendMouseenter.js","title":{"zh":"图例-Hover 筛选","en":"Legend with Hovering Filtering"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ftAtR6k9RWIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Legend","order":909},"zh":{"title":"图例 Legend","order":909}}},{"relativePath":"tool/timebar/demo/slice-timebar.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/timebar/demo/slice-timebar.js","order":2,"filename":"slice-timebar.js","title":{"zh":"刻度时间轴","en":"SliceTimeBar"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*n6ECQ7Jn5pQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"时间轴","order":905},"en":{"title":"TimeBar","order":905}}},{"relativePath":"tool/fisheye/demo/fisheye.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/fisheye/demo/fisheye.js","order":0,"filename":"fisheye.js","title":{"zh":"鱼眼放大镜","en":"Fisheye Lens"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*kHtkQ5N4TNEAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Fisheye","order":906},"zh":{"title":"鱼眼放大镜","order":906}}},{"relativePath":"tool/fisheye/demo/fisheyeStyle.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/fisheye/demo/fisheyeStyle.js","order":1,"filename":"fisheyeStyle.js","title":{"zh":"鱼眼放大镜样式","en":"Fisheye Lens Style"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*kHtkQ5N4TNEAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Fisheye","order":906},"zh":{"title":"鱼眼放大镜","order":906}}},{"relativePath":"tool/edgeFilterLens/demo/edgeFilter.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/edgeFilterLens/demo/edgeFilter.js","order":0,"filename":"edgeFilter.js","title":{"zh":"边过滤镜","en":"Edge Filter Lens"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*elTYSJwOR7MAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Edge Filter Lens","order":907},"zh":{"title":"边过滤镜","order":907}}},{"relativePath":"tool/edgeFilterLens/demo/edgeFilterConfig.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/edgeFilterLens/demo/edgeFilterConfig.js","order":1,"filename":"edgeFilterConfig.js","title":{"zh":"更多配置","en":"More Configs"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ZkZ4Q6JeIaQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Edge Filter Lens","order":907},"zh":{"title":"边过滤镜","order":907}}},{"relativePath":"tool/legend/demo/legend.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/legend/demo/legend.js","order":0,"filename":"legend.js","title":{"zh":"图例-点击筛选","en":"Legend with Clicking Filtering"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*0RYmToKWsOQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Legend","order":909},"zh":{"title":"图例 Legend","order":909}}},{"relativePath":"tool/edgeBundling/demo/edgeBundling.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/edgeBundling/demo/edgeBundling.js","order":0,"filename":"edgeBundling.js","title":{"zh":"边绑定","en":"Edge Bundling"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*7g4iRqVfkHQAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"边绑定","order":903},"en":{"title":"Edge Bundling","order":903}}},{"relativePath":"tool/contextMenu/demo/contextMenu.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/tool/contextMenu/demo/contextMenu.js","order":0,"filename":"contextMenu.js","title":{"zh":"上下文菜单","en":"Context Menu"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*YtBHR5akE2gAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"上下文菜单","order":901},"en":{"title":"ContextMenu","order":901}}},{"relativePath":"scatter/stateChange/demo/hover.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/scatter/stateChange/demo/hover.js","order":0,"filename":"hover.js","title":{"zh":"状态与动画","en":"State and Animation"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*WJhtR4pSJssAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"State Switch","order":802},"zh":{"title":"状态切换","order":802}}},{"relativePath":"scatter/node/demo/node.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/scatter/node/demo/node.js","order":0,"filename":"node.js","title":{"zh":"节点动画","en":"Node Animation"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*MDDjSov7gMkAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"节点动画","order":800},"en":{"title":"Node Animation","order":800}}},{"relativePath":"scatter/edge/demo/lineGrowth.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/scatter/edge/demo/lineGrowth.js","order":2,"filename":"lineGrowth.js","title":{"zh":"无到有的边","en":"Growing Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*W40_RKyCrDsAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Edge Animation","order":801},"zh":{"title":"边动画","order":801}}},{"relativePath":"scatter/edge/demo/edge.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/scatter/edge/demo/edge.js","order":1,"filename":"edge.js","title":{"zh":"虚线运动","en":"Running Dashed Edge"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*70lpSLPAxb8AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Edge Animation","order":801},"zh":{"title":"边动画","order":801}}},{"relativePath":"scatter/edge/demo/pointInLine.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/scatter/edge/demo/pointInLine.js","order":0,"filename":"pointInLine.js","title":{"zh":"圆点沿边运动","en":"Running Circle"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*HqX_Q7lljpsAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Edge Animation","order":801},"zh":{"title":"边动画","order":801}}},{"relativePath":"scatter/customAnimate/demo/position.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/scatter/customAnimate/demo/position.js","order":0,"filename":"position.js","title":{"zh":"自定义动画","en":"Custom Animation"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*tN3KQ59_XO8AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Animation","order":805},"zh":{"title":"自定义动画","order":805}}},{"relativePath":"performance/perf/demo/eva.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/performance/perf/demo/eva.js","order":1,"filename":"eva.js","title":{"zh":"~20000 图元","en":"~20000 Graphic Shapes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*mysRTLxipwMAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"性能案例","order":1100},"en":{"title":"Performance Case","order":1100}}},{"relativePath":"scatter/changePosition/demo/default.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/scatter/changePosition/demo/default.js","order":0,"filename":"default.js","title":{"zh":"节点移动动画","en":"Node Move Animation"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*M-EGS5v6RnUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Node Move Animation","order":804},"zh":{"title":"节点移动动画","order":804}}},{"relativePath":"performance/perf/demo/netscience.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/performance/perf/demo/netscience.js","order":0,"filename":"netscience.js","title":{"zh":"5000+ 图元","en":"5000+ Graphic Shapes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Q6eRT7RNwBYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"性能案例","order":1100},"en":{"title":"Performance Case","order":1100}}},{"relativePath":"performance/perf/demo/moreData.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/performance/perf/demo/moreData.js","order":2,"filename":"moreData.js","title":{"zh":"50000+ 图元","en":"50000+ Graphic Shapes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*6U-cSrdpBjYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"性能案例","order":1100},"en":{"title":"Performance Case","order":1100}}},{"relativePath":"net/radialLayout/demo/interactRadial.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/radialLayout/demo/interactRadial.js","order":3,"filename":"interactRadial.js","title":{"zh":"交互扩展节点的辐射布局","en":"Interactively Expand a Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*F4OQQKc8l2IAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Radial Layout","order":303},"zh":{"title":"Radial 辐射布局","order":303}}},{"relativePath":"net/radialLayout/demo/basicRadial.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/radialLayout/demo/basicRadial.js","order":0,"filename":"basicRadial.js","title":{"zh":"基本 Radial 辐射布局","en":"Basic Radial Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Ec_WQ5hqVsgAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Radial Layout","order":303},"zh":{"title":"Radial 辐射布局","order":303}}},{"relativePath":"net/radialLayout/demo/radialConfigurationTranslate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/radialLayout/demo/radialConfigurationTranslate.js","order":4,"filename":"radialConfigurationTranslate.js","title":{"zh":"Radial 布局参数动态变化","en":"Update Configurations for Radial"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ikctQb9KECAAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Radial Layout","order":303},"zh":{"title":"Radial 辐射布局","order":303}}},{"relativePath":"net/radialLayout/demo/preventOverlapUnstrictRadial.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/radialLayout/demo/preventOverlapUnstrictRadial.js","order":2,"filename":"preventOverlapUnstrictRadial.js","title":{"zh":"防止节点重叠的非严格辐射布局","en":"Prevent Node Overlappings and Unrestrict Radial"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*X8rzTZyWwUcAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Radial Layout","order":303},"zh":{"title":"Radial 辐射布局","order":303}}},{"relativePath":"net/radialLayout/demo/preventOverlapRadial.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/radialLayout/demo/preventOverlapRadial.js","order":1,"filename":"preventOverlapRadial.js","title":{"zh":"防止节点重叠的严格辐射布局","en":"Prevent Node Overlappings and Restrict Radial"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*GAFjRJeAoAsAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Radial Layout","order":303},"zh":{"title":"Radial 辐射布局","order":303}}},{"relativePath":"net/radialLayout/demo/sortRadial.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/radialLayout/demo/sortRadial.js","order":5,"filename":"sortRadial.js","title":{"zh":"同层节点按照指定字段聚类","en":"Order the Level Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*gzfTQKBB62IAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Radial Layout","order":303},"zh":{"title":"Radial 辐射布局","order":303}}},{"relativePath":"net/mdsLayout/demo/basicMDS.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/mdsLayout/demo/basicMDS.js","order":0,"filename":"basicMDS.js","title":{"zh":"基本 MDS 布局","en":"Basic MDS Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*aUS7TJR2NHcAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"MDS Layout","order":307},"zh":{"title":"MDS 布局","order":307}}},{"relativePath":"net/layoutMechanism/demo/customBigraph.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/layoutMechanism/demo/customBigraph.js","order":4,"filename":"customBigraph.js","title":{"zh":"自定义二分图布局","en":"Custom Bigraph Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Vod0Q6u5dSoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"布局机制","order":319},"en":{"title":"Layout Mechanism","order":319}}},{"relativePath":"net/layoutMechanism/demo/dataChange.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/layoutMechanism/demo/dataChange.js","order":3,"filename":"dataChange.js","title":{"zh":"数据动态切换","en":"Change Data"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*VIXvQagCETkAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"布局机制","order":319},"en":{"title":"Layout Mechanism","order":319}}},{"relativePath":"net/layoutMechanism/demo/layoutTiming.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/layoutMechanism/demo/layoutTiming.js","order":5,"filename":"layoutTiming.js","title":{"zh":"布局时机监听","en":"Layout Listener"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*tdRuSbgJAZ8AAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"布局机制","order":319},"en":{"title":"Layout Mechanism","order":319}}},{"relativePath":"net/layoutMechanism/demo/layoutTranslate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/layoutMechanism/demo/layoutTranslate.js","order":0,"filename":"layoutTranslate.js","title":{"zh":"布局切换","en":"Layout Translate"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eZRNQ4tpkecAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"布局机制","order":319},"en":{"title":"Layout Mechanism","order":319}}},{"relativePath":"net/layoutMechanism/demo/sublayoutPipes.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/layoutMechanism/demo/sublayoutPipes.js","order":2,"filename":"sublayoutPipes.js","title":{"zh":"流水线子图布局","en":"Sublayout Pipeline"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*SQijSogATDAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"布局机制","order":319},"en":{"title":"Layout Mechanism","order":319}}},{"relativePath":"net/layoutMechanism/demo/subgraphLayout.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/layoutMechanism/demo/subgraphLayout.js","order":1,"filename":"subgraphLayout.js","title":{"zh":"子图布局","en":"Subgraph Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*dsOISrH6tREAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"布局机制","order":319},"en":{"title":"Layout Mechanism","order":319}}},{"relativePath":"net/gridLayout/demo/clusterGrid.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gridLayout/demo/clusterGrid.js","order":1,"filename":"clusterGrid.js","title":{"zh":"指定排序方式的网格布局","en":"Ordered Grid Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*_ABKTptHoKoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Grid","order":305},"zh":{"title":"Grid 网格布局","order":305}}},{"relativePath":"net/gridLayout/demo/basicGrid.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gridLayout/demo/basicGrid.js","order":0,"filename":"basicGrid.js","title":{"zh":"基本 Grid 网格布局","en":"Basic Grid Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Oh6mRLVEBBIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Grid","order":305},"zh":{"title":"Grid 网格布局","order":305}}},{"relativePath":"net/gpuLayout/demo/basicGForce.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gpuLayout/demo/basicGForce.js","order":5,"filename":"basicGForce.js","title":{"zh":"GPU gForce 小数据","en":"GPU gForce"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*W9MoQoKaQbYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"GPU Layout","order":312},"zh":{"title":"GPU 图布局","order":312}}},{"relativePath":"net/gpuLayout/demo/basicFruchterman.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gpuLayout/demo/basicFruchterman.js","order":0,"filename":"basicFruchterman.js","title":{"zh":"GPU Fruchterman 小数据","en":"GPU Fruchterman Small Data"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1KY7SLEXxqMAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"GPU Layout","order":312},"zh":{"title":"GPU 图布局","order":312}}},{"relativePath":"net/gpuLayout/demo/fruchtermanClustering.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gpuLayout/demo/fruchtermanClustering.js","order":3,"filename":"fruchtermanClustering.js","title":{"zh":"GPU Fruchterman 聚类布局","en":"GPU Fruchterman with Clustering"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*WO1OTbNE_ugAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"GPU Layout","order":312},"zh":{"title":"GPU 图布局","order":312}}},{"relativePath":"net/gpuLayout/demo/frComplexDataWorker.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gpuLayout/demo/frComplexDataWorker.js","order":2,"filename":"frComplexDataWorker.js","title":{"zh":"GPU Fruchterman 复杂数据 + WebWorker","en":"Fruchterman Layout with GPU and WebWorker"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*0sl9RZ7Cp28AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"GPU Layout","order":312},"zh":{"title":"GPU 图布局","order":312}}},{"relativePath":"net/gpuLayout/demo/gForceComplexData.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gpuLayout/demo/gForceComplexData.js","order":6,"filename":"gForceComplexData.js","title":{"zh":"GPU gForce 复杂数据","en":"GPU gForce with Complex Data"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*2lg0SYvEiusAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"GPU Layout","order":312},"zh":{"title":"GPU 图布局","order":312}}},{"relativePath":"net/gpuLayout/demo/fruchtermanComplexData.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gpuLayout/demo/fruchtermanComplexData.js","order":1,"filename":"fruchtermanComplexData.js","title":{"zh":"GPU Fruchterman 复杂数据","en":"GPU Fruchterman with Complex Data"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*0sl9RZ7Cp28AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"GPU Layout","order":312},"zh":{"title":"GPU 图布局","order":312}}},{"relativePath":"net/gpuLayout/demo/gForceCPU.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gpuLayout/demo/gForceCPU.js","order":7,"filename":"gForceCPU.js","title":{"zh":"CPU gForce 小数据","en":"CPU gForce Small Data"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*lX-qSqDECrIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"GPU Layout","order":312},"zh":{"title":"GPU 图布局","order":312}}},{"relativePath":"net/gpuLayout/demo/fruchtermanConfigurationTranslate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/gpuLayout/demo/fruchtermanConfigurationTranslate.js","order":4,"filename":"fruchtermanConfigurationTranslate.js","title":{"zh":"GPU Fruchterman 布局参数动态变化","en":"GPU Update the Configurations for Fruchterman"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*W9MoQoKaQbYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"GPU Layout","order":312},"zh":{"title":"GPU 图布局","order":312}}},{"relativePath":"net/furchtermanLayout/demo/fruchtermanFix.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/furchtermanLayout/demo/fruchtermanFix.js","order":4,"filename":"fruchtermanFix.js","title":{"zh":"Fruchterman 固定被拖拽的节点","en":"Fruchterman with Fixing Dragged Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*fQNPRKHPJRMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"Fruchterman 图布局","order":302},"en":{"title":"Fruchterman Layout","order":302}}},{"relativePath":"net/furchtermanLayout/demo/fruchtermanConfigurationTranslate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/furchtermanLayout/demo/fruchtermanConfigurationTranslate.js","order":2,"filename":"fruchtermanConfigurationTranslate.js","title":{"zh":"Fruchterman 布局参数动态变化","en":"Update the Configurations for Fruchterman"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*W9MoQoKaQbYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"Fruchterman 图布局","order":302},"en":{"title":"Fruchterman Layout","order":302}}},{"relativePath":"net/furchtermanLayout/demo/basicFruchterman.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/furchtermanLayout/demo/basicFruchterman.js","order":0,"filename":"basicFruchterman.js","title":{"zh":"基本 Fruchterman 布局","en":"Basic Fruchterman Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1KY7SLEXxqMAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"Fruchterman 图布局","order":302},"en":{"title":"Fruchterman Layout","order":302}}},{"relativePath":"net/furchtermanLayout/demo/fruchtermanWebWorker.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/furchtermanLayout/demo/fruchtermanWebWorker.js","order":3,"filename":"fruchtermanWebWorker.js","title":{"zh":"Fruchterman 使用 Web-worker","en":"Fruchterman with Web-worker"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*0sl9RZ7Cp28AAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"Fruchterman 图布局","order":302},"en":{"title":"Fruchterman Layout","order":302}}},{"relativePath":"net/furchtermanLayout/demo/fruchtermanClustering.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/furchtermanLayout/demo/fruchtermanClustering.js","order":1,"filename":"fruchtermanClustering.js","title":{"zh":"Fruchterman 聚类布局","en":"Fruchterman with Clustering"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*WO1OTbNE_ugAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"Fruchterman 图布局","order":302},"en":{"title":"Fruchterman Layout","order":302}}},{"relativePath":"net/forceDirected/demo/basicFA2.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/basicFA2.js","order":1,"filename":"basicFA2.js","title":{"zh":"基本 Force Atlas 2","en":"Basic Force-Atlas 2 Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*MqwAQZLIVPwAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/basicForceDirected.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/basicForceDirected.js","order":0,"filename":"basicForceDirected.js","title":{"zh":"基本力导向布局及节点拖拽","en":"Basic Force-directed Layout with dragging"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Ce2WSIlo_fcAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/basicForceDirectedDragFix.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/basicForceDirectedDragFix.js","order":5,"filename":"basicForceDirectedDragFix.js","title":{"zh":"固定被拖拽节点","en":"Fix the Dragged Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*0qLJQaRFg90AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/forceBubbles.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/forceBubbles.js","order":7,"filename":"forceBubbles.js","title":{"zh":"力导向气泡图","en":"Force-directed Bubbles"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*prZhSI341hUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/forceClustering.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/forceClustering.js","order":3,"filename":"forceClustering.js","title":{"zh":"力导向布局聚类","en":"Force Layout with Clustering"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*xonLSopPjKUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/forceConstrainedInRect.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/forceConstrainedInRect.js","order":8,"filename":"forceConstrainedInRect.js","title":{"zh":"约束在范围内布局","en":"Constrain the Nodes in a region"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*-4H8SaV8QKwAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/forceDirectedPreventOverlap.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/forceDirectedPreventOverlap.js","order":2,"filename":"forceDirectedPreventOverlap.js","title":{"zh":"力导向布局防止节点重叠","en":"Prevent Node Overlappings"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*9VXcQLLyzHgAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/forceDirectedConfigurationTranslate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/forceDirectedConfigurationTranslate.js","order":6,"filename":"forceDirectedConfigurationTranslate.js","title":{"zh":"力导向布局参数动态变化","en":"Update Configurations for Force-directed Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IyK7T5MkVqUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/gForceFix.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/gForceFix.js","order":9,"filename":"gForceFix.js","title":{"zh":"GForce 固定被拖拽的节点","en":"GForce with Fixing Dragged Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*YMwnTbT9NnQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/forceDirected/demo/forceDirectedFunctionalParams.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/forceDirected/demo/forceDirectedFunctionalParams.js","order":4,"filename":"forceDirectedFunctionalParams.js","title":{"zh":"定制不同节点的参数","en":"Different Configurations for Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*SnVUQbXv7JAAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Force-directed Layout","order":300},"zh":{"title":"力导向图布局","order":300}}},{"relativePath":"net/dagreFlow/demo/dagreCombo.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/dagreFlow/demo/dagreCombo.js","order":1,"filename":"dagreCombo.js","title":{"zh":"带有 Combo 的流程图","en":"Dagre with Combos"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*94EUTJ8l2QAAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Dagre Layout","order":301},"zh":{"title":"Dagre 流程图布局","order":301}}},{"relativePath":"net/dagreFlow/demo/dagreConfigurationTranslate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/dagreFlow/demo/dagreConfigurationTranslate.js","order":4,"filename":"dagreConfigurationTranslate.js","title":{"zh":"Dagre 布局参数动态变化","en":"Update Configurations for Dagre Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*VkwOTL2UyN0AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Dagre Layout","order":301},"zh":{"title":"Dagre 流程图布局","order":301}}},{"relativePath":"net/dagreFlow/demo/basicDagre.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/dagreFlow/demo/basicDagre.js","order":0,"filename":"basicDagre.js","title":{"zh":"Dagre 流程图","en":"Basic Dagre Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*2uMmRo5wYPUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Dagre Layout","order":301},"zh":{"title":"Dagre 流程图布局","order":301}}},{"relativePath":"net/dagreFlow/demo/lrDagreUL.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/dagreFlow/demo/lrDagreUL.js","order":2,"filename":"lrDagreUL.js","title":{"zh":"自左向右的 Dagre 上对齐","en":"Dagre from Left to Right"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*LJpmR4G7J3YAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Dagre Layout","order":301},"zh":{"title":"Dagre 流程图布局","order":301}}},{"relativePath":"net/dagreFlow/demo/lrDagre.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/dagreFlow/demo/lrDagre.js","order":3,"filename":"lrDagre.js","title":{"zh":"自左向右的 Dagre","en":"Dagre from Left to Right"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*pdaxTpV1R0EAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Dagre Layout","order":301},"zh":{"title":"Dagre 流程图布局","order":301}}},{"relativePath":"net/concentricLayout/demo/basicConcentric.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/concentricLayout/demo/basicConcentric.js","order":0,"filename":"basicConcentric.js","title":{"zh":"基本 Concentric 同心圆布局","en":"Basic Concentric Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*QpyPTbBpO2AAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Concentric Layout","order":306},"zh":{"title":"Concentric 同心圆布局","order":306}}},{"relativePath":"net/comboForce/demo/basicComboForce.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/comboForce/demo/basicComboForce.js","order":0,"filename":"basicComboForce.js","title":{"zh":"基本 Combo 力导向布局","en":"Basic Combo Force Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*GK34T7F1_CYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Combo Force Layout","order":310},"zh":{"title":"Combo 力导布局","order":310}}},{"relativePath":"net/circular/demo/degreeCircular.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/circular/demo/degreeCircular.js","order":1,"filename":"degreeCircular.js","title":{"zh":"按照节点度数排序的 Circular 布局","en":"Degree Ordered Circular"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*MOEeS6ooB7AAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Circular Layout","order":304},"zh":{"title":"Circular 环形布局","order":304}}},{"relativePath":"net/circular/demo/circularConfigurationTranslate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/circular/demo/circularConfigurationTranslate.js","order":4,"filename":"circularConfigurationTranslate.js","title":{"zh":"Circular 布局参数动态变化","en":"Update Configurations for Circular Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*D85cS7-yqNEAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Circular Layout","order":304},"zh":{"title":"Circular 环形布局","order":304}}},{"relativePath":"net/circular/demo/basicCircular.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/circular/demo/basicCircular.js","order":0,"filename":"basicCircular.js","title":{"zh":"基本 Circular 布局","en":"Basic Circular Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ZSuXQ4PS2F8AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Circular Layout","order":304},"zh":{"title":"Circular 环形布局","order":304}}},{"relativePath":"net/circular/demo/divisionCircular.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/circular/demo/divisionCircular.js","order":3,"filename":"divisionCircular.js","title":{"zh":"分割环形布局","en":"Divided Circular Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*u30nQahg6q0AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Circular Layout","order":304},"zh":{"title":"Circular 环形布局","order":304}}},{"relativePath":"net/circular/demo/spiralCircular.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/circular/demo/spiralCircular.js","order":2,"filename":"spiralCircular.js","title":{"zh":"螺旋线布局","en":"Spiral Layout"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*bY0iSqTc3z4AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Circular Layout","order":304},"zh":{"title":"Circular 环形布局","order":304}}},{"relativePath":"net/arcDiagram/demo/basicArcDiagram.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/arcDiagram/demo/basicArcDiagram.js","order":0,"filename":"basicArcDiagram.js","title":{"zh":"基本弧线图","en":"Basic Arc Diagram"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*_eivQrJXt8sAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"Arc Diagram 弧线图","order":308},"en":{"title":"Arc Diagram","order":308}}},{"relativePath":"net/arcDiagram/demo/circularArcDiagram.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/arcDiagram/demo/circularArcDiagram.js","order":1,"filename":"circularArcDiagram.js","title":{"zh":"环形弧线图","en":"Circular Arc Diagram"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*o-tESYnAAJYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"Arc Diagram 弧线图","order":308},"en":{"title":"Arc Diagram","order":308}}},{"relativePath":"net/aiLayout/demo/layoutPrediction.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/net/aiLayout/demo/layoutPrediction.js","order":0,"filename":"layoutPrediction.js","title":{"zh":"自动布局推荐","en":"Layout Prediction"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eZRNQ4tpkecAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"AI Layout Prediction","order":320},"zh":{"title":"AI 智能布局推荐","order":320}}},{"relativePath":"item/multiEdge/demo/multiEdges.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/multiEdge/demo/multiEdges.js","order":0,"filename":"multiEdges.js","title":{"zh":"两节点间存在多条边","en":"Multiple Edges Between 2 Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*g2p_Qa_wZcIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Multiple Edges Between 2 Nodes","order":609},"zh":{"title":"两节点间存在多条边","order":609}}},{"relativePath":"item/labelBg/demo/edgeBg.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/labelBg/demo/edgeBg.js","order":1,"filename":"edgeBg.js","title":{"zh":"设置边上文本背景","en":"Set Edge label Background"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*w_bNSZTlPXUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Label Background","order":608},"zh":{"title":"设置文本背景","order":608}}},{"relativePath":"item/labelBg/demo/nodeBg.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/labelBg/demo/nodeBg.js","order":0,"filename":"nodeBg.js","title":{"zh":"设置节点文本背景","en":"Set Node Label Background"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*m5ABT5ra4w4AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Label Background","order":608},"zh":{"title":"设置文本背景","order":608}}},{"relativePath":"item/label/demo/labelLen.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/label/demo/labelLen.js","order":1,"filename":"labelLen.js","title":{"zh":"文本超长","en":"Long Label"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*FNzAQKvcW1kAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"超长文本","order":607},"en":{"title":"Long Label","order":607}}},{"relativePath":"item/label/demo/copyLabel.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/label/demo/copyLabel.js","order":0,"filename":"copyLabel.js","title":{"zh":"文本超长交互与复制","en":"Long Label Show and Copy"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*O5DCQ4ziMisAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"超长文本","order":607},"en":{"title":"Long Label","order":607}}},{"relativePath":"item/label/demo/labelLen1.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/label/demo/labelLen1.js","order":2,"filename":"labelLen1.js","title":{"zh":"使用换行符处理文本超长","en":"Break Line for Long Label"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*EC0-R7tAn0MAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"超长文本","order":607},"en":{"title":"Long Label","order":607}}},{"relativePath":"item/defaultNodes/demo/circle.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/circle.js","order":0,"filename":"circle.js","title":{"zh":"圆形","en":"Circle"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*8QIsS5rud6oAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultNodes/demo/donut.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/donut.js","order":1,"filename":"donut.js","title":{"zh":"甜甜圈","en":"Donut"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*NRJ7RpkMPNsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultNodes/demo/ellipse.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/ellipse.js","order":2,"filename":"ellipse.js","title":{"zh":"椭圆","en":"Ellipse"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*tWyKToNjzWMAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultNodes/demo/diamond.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/diamond.js","order":5,"filename":"diamond.js","title":{"zh":"模态菱形矩形","en":"Diamond"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*6XXCTZxhib0AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultNodes/demo/modelRect.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/modelRect.js","order":4,"filename":"modelRect.js","title":{"zh":"模态矩形","en":"ModelRect"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*w4kQSYQ9djQAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultNodes/demo/rect.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/rect.js","order":3,"filename":"rect.js","title":{"zh":"矩形","en":"Rect"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*pnaTQYJ3kaQAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultNodes/demo/image.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/image.js","order":8,"filename":"image.js","title":{"zh":"图片","en":"Image"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*o-MuTpQaj7EAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultNodes/demo/triangle.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/triangle.js","order":7,"filename":"triangle.js","title":{"zh":"三角形","en":"Triangle"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*i2tETYnJ0dIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultNodes/demo/star.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultNodes/demo/star.js","order":6,"filename":"star.js","title":{"zh":"五角星","en":"Star"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*-unkSZtlDeAAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Nodes","order":600},"zh":{"title":"内置节点","order":600}}},{"relativePath":"item/defaultEdges/demo/cubic2.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultEdges/demo/cubic2.js","order":4,"filename":"cubic2.js","title":{"zh":"三次贝塞尔曲线-水平","en":"Horizontal Cubic"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*LxFySJ-uvhMAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Edges","order":601},"zh":{"title":"内置边","order":601}}},{"relativePath":"item/defaultEdges/demo/cubic1.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultEdges/demo/cubic1.js","order":3,"filename":"cubic1.js","title":{"zh":"三次贝塞尔曲线-垂直","en":"Vertical Cubic"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*UO_sQp0XftMAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Edges","order":601},"zh":{"title":"内置边","order":601}}},{"relativePath":"item/defaultEdges/demo/arc.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultEdges/demo/arc.js","order":5,"filename":"arc.js","title":{"zh":"弧线","en":"Arc"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*xkK6QoNUszgAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Edges","order":601},"zh":{"title":"内置边","order":601}}},{"relativePath":"item/defaultEdges/demo/polyline1.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultEdges/demo/polyline1.js","order":0,"filename":"polyline1.js","title":{"zh":"折线 1","en":"Polyline 1"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*tGX6S5r94wkAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Edges","order":601},"zh":{"title":"内置边","order":601}}},{"relativePath":"item/defaultEdges/demo/loop.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultEdges/demo/loop.js","order":6,"filename":"loop.js","title":{"zh":"自环边","en":"Loop"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*W8wxRJk_q8wAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Edges","order":601},"zh":{"title":"内置边","order":601}}},{"relativePath":"item/defaultEdges/demo/polyline2.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultEdges/demo/polyline2.js","order":1,"filename":"polyline2.js","title":{"zh":"折线 2","en":"Polyline 2"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*CA7oQJIkIl8AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Edges","order":601},"zh":{"title":"内置边","order":601}}},{"relativePath":"item/defaultEdges/demo/polyline3.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultEdges/demo/polyline3.js","order":2,"filename":"polyline3.js","title":{"zh":"折线 3","en":"Polyline 3"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*E-MJQqf9mSUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Edges","order":601},"zh":{"title":"内置边","order":601}}},{"relativePath":"item/defaultCombos/demo/circle.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultCombos/demo/circle.js","order":0,"filename":"circle.js","title":"圆形","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Rvx9SYSHGsIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Combos","order":602},"zh":{"title":"内置 Combo","order":602}}},{"relativePath":"item/defaultCombos/demo/rect.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/defaultCombos/demo/rect.js","order":1,"filename":"rect.js","title":"矩形","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*qvmVTZc-iNcAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Built-in Combos","order":602},"zh":{"title":"内置 Combo","order":602}}},{"relativePath":"item/customNode/demo/barChart.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/barChart.js","order":12,"filename":"barChart.js","title":{"zh":"使用 G 自定义的南丁格尔图节点","en":"Nightingale Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*lX3gRZWvbp4AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/areaChart.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/areaChart.js","order":9,"filename":"areaChart.js","title":{"zh":"使用 G 自定义的面积图节点","en":"Area Chart Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*YWuhR5ZjZfkAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/cardNode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/cardNode.js","order":1,"filename":"cardNode.js","title":{"zh":"卡片 2","en":"Card 2"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*b-g0RoOpI3sAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/intervalChartNode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/intervalChartNode.js","order":5,"filename":"intervalChartNode.js","title":{"zh":"节点中嵌入 G2 的柱状图，点击节点可切换数据","en":"G2 Interval Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*D00uR5wb__kAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/card.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/card.js","order":0,"filename":"card.js","title":{"zh":"卡片","en":"Card"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*3cRGRb5nB_UAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/jsxNodeWithAnimate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/jsxNodeWithAnimate.js","order":3,"filename":"jsxNodeWithAnimate.js","title":{"zh":"使用 JSX 自定义节点(带动画)","en":"Custom Node with JSX and animation"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*XfMbSZSrlREAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/lineChart.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/lineChart.js","order":11,"filename":"lineChart.js","title":{"zh":"使用 G 自定义的折线图节点","en":"Line Chart Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*mKmaTIBtVAUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/list.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/list.js","order":15,"filename":"list.js","title":{"zh":"列表","en":"List"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*pxKjQ5dZx80AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/jsxNode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/jsxNode.js","order":2,"filename":"jsxNode.js","title":{"zh":"使用 JSX 自定义节点","en":"Custom Node with JSX"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*NcHWTKo3sEoAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/lineChartNode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/lineChartNode.js","order":4,"filename":"lineChartNode.js","title":{"zh":"节点中嵌入 G2 的折线图","en":"G2 Line Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ZmavSL0dRJIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/pieChart.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/pieChart.js","order":14,"filename":"pieChart.js","title":{"zh":"使用 G 自定义的饼图节点","en":"Pie Chart Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*idENQpnwA1sAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/pieChartNode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/pieChartNode.js","order":7,"filename":"pieChartNode.js","title":{"zh":"节点中嵌入 G2 的饼图","en":"G2 Pie Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*wCxXSK4eWPoAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/pointChartNode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/pointChartNode.js","order":6,"filename":"pointChartNode.js","title":{"zh":"节点中嵌入 G2 的散点图","en":"G2 Point Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*K7r7S7x-YhcAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/pointChart.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/pointChart.js","order":13,"filename":"pointChart.js","title":{"zh":"使用 G 自定义的点线图节点","en":"Point Chart Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*M0ycSarMV2sAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/scrollNode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/scrollNode.js","order":16,"filename":"scrollNode.js","title":{"zh":"节点内容可滚动","en":"Scrollable Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*n-ipTrTaPD4AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/stackChart.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/stackChart.js","order":10,"filename":"stackChart.js","title":{"zh":"使用 G 自定义的堆叠图节点","en":"Stacked Chart Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*giZSRafSctgAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customNode/demo/svgDom.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customNode/demo/svgDom.js","order":8,"filename":"svgDom.js","title":{"zh":"DOM 节点","en":"Dom Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*VgQlQK1MdbIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Node","order":604},"zh":{"title":"自定义节点","order":604}}},{"relativePath":"item/customEdge/demo/customPolyline2.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customEdge/demo/customPolyline2.js","order":2,"filename":"customPolyline2.js","title":{"zh":"自定义折线 2","en":"Custom Polyline 2"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ACNnQLPy20EAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"自定义边","order":605},"en":{"title":"Custom Edge","order":605}}},{"relativePath":"item/customEdge/demo/customPolyline.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customEdge/demo/customPolyline.js","order":1,"filename":"customPolyline.js","title":{"zh":"自定义折线","en":"Custom Polyline"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*FuS3Qq_lDiIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"自定义边","order":605},"en":{"title":"Custom Edge","order":605}}},{"relativePath":"item/customEdge/demo/edgeMulLabel.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customEdge/demo/edgeMulLabel.js","order":3,"filename":"edgeMulLabel.js","title":{"zh":"多标签边","en":"Multiple Labels"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*01YORI5jRp8AAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"自定义边","order":605},"en":{"title":"Custom Edge","order":605}}},{"relativePath":"item/customEdge/demo/extraShape.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customEdge/demo/extraShape.js","order":0,"filename":"extraShape.js","title":{"zh":"添加额外图形","en":"Custom Edge with Extra Shapes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*L4rZQbqwaRYAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"自定义边","order":605},"en":{"title":"Custom Edge","order":605}}},{"relativePath":"item/customCombo/demo/cRect.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customCombo/demo/cRect.js","order":1,"filename":"cRect.js","title":"带有 Marker 的 Rect","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*rQGaT4kiaYoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Combo","order":606},"zh":{"title":"自定义 Combo","order":606}}},{"relativePath":"item/customCombo/demo/cCircle.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/customCombo/demo/cCircle.js","order":0,"filename":"cCircle.js","title":"带有 Marker 的 Circle","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1LelSq5TP9EAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Combo","order":606},"zh":{"title":"自定义 Combo","order":606}}},{"relativePath":"item/arrows/demo/custom-arrows.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/arrows/demo/custom-arrows.js","order":1,"filename":"custom-arrows.js","title":{"zh":"自定义箭头","en":"Custom Arrows"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*C2ODRb7E9mwAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Arrow of Edge","order":603},"zh":{"title":"边的箭头","order":603}}},{"relativePath":"item/arrows/demo/built-in-arrows.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/item/arrows/demo/built-in-arrows.js","order":0,"filename":"built-in-arrows.js","title":{"zh":"默认和内置箭头","en":"Default and Built-in Arrows"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*mGusTo9FcCYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Arrow of Edge","order":603},"zh":{"title":"边的箭头","order":603}}},{"relativePath":"interaction/zoomCanvasFixItem/demo/fixItem.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/zoomCanvasFixItem/demo/fixItem.js","order":0,"filename":"fixItem.js","title":{"zh":"缩放画布时固定元素","en":"Fix Items while Zooming"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*nmaeRqYi9CMAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Fix Items while Zooming","order":712},"zh":{"title":"缩放画布时固定选中元素","order":712}}},{"relativePath":"interaction/treeBehavior/demo/collapseSlibing.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/treeBehavior/demo/collapseSlibing.js","order":1,"filename":"collapseSlibing.js","title":{"zh":"合并同类兄弟节点","en":"Collapse the Sibling Nodes"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ugs9Qad-bQMAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Custom Tree Graph Behavior","order":701},"zh":{"title":"自定义树图交互","order":701}}},{"relativePath":"interaction/treeBehavior/demo/dragSubtree.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/treeBehavior/demo/dragSubtree.js","order":0,"filename":"dragSubtree.js","title":{"zh":"拖拽子树改变结构","en":"Move Subtree to New Parent"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*EU_yRa8hMJUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Tree Graph Behavior","order":701},"zh":{"title":"自定义树图交互","order":701}}},{"relativePath":"interaction/treeBehavior/demo/changeData.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/treeBehavior/demo/changeData.js","order":2,"filename":"changeData.js","title":{"zh":"使用 changeData","en":"Using changeData"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*wc1-QaqOPsgAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Tree Graph Behavior","order":701},"zh":{"title":"自定义树图交互","order":701}}},{"relativePath":"interaction/setMode/demo/setMode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/setMode/demo/setMode.js","order":0,"filename":"setMode.js","title":{"zh":"设置交互模式","en":"Set Mode"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*y1qkTKqhQXkAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Change Mode to Add items","order":708},"zh":{"title":"切换模式增加点和边","order":708}}},{"relativePath":"interaction/select/demo/brush.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/select/demo/brush.js","order":1,"filename":"brush.js","title":"框选","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ZDEiRIQRByEAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Select","order":714},"zh":{"title":"选中","order":714}}},{"relativePath":"interaction/select/demo/click.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/select/demo/click.js","order":0,"filename":"click.js","title":"点击单选或多选","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*F0RGQ67xbGYAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Select","order":714},"zh":{"title":"选中","order":714}}},{"relativePath":"interaction/select/demo/lasso.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/select/demo/lasso.js","order":2,"filename":"lasso.js","title":"拉索选择","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*8WwrRplTPG8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Select","order":714},"zh":{"title":"选中","order":714}}},{"relativePath":"interaction/treeBehavior/demo/loadTreeData.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/treeBehavior/demo/loadTreeData.js","order":3,"filename":"loadTreeData.js","title":{"zh":"使用 addChild","en":"Using addChild"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*wc1-QaqOPsgAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Custom Tree Graph Behavior","order":701},"zh":{"title":"自定义树图交互","order":701}}},{"relativePath":"interaction/position/demo/move.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/position/demo/move.js","order":1,"filename":"move.js","title":{"zh":"点击节点移动到画布中心","en":"Click to Focus a Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*yPb-SKNZ5YYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Click to Focus a Node","order":706},"zh":{"title":"聚焦一个节点","order":706}}},{"relativePath":"interaction/position/demo/moveAnimate.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/position/demo/moveAnimate.js","order":0,"filename":"moveAnimate.js","title":{"zh":"点击节点带有动画地移动到画布中心","en":"Click to Animately Focus a Node"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*yPb-SKNZ5YYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Click to Focus a Node","order":706},"zh":{"title":"聚焦一个节点","order":706}}},{"relativePath":"interaction/partialResponse/demo/partialNode.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/partialResponse/demo/partialNode.js","order":0,"filename":"partialNode.js","title":{"zh":"响应节点中部分区域","en":"Region Response"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*rszjRrAopBkAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Region Response","order":707},"zh":{"title":"响应区域事件","order":707}}},{"relativePath":"interaction/pagination/demo/dagrePagination.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/pagination/demo/dagrePagination.js","order":1,"filename":"dagrePagination.js","title":{"zh":"dagre 节点分页","en":"Pagination for Dagre Graph"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ztMMS5WPancAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Nodes Paginaion","order":715},"zh":{"title":"节点分页器","order":715}}},{"relativePath":"interaction/pagination/demo/treePagination.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/pagination/demo/treePagination.js","order":0,"filename":"treePagination.js","title":{"zh":"子树节点分页","en":"Pagination for Subtree"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*v7yASaVZDisAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Nodes Paginaion","order":715},"zh":{"title":"节点分页器","order":715}}},{"relativePath":"interaction/label/demo/changeImg.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/label/demo/changeImg.js","order":1,"filename":"changeImg.js","title":{"zh":"切换节点背景图片","en":"Change the Image"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*kwp1S6PJIVUAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Label and Background Updating","order":703},"zh":{"title":"改变标签或背景","order":703}}},{"relativePath":"interaction/label/demo/update.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/label/demo/update.js","order":0,"filename":"update.js","title":{"zh":"更新节点或边上的标签","en":"Update the Label"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*NJm8S4sfgp4AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Label and Background Updating","order":703},"zh":{"title":"改变标签或背景","order":703}}},{"relativePath":"interaction/hull/demo/hull.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/hull/demo/hull.js","order":0,"filename":"hull.js","title":{"zh":"用轮廓包裹节点集合","en":"Use hulls to wrap the node sets."},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*krsJQb6tH-oAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"节点集轮廓包裹","order":705},"en":{"title":"Hull","order":705}}},{"relativePath":"interaction/hull/demo/changeMembers.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/hull/demo/changeMembers.js","order":1,"filename":"changeMembers.js","title":{"zh":"修改包裹内部成员","en":"Interactively change the members in the hull."},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*TNxDRL0t0GsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"节点集轮廓包裹","order":705},"en":{"title":"Hull","order":705}}},{"relativePath":"interaction/highlight/demo/activateRelations.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/highlight/demo/activateRelations.js","order":0,"filename":"activateRelations.js","title":{"zh":"内置的高亮节点","en":"Activate Relations"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*A3iMQo8L_McAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"高亮相邻节点","order":700},"en":{"title":"Highlight Nodes","order":700}}},{"relativePath":"interaction/highlight/demo/highlightDark.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/highlight/demo/highlightDark.js","order":1,"filename":"highlightDark.js","title":{"zh":"自定义高亮","en":"Custom Highlight"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*A3iMQo8L_McAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"高亮相邻节点","order":700},"en":{"title":"Highlight Nodes","order":700}}},{"relativePath":"interaction/fitView/demo/fitView.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/fitView/demo/fitView.js","order":0,"filename":"fitView.js","title":"使用快捷键适配画布","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*FALhS5MhAzAAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Fit View with Shortcuts","order":715},"zh":{"title":"快捷键适应画布","order":715}}},{"relativePath":"interaction/fitView/demo/moveTo.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/fitView/demo/moveTo.js","order":1,"filename":"moveTo.js","title":"使用快捷键移动到左上角","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*7RPkSJpwzrQAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Fit View with Shortcuts","order":715},"zh":{"title":"快捷键适应画布","order":715}}},{"relativePath":"interaction/dragCanvasHideItem/demo/hideItem.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/dragCanvasHideItem/demo/hideItem.js","order":0,"filename":"hideItem.js","title":{"zh":"拖拽画布时隐藏节点 keyShape 外所有图形","en":"Hide the Shapes beside keyShape of Nodes while Dragging"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*hld6SrA4qacAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"拖拽缩放画布时隐藏元素","order":713},"en":{"title":"Hide Items while Dragging and Zooming","order":713}}},{"relativePath":"interaction/customBehavior/demo/dragCanvasTwoFingers.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/customBehavior/demo/dragCanvasTwoFingers.js","order":0,"filename":"dragCanvasTwoFingers.js","title":{"zh":"两指平移画布","en":"Drag Canvas by Two fingers"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*eePLR7boe38AAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"自定义交互","order":710},"en":{"title":"Custom Behavior","order":710}}},{"relativePath":"interaction/createEdge/demo/click-and-key.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/createEdge/demo/click-and-key.js","order":2,"filename":"click-and-key.js","title":"按住 shift 并点击端点","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*B9dxR4x8UmUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Create Edge","order":713},"zh":{"title":"创建边","order":713}}},{"relativePath":"interaction/createEdge/demo/drag.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/createEdge/demo/drag.js","order":1,"filename":"drag.js","title":"从一个节点拖拽到另一个节点","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*B9dxR4x8UmUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Create Edge","order":713},"zh":{"title":"创建边","order":713}}},{"relativePath":"interaction/createEdge/demo/drag-link-point.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/createEdge/demo/drag-link-point.js","order":4,"filename":"drag-link-point.js","title":"从端点上的子图形拖拽","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*WAQ6T4pqCd8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Create Edge","order":713},"zh":{"title":"创建边","order":713}}},{"relativePath":"interaction/createEdge/demo/click-link-point.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/createEdge/demo/click-link-point.js","order":3,"filename":"click-link-point.js","title":"点击端点上的子图形","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*WAQ6T4pqCd8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Create Edge","order":713},"zh":{"title":"创建边","order":713}}},{"relativePath":"interaction/createEdge/demo/click.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/createEdge/demo/click.js","order":0,"filename":"click.js","title":"点击端点","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*B9dxR4x8UmUAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Create Edge","order":713},"zh":{"title":"创建边","order":713}}},{"relativePath":"interaction/combo/demo/cCircle.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/combo/demo/cCircle.js","order":2,"filename":"cCircle.js","title":"扩展圆形 Combo","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1LelSq5TP9EAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Node Combo","order":704},"zh":{"title":"节点分组 Combo","order":704}}},{"relativePath":"interaction/combo/demo/circle.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/combo/demo/circle.js","order":0,"filename":"circle.js","title":"圆形 Combo","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*Rvx9SYSHGsIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Node Combo","order":704},"zh":{"title":"节点分组 Combo","order":704}}},{"relativePath":"interaction/combo/demo/cRect.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/combo/demo/cRect.js","order":3,"filename":"cRect.js","title":"扩展矩形 Combo","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*rQGaT4kiaYoAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Node Combo","order":704},"zh":{"title":"节点分组 Combo","order":704}}},{"relativePath":"interaction/combo/demo/rect.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/interaction/combo/demo/rect.js","order":1,"filename":"rect.js","title":"矩形 Combo","screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*qvmVTZc-iNcAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Node Combo","order":704},"zh":{"title":"节点分组 Combo","order":704}}},{"relativePath":"case/treeDemos/demo/customFlow.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/treeDemos/demo/customFlow.js","order":2,"filename":"customFlow.js","title":{"zh":"自定义流向图","en":"Custom Flow"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1AZTQ4oSPowAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"树图场景案例","order":101},"en":{"title":"Tree Graph Demos","order":101}}},{"relativePath":"case/treeDemos/demo/australiaFire.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/treeDemos/demo/australiaFire.js","order":0,"filename":"australiaFire.js","title":{"zh":"澳大利亚大火","en":"Australia Fire"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*WLzKQpZl5QEAAAAAAAAAAABkARQnAQ","postFrontmatter":{"zh":{"title":"树图场景案例","order":101},"en":{"title":"Tree Graph Demos","order":101}}},{"relativePath":"case/treeDemos/demo/decisionTree.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/treeDemos/demo/decisionTree.js","order":4,"filename":"decisionTree.js","title":{"zh":"决策树","en":"Decision Tree"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*HS5gQ6yCiL4AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"树图场景案例","order":101},"en":{"title":"Tree Graph Demos","order":101}}},{"relativePath":"case/treeDemos/demo/knowledgeTreeGraph.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/treeDemos/demo/knowledgeTreeGraph.js","order":3,"filename":"knowledgeTreeGraph.js","title":{"zh":"知识图谱树","en":"Knowledge Tree Graph"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*2J5YTbvU5FoAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"zh":{"title":"树图场景案例","order":101},"en":{"title":"Tree Graph Demos","order":101}}},{"relativePath":"case/treeDemos/demo/mindmap.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/treeDemos/demo/mindmap.js","order":1,"filename":"mindmap.js","title":{"zh":"思维导图","en":"Mindmap"},"screenshot":"https://gw.alipayobjects.com/zos/antfincdn/N5tGvsqQR9/xiazai%252520%2812%29.png","postFrontmatter":{"zh":{"title":"树图场景案例","order":101},"en":{"title":"Tree Graph Demos","order":101}}},{"relativePath":"case/others/demo/metroLines.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/others/demo/metroLines.js","order":0,"filename":"metroLines.js","title":{"zh":"地铁线路图","en":"Animated Metro Map"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1MS4TbqujQAAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"Others","order":103},"zh":{"title":"其它","order":103}}},{"relativePath":"case/graphDemos/demo/christmasBubbles.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/christmasBubbles.js","order":1,"filename":"christmasBubbles.js","title":{"zh":"圣诞推文可视化","en":"Christmas Bubbles"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*yRU1QZbcQN4AAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"General Graph Demos","order":100},"zh":{"title":"一般图场景案例","order":100}}},{"relativePath":"case/graphDemos/demo/edgeBundling.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/edgeBundling.js","order":2,"filename":"edgeBundling.js","title":{"zh":"美国迁徙图边绑定","en":"Edge Bundling"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*z9iXQq_kcrYAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"General Graph Demos","order":100},"zh":{"title":"一般图场景案例","order":100}}},{"relativePath":"case/graphDemos/demo/donutTransfer.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/donutTransfer.js","order":5,"filename":"donutTransfer.js","title":{"zh":"甜甜圈转账图","en":"Donut Transfer"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*YK6yRIfKQaIAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"General Graph Demos","order":100},"zh":{"title":"一般图场景案例","order":100}}},{"relativePath":"case/graphDemos/demo/largeGraph.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/largeGraph.js","order":0,"filename":"largeGraph.js","title":{"zh":"大规模图下钻式探索","en":"Large Graph Exploration"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*a6N9Q6q44Q0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"General Graph Demos","order":100},"zh":{"title":"一般图场景案例","order":100}}},{"relativePath":"case/graphDemos/demo/decisionBubbles.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/decisionBubbles.js","order":3,"filename":"decisionBubbles.js","title":{"zh":"图表决策","en":"Decision Bubbles"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*wvofQ6DuC0YAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"General Graph Demos","order":100},"zh":{"title":"一般图场景案例","order":100}}},{"relativePath":"case/graphDemos/demo/simplifyCluster.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/simplifyCluster.js","order":4,"filename":"simplifyCluster.js","title":{"zh":"聚类的折叠/扩展","en":"Collapse/Expand Cluster"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*yU5sRLivdLIAAAAAAAAAAABkARQnAQ","postFrontmatter":{"en":{"title":"General Graph Demos","order":100},"zh":{"title":"一般图场景案例","order":100}}},{"relativePath":"algorithm/algoDemos/demo/gaddi.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/algorithm/algoDemos/demo/gaddi.js","order":0,"filename":"gaddi.js","title":{"zh":"图模式匹配","en":"Graph Pattern Matching"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*ucUBSoDw2TwAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Shortest Path","order":1001},"zh":{"title":"算法示例","order":1001}}},{"relativePath":"algorithm/algoDemos/demo/colorSets.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/algorithm/algoDemos/demo/colorSets.js","order":4,"filename":"colorSets.js","title":{"zh":"自动计算色板","en":"Color Sets Compoting"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*hS7MTKlo6LsAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Shortest Path","order":1001},"zh":{"title":"算法示例","order":1001}}},{"relativePath":"algorithm/algoDemos/demo/labelPropagation.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/algorithm/algoDemos/demo/labelPropagation.js","order":2,"filename":"labelPropagation.js","title":{"zh":"LP 自动聚类","en":"Label Propagation Clustering"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*NXkTSbPhEA0AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Shortest Path","order":1001},"zh":{"title":"算法示例","order":1001}}},{"relativePath":"algorithm/algoDemos/demo/louvain.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/algorithm/algoDemos/demo/louvain.js","order":3,"filename":"louvain.js","title":{"zh":"LOUVAIN 自动聚类","en":"LOUVAIN Clustering"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*OVgcSa33xBYAAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Shortest Path","order":1001},"zh":{"title":"算法示例","order":1001}}},{"relativePath":"algorithm/algoDemos/demo/shortestPath.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/algorithm/algoDemos/demo/shortestPath.js","order":1,"filename":"shortestPath.js","title":{"zh":"最短路径","en":"Shortest Path"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*pBV2T6BU6g8AAAAAAAAAAAAAARQnAQ","postFrontmatter":{"en":{"title":"Shortest Path","order":1001},"zh":{"title":"算法示例","order":1001}}}],"exampleSections":{"examples":[{"relativePath":"case/graphDemos/demo/largeGraph.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/largeGraph.js","order":0,"filename":"largeGraph.js","title":{"zh":"大规模图下钻式探索","en":"Large Graph Exploration"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*a6N9Q6q44Q0AAAAAAAAAAAAAARQnAQ","source":"import G6 from '@antv/g6';\nimport insertCss from 'insert-css';\n\n// 实际开发中把 window.AntVUtil 换成从 @antv/util 引入的相关模块\n// replace window.AntVUtil.isObject with\n// import { isNumber, isArray } from '@antv/util';\nconst { isNumber, isArray } = window.AntVUtil;\n\ninsertCss(`\n  .g6-component-contextmenu {\n    position: absolute;\n    z-index: 2;\n    list-style-type: none;\n    background-color: #363b40;\n    border-radius: 6px;\n    font-size: 14px;\n    color: hsla(0,0%,100%,.85);\n    width: fit-content;\n    transition: opacity .2s;\n    text-align: center;\n    padding: 0px 20px 0px 20px;\n\t\tbox-shadow: 0 5px 18px 0 rgba(0, 0, 0, 0.6);\n\t\tborder: 0px;\n  }\n  .g6-component-contextmenu ul {\n\t\tpadding-left: 0px;\n\t\tmargin: 0;\n  }\n  .g6-component-contextmenu li {\n    cursor: pointer;\n    list-style-type: none;\n    list-style: none;\n    margin-left: 0;\n    line-height: 38px;\n  }\n  .g6-component-contextmenu li:hover {\n    color: #aaaaaa;\n\t}\n`);\n\nconst { labelPropagation, louvain, findShortestPath } = G6.Algorithm;\nconst { uniqueId } = G6.Util;\n\nconst NODESIZEMAPPING = 'degree';\nconst SMALLGRAPHLABELMAXLENGTH = 5;\nlet labelMaxLength = SMALLGRAPHLABELMAXLENGTH;\nconst DEFAULTNODESIZE = 20;\nconst DEFAULTAGGREGATEDNODESIZE = 53;\nconst NODE_LIMIT = 40; // TODO: find a proper number for maximum node number on the canvas\n\nlet graph = null;\nlet currentUnproccessedData = { nodes: [], edges: [] };\nlet nodeMap = {};\nlet aggregatedNodeMap = {};\nlet hiddenItemIds = []; // \b隐藏的元素 id 数组\nlet largeGraphMode = true;\nlet cachePositions = {};\nlet manipulatePosition = undefined;\nlet descreteNodeCenter;\nlet layout = {\n  type: '',\n  instance: null,\n  destroyed: true,\n};\nlet expandArray = [];\nlet collapseArray = [];\nlet shiftKeydown = false;\nlet CANVAS_WIDTH = 800,\n  CANVAS_HEIGHT = 800;\n\nconst duration = 2000;\nconst animateOpacity = 0.6;\nconst animateBackOpacity = 0.1;\nconst virtualEdgeOpacity = 0.1;\nconst realEdgeOpacity = 0.2;\n\nconst darkBackColor = 'rgb(43, 47, 51)';\nconst disableColor = '#777';\nconst theme = 'dark';\nconst subjectColors = [\n  '#5F95FF', // blue\n  '#61DDAA',\n  '#65789B',\n  '#F6BD16',\n  '#7262FD',\n  '#78D3F8',\n  '#9661BC',\n  '#F6903D',\n  '#008685',\n  '#F08BB4',\n];\n\nconst colorSets = G6.Util.getColorSetsBySubjectColors(\n  subjectColors,\n  darkBackColor,\n  theme,\n  disableColor,\n);\n\nconst global = {\n  node: {\n    style: {\n      fill: '#2B384E',\n    },\n    labelCfg: {\n      style: {\n        fill: '#acaeaf',\n        stroke: '#191b1c',\n      },\n    },\n    stateStyles: {\n      focus: {\n        fill: '#2B384E',\n      },\n    },\n  },\n  edge: {\n    style: {\n      stroke: '#acaeaf',\n      realEdgeStroke: '#acaeaf', //'#f00',\n      realEdgeOpacity,\n      strokeOpacity: realEdgeOpacity,\n    },\n    labelCfg: {\n      style: {\n        fill: '#acaeaf',\n        realEdgeStroke: '#acaeaf', //'#f00',\n        realEdgeOpacity: 0.5,\n        stroke: '#191b1c',\n      },\n    },\n    stateStyles: {\n      focus: {\n        stroke: '#fff', // '#3C9AE8',\n      },\n    },\n  },\n};\n\n// Custom super node\nG6.registerNode(\n  'aggregated-node',\n  {\n    draw(cfg, group) {\n      let width = 53,\n        height = 27;\n      const style = cfg.style || {};\n      const colorSet = cfg.colorSet || colorSets[0];\n\n      // halo for hover\n      group.addShape('rect', {\n        attrs: {\n          x: -width * 0.55,\n          y: -height * 0.6,\n          width: width * 1.1,\n          height: height * 1.2,\n          fill: colorSet.mainFill,\n          opacity: 0.9,\n          lineWidth: 0,\n          radius: (height / 2 || 13) * 1.2,\n        },\n        name: 'halo-shape',\n        visible: false,\n      });\n\n      // focus stroke for hover\n      group.addShape('rect', {\n        attrs: {\n          x: -width * 0.55,\n          y: -height * 0.6,\n          width: width * 1.1,\n          height: height * 1.2,\n          fill: colorSet.mainFill, // '#3B4043',\n          stroke: '#AAB7C4',\n          lineWidth: 1,\n          lineOpacty: 0.85,\n          radius: (height / 2 || 13) * 1.2,\n        },\n        name: 'stroke-shape',\n        visible: false,\n      });\n\n      const keyShape = group.addShape('rect', {\n        attrs: {\n          ...style,\n          x: -width / 2,\n          y: -height / 2,\n          width,\n          height,\n          fill: colorSet.mainFill, // || '#3B4043',\n          stroke: colorSet.mainStroke,\n          lineWidth: 2,\n          cursor: 'pointer',\n          radius: height / 2 || 13,\n          lineDash: [2, 2],\n        },\n        name: 'aggregated-node-keyShape',\n      });\n\n      let labelStyle = {};\n      if (cfg.labelCfg) {\n        labelStyle = Object.assign(labelStyle, cfg.labelCfg.style);\n      }\n      group.addShape('text', {\n        attrs: {\n          text: `${cfg.count}`,\n          x: 0,\n          y: 0,\n          textAlign: 'center',\n          textBaseline: 'middle',\n          cursor: 'pointer',\n          fontSize: 12,\n          fill: '#fff',\n          opacity: 0.85,\n          fontWeight: 400,\n        },\n        name: 'count-shape',\n        className: 'count-shape',\n        draggable: true,\n      });\n\n      // tag for new node\n      if (cfg.new) {\n        group.addShape('circle', {\n          attrs: {\n            x: width / 2 - 3,\n            y: -height / 2 + 3,\n            r: 4,\n            fill: '#6DD400',\n            lineWidth: 0.5,\n            stroke: '#FFFFFF',\n          },\n          name: 'typeNode-tag-circle',\n        });\n      }\n      return keyShape;\n    },\n    setState: (name, value, item) => {\n      const group = item.get('group');\n      if (name === 'layoutEnd' && value) {\n        const labelShape = group.find((e) => e.get('name') === 'text-shape');\n        if (labelShape) labelShape.set('visible', true);\n      } else if (name === 'hover') {\n        if (item.hasState('focus')) {\n          return;\n        }\n        const halo = group.find((e) => e.get('name') === 'halo-shape');\n        const keyShape = item.getKeyShape();\n        const colorSet = item.getModel().colorSet || colorSets[0];\n        if (value) {\n          halo && halo.show();\n          keyShape.attr('fill', colorSet.activeFill);\n        } else {\n          halo && halo.hide();\n          keyShape.attr('fill', colorSet.mainFill);\n        }\n      } else if (name === 'focus') {\n        const stroke = group.find((e) => e.get('name') === 'stroke-shape');\n        const keyShape = item.getKeyShape();\n        const colorSet = item.getModel().colorSet || colorSets[0];\n        if (value) {\n          stroke && stroke.show();\n          keyShape.attr('fill', colorSet.selectedFill);\n        } else {\n          stroke && stroke.hide();\n          keyShape.attr('fill', colorSet.mainFill);\n        }\n      }\n    },\n    update: undefined,\n  },\n  'single-node',\n);\n\n// Custom real node\nG6.registerNode(\n  'real-node',\n  {\n    draw(cfg, group) {\n      let r = 30;\n      if (isNumber(cfg.size)) {\n        r = cfg.size / 2;\n      } else if (isArray(cfg.size)) {\n        r = cfg.size[0] / 2;\n      }\n      const style = cfg.style || {};\n      const colorSet = cfg.colorSet || colorSets[0];\n\n      // halo for hover\n      group.addShape('circle', {\n        attrs: {\n          x: 0,\n          y: 0,\n          r: r + 5,\n          fill: style.fill || colorSet.mainFill || '#2B384E',\n          opacity: 0.9,\n          lineWidth: 0,\n        },\n        name: 'halo-shape',\n        visible: false,\n      });\n\n      // focus stroke for hover\n      group.addShape('circle', {\n        attrs: {\n          x: 0,\n          y: 0,\n          r: r + 5,\n          fill: style.fill || colorSet.mainFill || '#2B384E',\n          stroke: '#fff',\n          strokeOpacity: 0.85,\n          lineWidth: 1,\n        },\n        name: 'stroke-shape',\n        visible: false,\n      });\n\n      const keyShape = group.addShape('circle', {\n        attrs: {\n          ...style,\n          x: 0,\n          y: 0,\n          r,\n          fill: colorSet.mainFill,\n          stroke: colorSet.mainStroke,\n          lineWidth: 2,\n          cursor: 'pointer',\n        },\n        name: 'aggregated-node-keyShape',\n      });\n\n      let labelStyle = {};\n      if (cfg.labelCfg) {\n        labelStyle = Object.assign(labelStyle, cfg.labelCfg.style);\n      }\n\n      if (cfg.label) {\n        const text = cfg.label;\n        let labelStyle = {};\n        let refY = 0;\n        if (cfg.labelCfg) {\n          labelStyle = Object.assign(labelStyle, cfg.labelCfg.style);\n          refY += cfg.labelCfg.refY || 0;\n        }\n        let offsetY = 0;\n        const fontSize = labelStyle.fontSize < 8 ? 8 : labelStyle.fontSize;\n        const lineNum = cfg.labelLineNum || 1;\n        offsetY = lineNum * (fontSize || 12);\n        group.addShape('text', {\n          attrs: {\n            text,\n            x: 0,\n            y: r + refY + offsetY + 5,\n            textAlign: 'center',\n            textBaseLine: 'alphabetic',\n            cursor: 'pointer',\n            fontSize,\n            fill: '#fff',\n            opacity: 0.85,\n            fontWeight: 400,\n            stroke: global.edge.labelCfg.style.stroke,\n          },\n          name: 'text-shape',\n          className: 'text-shape',\n        });\n      }\n\n      // tag for new node\n      if (cfg.new) {\n        group.addShape('circle', {\n          attrs: {\n            x: r - 3,\n            y: -r + 3,\n            r: 4,\n            fill: '#6DD400',\n            lineWidth: 0.5,\n            stroke: '#FFFFFF',\n          },\n          name: 'typeNode-tag-circle',\n        });\n      }\n\n      return keyShape;\n    },\n    setState: (name, value, item) => {\n      const group = item.get('group');\n      if (name === 'layoutEnd' && value) {\n        const labelShape = group.find((e) => e.get('name') === 'text-shape');\n        if (labelShape) labelShape.set('visible', true);\n      } else if (name === 'hover') {\n        if (item.hasState('focus')) {\n          return;\n        }\n        const halo = group.find((e) => e.get('name') === 'halo-shape');\n        const keyShape = item.getKeyShape();\n        const colorSet = item.getModel().colorSet || colorSets[0];\n        if (value) {\n          halo && halo.show();\n          keyShape.attr('fill', colorSet.activeFill);\n        } else {\n          halo && halo.hide();\n          keyShape.attr('fill', colorSet.mainFill);\n        }\n      } else if (name === 'focus') {\n        const stroke = group.find((e) => e.get('name') === 'stroke-shape');\n        const label = group.find((e) => e.get('name') === 'text-shape');\n        const keyShape = item.getKeyShape();\n        const colorSet = item.getModel().colorSet || colorSets[0];\n        if (value) {\n          stroke && stroke.show();\n          keyShape.attr('fill', colorSet.selectedFill);\n          label && label.attr('fontWeight', 800);\n        } else {\n          stroke && stroke.hide();\n          keyShape.attr('fill', colorSet.mainFill); // '#2B384E'\n          label && label.attr('fontWeight', 400);\n        }\n      }\n    },\n    update: undefined,\n  },\n  'aggregated-node',\n); // 这样可以继承 aggregated-node 的 setState\n\n// Custom the quadratic edge for multiple edges between one node pair\nG6.registerEdge(\n  'custom-quadratic',\n  {\n    setState: (name, value, item) => {\n      const group = item.get('group');\n      const model = item.getModel();\n      if (name === 'focus') {\n        const back = group.find((ele) => ele.get('name') === 'back-line');\n        if (back) {\n          back.stopAnimate();\n          back.remove();\n          back.destroy();\n        }\n        const keyShape = group.find((ele) => ele.get('name') === 'edge-shape');\n        const arrow = model.style.endArrow;\n        if (value) {\n          if (keyShape.cfg.animation) {\n            keyShape.stopAnimate(true);\n          }\n          keyShape.attr({\n            strokeOpacity: animateOpacity,\n            opacity: animateOpacity,\n            stroke: '#fff',\n            endArrow: {\n              ...arrow,\n              stroke: '#fff',\n              fill: '#fff',\n            },\n          });\n          if (model.isReal) {\n            const { lineWidth, path, endArrow, stroke } = keyShape.attr();\n            const back = group.addShape('path', {\n              attrs: {\n                lineWidth,\n                path,\n                stroke,\n                endArrow,\n                opacity: animateBackOpacity,\n              },\n              name: 'back-line',\n            });\n            back.toBack();\n            const length = keyShape.getTotalLength();\n            keyShape.animate(\n              (ratio) => {\n                // the operations in each frame. Ratio ranges from 0 to 1 indicating the prograss of the animation. Returns the modified configurations\n                const startLen = ratio * length;\n                // Calculate the lineDash\n                const cfg = {\n                  lineDash: [startLen, length - startLen],\n                };\n                return cfg;\n              },\n              {\n                repeat: true, // Whether executes the animation repeatly\n                duration, // the duration for executing once\n              },\n            );\n          } else {\n            let index = 0;\n            const lineDash = keyShape.attr('lineDash');\n            const totalLength = lineDash[0] + lineDash[1];\n            keyShape.animate(\n              () => {\n                index++;\n                if (index > totalLength) {\n                  index = 0;\n                }\n                const res = {\n                  lineDash,\n                  lineDashOffset: -index,\n                };\n                // returns the modified configurations here, lineDash and lineDashOffset here\n                return res;\n              },\n              {\n                repeat: true, // whether executes the animation repeatly\n                duration, // the duration for executing once\n              },\n            );\n          }\n        } else {\n          keyShape.stopAnimate();\n          const stroke = '#acaeaf';\n          const opacity = model.isReal ? realEdgeOpacity : virtualEdgeOpacity;\n          keyShape.attr({\n            stroke,\n            strokeOpacity: opacity,\n            opacity,\n            endArrow: {\n              ...arrow,\n              stroke,\n              fill: stroke,\n            },\n          });\n        }\n      }\n    },\n  },\n  'quadratic',\n);\n\n// Custom the line edge for single edge between one node pair\nG6.registerEdge(\n  'custom-line',\n  {\n    setState: (name, value, item) => {\n      const group = item.get('group');\n      const model = item.getModel();\n      if (name === 'focus') {\n        const keyShape = group.find((ele) => ele.get('name') === 'edge-shape');\n        const back = group.find((ele) => ele.get('name') === 'back-line');\n        if (back) {\n          back.stopAnimate();\n          back.remove();\n          back.destroy();\n        }\n        const arrow = model.style.endArrow;\n        if (value) {\n          if (keyShape.cfg.animation) {\n            keyShape.stopAnimate(true);\n          }\n          keyShape.attr({\n            strokeOpacity: animateOpacity,\n            opacity: animateOpacity,\n            stroke: '#fff',\n            endArrow: {\n              ...arrow,\n              stroke: '#fff',\n              fill: '#fff',\n            },\n          });\n          if (model.isReal) {\n            const { path, stroke, lineWidth } = keyShape.attr();\n            const back = group.addShape('path', {\n              attrs: {\n                path,\n                stroke,\n                lineWidth,\n                opacity: animateBackOpacity,\n              },\n              name: 'back-line',\n            });\n            back.toBack();\n            const length = keyShape.getTotalLength();\n            keyShape.animate(\n              (ratio) => {\n                // the operations in each frame. Ratio ranges from 0 to 1 indicating the prograss of the animation. Returns the modified configurations\n                const startLen = ratio * length;\n                // Calculate the lineDash\n                const cfg = {\n                  lineDash: [startLen, length - startLen],\n                };\n                return cfg;\n              },\n              {\n                repeat: true, // Whether executes the animation repeatly\n                duration, // the duration for executing once\n              },\n            );\n          } else {\n            const lineDash = keyShape.attr('lineDash');\n            const totalLength = lineDash[0] + lineDash[1];\n            let index = 0;\n            keyShape.animate(\n              () => {\n                index++;\n                if (index > totalLength) {\n                  index = 0;\n                }\n                const res = {\n                  lineDash,\n                  lineDashOffset: -index,\n                };\n                // returns the modified configurations here, lineDash and lineDashOffset here\n                return res;\n              },\n              {\n                repeat: true, // whether executes the animation repeatly\n                duration, // the duration for executing once\n              },\n            );\n          }\n        } else {\n          keyShape.stopAnimate();\n          const stroke = '#acaeaf';\n          const opacity = model.isReal ? realEdgeOpacity : virtualEdgeOpacity;\n          keyShape.attr({\n            stroke,\n            strokeOpacity: opacity,\n            opacity: opacity,\n            endArrow: {\n              ...arrow,\n              stroke,\n              fill: stroke,\n            },\n          });\n        }\n      }\n    },\n  },\n  'single-edge',\n);\n\nconst descendCompare = (p) => {\n  // 这是比较函数\n  return function (m, n) {\n    const a = m[p];\n    const b = n[p];\n    return b - a; // 降序\n  };\n};\n\nconst clearFocusItemState = (graph) => {\n  if (!graph) return;\n  clearFocusNodeState(graph);\n  clearFocusEdgeState(graph);\n};\n\n// 清除图上所有节点的 focus 状态及相应样式\nconst clearFocusNodeState = (graph) => {\n  const focusNodes = graph.findAllByState('node', 'focus');\n  focusNodes.forEach((fnode) => {\n    graph.setItemState(fnode, 'focus', false); // false\n  });\n};\n\n// 清除图上所有边的 focus 状态及相应样式\nconst clearFocusEdgeState = (graph) => {\n  const focusEdges = graph.findAllByState('edge', 'focus');\n  focusEdges.forEach((fedge) => {\n    graph.setItemState(fedge, 'focus', false);\n  });\n};\n\n// 截断长文本。length 为文本截断后长度，elipsis 是后缀\nconst formatText = (text, length = 5, elipsis = '...') => {\n  if (!text) return '';\n  if (text.length > length) {\n    return `${text.substr(0, length)}${elipsis}`;\n  }\n  return text;\n};\n\nconst labelFormatter = (text, minLength = 10) => {\n  if (text && text.split('').length > minLength) return `${text.substr(0, minLength)}...`;\n  return text;\n};\n\nconst processNodesEdges = (\n  nodes,\n  edges,\n  width,\n  height,\n  largeGraphMode,\n  edgeLabelVisible,\n  isNewGraph = false,\n) => {\n  if (!nodes || nodes.length === 0) return {};\n  const currentNodeMap = {};\n  let maxNodeCount = -Infinity;\n  const paddingRatio = 0.3;\n  const paddingLeft = paddingRatio * width;\n  const paddingTop = paddingRatio * height;\n  nodes.forEach((node) => {\n    node.type = node.level === 0 ? 'real-node' : 'aggregated-node';\n    node.isReal = node.level === 0 ? true : false;\n    node.label = `${node.id}`;\n    node.labelLineNum = undefined;\n    node.oriLabel = node.label;\n    node.label = formatText(node.label, labelMaxLength, '...');\n    node.degree = 0;\n    node.inDegree = 0;\n    node.outDegree = 0;\n    if (currentNodeMap[node.id]) {\n      console.warn('node exists already!', node.id);\n      node.id = `${node.id}${Math.random()}`;\n    }\n    currentNodeMap[node.id] = node;\n    if (node.count > maxNodeCount) maxNodeCount = node.count;\n    const cachePosition = cachePositions ? cachePositions[node.id] : undefined;\n    if (cachePosition) {\n      node.x = cachePosition.x;\n      node.y = cachePosition.y;\n      node.new = false;\n    } else {\n      node.new = isNewGraph ? false : true;\n      if (manipulatePosition && !node.x && !node.y) {\n        node.x = manipulatePosition.x + 30 * Math.cos(Math.random() * Math.PI * 2);\n        node.y = manipulatePosition.y + 30 * Math.sin(Math.random() * Math.PI * 2);\n      }\n    }\n  });\n\n  let maxCount = -Infinity;\n  let minCount = Infinity;\n  // let maxCount = 0;\n  edges.forEach((edge) => {\n    // to avoid the dulplicated id to nodes\n    if (!edge.id) edge.id = `edge-${uniqueId()}`;\n    else if (edge.id.split('-')[0] !== 'edge') edge.id = `edge-${edge.id}`;\n    // TODO: delete the following line after the queried data is correct\n    if (!currentNodeMap[edge.source] || !currentNodeMap[edge.target]) {\n      console.warn('edge source target does not exist', edge.source, edge.target, edge.id);\n      return;\n    }\n    const sourceNode = currentNodeMap[edge.source];\n    const targetNode = currentNodeMap[edge.target];\n\n    if (!sourceNode || !targetNode)\n      console.warn('source or target is not defined!!!', edge, sourceNode, targetNode);\n\n    // calculate the degree\n    sourceNode.degree++;\n    targetNode.degree++;\n    sourceNode.outDegree++;\n    targetNode.inDegree++;\n\n    if (edge.count > maxCount) maxCount = edge.count;\n    if (edge.count < minCount) minCount = edge.count;\n  });\n\n  nodes.sort(descendCompare(NODESIZEMAPPING));\n  const maxDegree = nodes[0].degree || 1;\n\n  const descreteNodes = [];\n  nodes.forEach((node, i) => {\n    // assign the size mapping to the outDegree\n    const countRatio = node.count / maxNodeCount;\n    const isRealNode = node.level === 0;\n    node.size = isRealNode ? DEFAULTNODESIZE : DEFAULTAGGREGATEDNODESIZE;\n    node.isReal = isRealNode;\n    node.labelCfg = {\n      position: 'bottom',\n      offset: 5,\n      style: {\n        fill: global.node.labelCfg.style.fill,\n        fontSize: 6 + countRatio * 6 || 12,\n        stroke: global.node.labelCfg.style.stroke,\n        lineWidth: 3,\n      },\n    };\n\n    if (!node.degree) {\n      descreteNodes.push(node);\n    }\n  });\n\n  const countRange = maxCount - minCount;\n  const minEdgeSize = 1;\n  const maxEdgeSize = 7;\n  const edgeSizeRange = maxEdgeSize - minEdgeSize;\n  edges.forEach((edge) => {\n    // set edges' style\n    const targetNode = currentNodeMap[edge.target];\n\n    const size = ((edge.count - minCount) / countRange) * edgeSizeRange + minEdgeSize || 1;\n    edge.size = size;\n\n    const arrowWidth = Math.max(size / 2 + 2, 3);\n    const arrowLength = 10;\n    const arrowBeging = targetNode.size + arrowLength;\n    let arrowPath = `M ${arrowBeging},0 L ${arrowBeging + arrowLength},-${arrowWidth} L ${\n      arrowBeging + arrowLength\n    },${arrowWidth} Z`;\n    let d = targetNode.size / 2 + arrowLength;\n    if (edge.source === edge.target) {\n      edge.type = 'loop';\n      arrowPath = undefined;\n    }\n    const sourceNode = currentNodeMap[edge.source];\n    const isRealEdge = targetNode.isReal && sourceNode.isReal;\n    edge.isReal = isRealEdge;\n    const stroke = isRealEdge ? global.edge.style.realEdgeStroke : global.edge.style.stroke;\n    const opacity = isRealEdge\n      ? global.edge.style.realEdgeOpacity\n      : global.edge.style.strokeOpacity;\n    const dash = Math.max(size, 2);\n    const lineDash = isRealEdge ? undefined : [dash, dash];\n    edge.style = {\n      stroke,\n      strokeOpacity: opacity,\n      cursor: 'pointer',\n      lineAppendWidth: Math.max(edge.size || 5, 5),\n      fillOpacity: 1,\n      lineDash,\n      endArrow: arrowPath\n        ? {\n            path: arrowPath,\n            d,\n            fill: stroke,\n            strokeOpacity: 0,\n          }\n        : false,\n    };\n    edge.labelCfg = {\n      autoRotate: true,\n      style: {\n        stroke: global.edge.labelCfg.style.stroke,\n        fill: global.edge.labelCfg.style.fill,\n        lineWidth: 4,\n        fontSize: 12,\n        lineAppendWidth: 10,\n        opacity: 1,\n      },\n    };\n    if (!edge.oriLabel) edge.oriLabel = edge.label;\n    if (largeGraphMode || !edgeLabelVisible) edge.label = '';\n    else {\n      edge.label = labelFormatter(edge.label, labelMaxLength);\n    }\n\n    // arrange the other nodes around the hub\n    const sourceDis = sourceNode.size / 2 + 20;\n    const targetDis = targetNode.size / 2 + 20;\n    if (sourceNode.x && !targetNode.x) {\n      targetNode.x = sourceNode.x + sourceDis * Math.cos(Math.random() * Math.PI * 2);\n    }\n    if (sourceNode.y && !targetNode.y) {\n      targetNode.y = sourceNode.y + sourceDis * Math.sin(Math.random() * Math.PI * 2);\n    }\n    if (targetNode.x && !sourceNode.x) {\n      sourceNode.x = targetNode.x + targetDis * Math.cos(Math.random() * Math.PI * 2);\n    }\n    if (targetNode.y && !sourceNode.y) {\n      sourceNode.y = targetNode.y + targetDis * Math.sin(Math.random() * Math.PI * 2);\n    }\n\n    if (!sourceNode.x && !sourceNode.y && manipulatePosition) {\n      sourceNode.x = manipulatePosition.x + 30 * Math.cos(Math.random() * Math.PI * 2);\n      sourceNode.y = manipulatePosition.y + 30 * Math.sin(Math.random() * Math.PI * 2);\n    }\n    if (!targetNode.x && !targetNode.y && manipulatePosition) {\n      targetNode.x = manipulatePosition.x + 30 * Math.cos(Math.random() * Math.PI * 2);\n      targetNode.y = manipulatePosition.y + 30 * Math.sin(Math.random() * Math.PI * 2);\n    }\n  });\n\n  descreteNodeCenter = {\n    x: width - paddingLeft,\n    y: height - paddingTop,\n  };\n  descreteNodes.forEach((node) => {\n    if (!node.x && !node.y) {\n      node.x = descreteNodeCenter.x + 30 * Math.cos(Math.random() * Math.PI * 2);\n      node.y = descreteNodeCenter.y + 30 * Math.sin(Math.random() * Math.PI * 2);\n    }\n  });\n\n  G6.Util.processParallelEdges(edges, 12.5, 'custom-quadratic', 'custom-line');\n  return {\n    maxDegree,\n    edges,\n  };\n};\n\nconst getForceLayoutConfig = (graph, largeGraphMode, configSettings) => {\n  let {\n    linkDistance,\n    edgeStrength,\n    nodeStrength,\n    nodeSpacing,\n    preventOverlap,\n    nodeSize,\n    collideStrength,\n    alpha,\n    alphaDecay,\n    alphaMin,\n  } = configSettings || { preventOverlap: true };\n\n  if (!linkDistance && linkDistance !== 0) linkDistance = 225;\n  if (!edgeStrength && edgeStrength !== 0) edgeStrength = 50;\n  if (!nodeStrength && nodeStrength !== 0) nodeStrength = 200;\n  if (!nodeSpacing && nodeSpacing !== 0) nodeSpacing = 5;\n\n  const config = {\n    type: 'gForce',\n    minMovement: 0.01,\n    maxIteration: 5000,\n    preventOverlap,\n    damping: 0.99,\n    linkDistance: (d) => {\n      let dist = linkDistance;\n      const sourceNode = nodeMap[d.source] || aggregatedNodeMap[d.source];\n      const targetNode = nodeMap[d.target] || aggregatedNodeMap[d.target];\n      // // 两端都是聚合点\n      // if (sourceNode.level && targetNode.level) dist = linkDistance * 3;\n      // // 一端是聚合点，一端是真实节点\n      // else if (sourceNode.level || targetNode.level) dist = linkDistance * 1.5;\n      if (!sourceNode.level && !targetNode.level) dist = linkDistance * 0.3;\n      return dist;\n    },\n    edgeStrength: (d) => {\n      const sourceNode = nodeMap[d.source] || aggregatedNodeMap[d.source];\n      const targetNode = nodeMap[d.target] || aggregatedNodeMap[d.target];\n      // 聚合节点之间的引力小\n      if (sourceNode.level && targetNode.level) return edgeStrength / 2;\n      // 聚合节点与真实节点之间引力大\n      if (sourceNode.level || targetNode.level) return edgeStrength;\n      return edgeStrength;\n    },\n    nodeStrength: (d) => {\n      // 给离散点引力，让它们聚集\n      if (d.degree === 0) return -10;\n      // 聚合点的斥力大\n      if (d.level) return nodeStrength * 2;\n      return nodeStrength;\n    },\n    nodeSize: (d) => {\n      if (!nodeSize && d.size) return d.size;\n      return 50;\n    },\n    nodeSpacing: (d) => {\n      if (d.degree === 0) return nodeSpacing * 2;\n      if (d.level) return nodeSpacing;\n      return nodeSpacing;\n    },\n    onLayoutEnd: () => {\n      if (largeGraphMode) {\n        graph.getEdges().forEach((edge) => {\n          if (!edge.oriLabel) return;\n          edge.update({\n            label: labelFormatter(edge.oriLabel, labelMaxLength),\n          });\n        });\n      }\n    },\n    tick: () => {\n      graph.refreshPositions();\n    },\n  };\n\n  if (nodeSize) config['nodeSize'] = nodeSize;\n  if (collideStrength) config['collideStrength'] = collideStrength;\n  if (alpha) config['alpha'] = alpha;\n  if (alphaDecay) config['alphaDecay'] = alphaDecay;\n  if (alphaMin) config['alphaMin'] = alphaMin;\n\n  return config;\n};\n\nconst hideItems = (graph) => {\n  hiddenItemIds.forEach((id) => {\n    graph.hideItem(id);\n  });\n};\n\nconst showItems = (graph) => {\n  graph.getNodes().forEach((node) => {\n    if (!node.isVisible()) graph.showItem(node);\n  });\n  graph.getEdges().forEach((edge) => {\n    if (!edge.isVisible()) edge.showItem(edge);\n  });\n  hiddenItemIds = [];\n};\n\nconst handleRefreshGraph = (\n  graph,\n  graphData,\n  width,\n  height,\n  largeGraphMode,\n  edgeLabelVisible,\n  isNewGraph,\n) => {\n  if (!graphData || !graph) return;\n  clearFocusItemState(graph);\n  // reset the filtering\n  graph.getNodes().forEach((node) => {\n    if (!node.isVisible()) node.show();\n  });\n  graph.getEdges().forEach((edge) => {\n    if (!edge.isVisible()) edge.show();\n  });\n\n  let nodes = [],\n    edges = [];\n\n  nodes = graphData.nodes;\n  const processRes = processNodesEdges(\n    nodes,\n    graphData.edges || [],\n    width,\n    height,\n    largeGraphMode,\n    edgeLabelVisible,\n    isNewGraph,\n  );\n\n  edges = processRes.edges;\n\n  graph.changeData({ nodes, edges });\n\n  hideItems(graph);\n  graph.getNodes().forEach((node) => {\n    node.toFront();\n  });\n\n  // layout.instance.stop();\n  // force 需要使用不同 id 的对象才能进行全新的布局，否则会使用原来的引用。因此复制一份节点和边作为 force 的布局数据\n  layout.instance.init({\n    nodes: graphData.nodes,\n    edges,\n  });\n\n  layout.instance.minMovement = 0.0001;\n  // layout.instance.getCenter = d => {\n  // \tconst cachePosition = cachePositions[d.id];\n  // \tif (!cachePosition && (d.x || d.y)) return [d.x, d.y, 10];\n  // \telse if (cachePosition) return [cachePosition.x, cachePosition.y, 10];\n  // \treturn [width / 2, height / 2, 10];\n  // }\n  layout.instance.getMass = (d) => {\n    const cachePosition = cachePositions[d.id];\n    if (cachePosition) return 5;\n    return 1;\n  };\n  layout.instance.execute();\n  return { nodes, edges };\n};\n\nconst getMixedGraph = (\n  aggregatedData,\n  originData,\n  nodeMap,\n  aggregatedNodeMap,\n  expandArray,\n  collapseArray,\n) => {\n  let nodes = [],\n    edges = [];\n\n  const expandMap = {},\n    collapseMap = {};\n  expandArray.forEach((expandModel) => {\n    expandMap[expandModel.id] = true;\n  });\n  collapseArray.forEach((collapseModel) => {\n    collapseMap[collapseModel.id] = true;\n  });\n\n  aggregatedData.clusters.forEach((cluster, i) => {\n    if (expandMap[cluster.id]) {\n      nodes = nodes.concat(cluster.nodes);\n      aggregatedNodeMap[cluster.id].expanded = true;\n    } else {\n      nodes.push(aggregatedNodeMap[cluster.id]);\n      aggregatedNodeMap[cluster.id].expanded = false;\n    }\n  });\n  originData.edges.forEach((edge) => {\n    const isSourceInExpandArray = expandMap[nodeMap[edge.source].clusterId];\n    const isTargetInExpandArray = expandMap[nodeMap[edge.target].clusterId];\n    if (isSourceInExpandArray && isTargetInExpandArray) {\n      edges.push(edge);\n    } else if (isSourceInExpandArray) {\n      const targetClusterId = nodeMap[edge.target].clusterId;\n      const vedge = {\n        source: edge.source,\n        target: targetClusterId,\n        id: `edge-${uniqueId()}`,\n        label: '',\n      };\n      edges.push(vedge);\n    } else if (isTargetInExpandArray) {\n      const sourceClusterId = nodeMap[edge.source].clusterId;\n      const vedge = {\n        target: edge.target,\n        source: sourceClusterId,\n        id: `edge-${uniqueId()}`,\n        label: '',\n      };\n      edges.push(vedge);\n    }\n  });\n  aggregatedData.clusterEdges.forEach((edge) => {\n    if (expandMap[edge.source] || expandMap[edge.target]) return;\n    else edges.push(edge);\n  });\n  return { nodes, edges };\n};\n\nconst getNeighborMixedGraph = (\n  centerNodeModel,\n  step,\n  originData,\n  clusteredData,\n  currentData,\n  nodeMap,\n  aggregatedNodeMap,\n  maxNeighborNumPerNode = 5,\n) => {\n  // update the manipulate position for center gravity of the new nodes\n  manipulatePosition = { x: centerNodeModel.x, y: centerNodeModel.y };\n\n  // the neighborSubGraph does not include the centerNodeModel. the elements are all generated new nodes and edges\n  const neighborSubGraph = generateNeighbors(centerNodeModel, step, maxNeighborNumPerNode);\n  // update the origin data\n  originData.nodes = originData.nodes.concat(neighborSubGraph.nodes);\n  originData.edges = originData.edges.concat(neighborSubGraph.edges);\n  // update the origin nodeMap\n  neighborSubGraph.nodes.forEach((node) => {\n    nodeMap[node.id] = node;\n  });\n  // update the clusteredData\n  const clusterId = centerNodeModel.clusterId;\n  clusteredData.clusters.forEach((cluster) => {\n    if (cluster.id !== clusterId) return;\n    cluster.nodes = cluster.nodes.concat(neighborSubGraph.nodes);\n    cluster.sumTot += neighborSubGraph.edges.length;\n  });\n  // update the count\n  aggregatedNodeMap[clusterId].count += neighborSubGraph.nodes.length;\n\n  currentData.nodes = currentData.nodes.concat(neighborSubGraph.nodes);\n  currentData.edges = currentData.edges.concat(neighborSubGraph.edges);\n  return currentData;\n};\n\nconst generateNeighbors = (centerNodeModel, step, maxNeighborNumPerNode = 5) => {\n  if (step <= 0) return undefined;\n  let nodes = [],\n    edges = [];\n  const clusterId = centerNodeModel.clusterId;\n  const centerId = centerNodeModel.id;\n  const neighborNum = Math.ceil(Math.random() * maxNeighborNumPerNode);\n  for (let i = 0; i < neighborNum; i++) {\n    const neighborNode = {\n      id: uniqueId(),\n      clusterId,\n      level: 0,\n      colorSet: centerNodeModel.colorSet,\n    };\n    nodes.push(neighborNode);\n    const dire = Math.random() > 0.5;\n    const source = dire ? centerId : neighborNode.id;\n    const target = dire ? neighborNode.id : centerId;\n    const neighborEdge = {\n      id: uniqueId(),\n      source,\n      target,\n      label: `${source}-${target}`,\n    };\n    edges.push(neighborEdge);\n    const subNeighbors = generateNeighbors(neighborNode, step - 1, maxNeighborNumPerNode);\n    if (subNeighbors) {\n      nodes = nodes.concat(subNeighbors.nodes);\n      edges = edges.concat(subNeighbors.edges);\n    }\n  }\n  return { nodes, edges };\n};\n\nconst getExtractNodeMixedGraph = (\n  extractNodeData,\n  originData,\n  nodeMap,\n  aggregatedNodeMap,\n  currentUnproccessedData,\n) => {\n  const extractNodeId = extractNodeData.id;\n  // const extractNodeClusterId = extractNodeData.clusterId;\n  // push to the current rendering data\n  currentUnproccessedData.nodes.push(extractNodeData);\n  // update the count of aggregatedNodeMap, when to revert?\n  // aggregatedNodeMap[extractNodeClusterId].count --;\n\n  // extract the related edges\n  originData.edges.forEach((edge) => {\n    if (edge.source === extractNodeId) {\n      const targetClusterId = nodeMap[edge.target].clusterId;\n      if (!aggregatedNodeMap[targetClusterId].expanded) {\n        // did not expand, create an virtual edge fromt he extract node to the cluster\n        currentUnproccessedData.edges.push({\n          id: uniqueId(),\n          source: extractNodeId,\n          target: targetClusterId,\n        });\n      } else {\n        // if the cluster is already expanded, push the origin edge\n        currentUnproccessedData.edges.push(edge);\n      }\n    } else if (edge.target === extractNodeId) {\n      const sourceClusterId = nodeMap[edge.source].clusterId;\n      if (!aggregatedNodeMap[sourceClusterId].expanded) {\n        // did not expand, create an virtual edge fromt he extract node to the cluster\n        currentUnproccessedData.edges.push({\n          id: uniqueId(),\n          target: extractNodeId,\n          source: sourceClusterId,\n        });\n      } else {\n        // if the cluster is already expanded, push the origin edge\n        currentUnproccessedData.edges.push(edge);\n      }\n    }\n  });\n  return currentUnproccessedData;\n};\n\nconst examAncestors = (model, expandedArray, length, keepTags) => {\n  for (let i = 0; i < length; i++) {\n    const expandedNode = expandedArray[i];\n    if (!keepTags[i] && model.parentId === expandedNode.id) {\n      keepTags[i] = true; // 需要被保留\n      examAncestors(expandedNode, expandedArray, length, keepTags);\n      break;\n    }\n  }\n};\n\nconst manageExpandCollapseArray = (nodeNumber, model, collapseArray, expandArray) => {\n  manipulatePosition = { x: model.x, y: model.y };\n\n  // 维护 expandArray，若当前画布节点数高于上限，移出 expandedArray 中非 model 祖先的节点)\n  if (nodeNumber > NODE_LIMIT) {\n    // 若 keepTags[i] 为 true，则 expandedArray 的第 i 个节点需要被保留\n    const keepTags = {};\n    const expandLen = expandArray.length;\n    // 检查 X 的所有祖先并标记 keepTags\n    examAncestors(model, expandArray, expandLen, keepTags);\n    // 寻找 expandedArray 中第一个 keepTags 不为 true 的点\n    let shiftNodeIdx = -1;\n    for (let i = 0; i < expandLen; i++) {\n      if (!keepTags[i]) {\n        shiftNodeIdx = i;\n        break;\n      }\n    }\n    // 如果有符合条件的节点，将其从 expandedArray 中移除\n    if (shiftNodeIdx !== -1) {\n      let foundNode = expandArray[shiftNodeIdx];\n      if (foundNode.level === 2) {\n        let foundLevel1 = false;\n        // 找到 expandedArray 中 parentId = foundNode.id 且 level = 1 的第一个节点\n        for (let i = 0; i < expandLen; i++) {\n          const eNode = expandArray[i];\n          if (eNode.parentId === foundNode.id && eNode.level === 1) {\n            foundLevel1 = true;\n            foundNode = eNode;\n            expandArray.splice(i, 1);\n            break;\n          }\n        }\n        // 若未找到，则 foundNode 不变, 直接删去 foundNode\n        if (!foundLevel1) expandArray.splice(shiftNodeIdx, 1);\n      } else {\n        // 直接删去 foundNode\n        expandArray.splice(shiftNodeIdx, 1);\n      }\n      // const removedNode = expandedArray.splice(shiftNodeIdx, 1); // splice returns an array\n      const idSplits = foundNode.id.split('-');\n      let collapseNodeId;\n      // 去掉最后一个后缀\n      for (let i = 0; i < idSplits.length - 1; i++) {\n        const str = idSplits[i];\n        if (collapseNodeId) collapseNodeId = `${collapseNodeId}-${str}`;\n        else collapseNodeId = str;\n      }\n      const collapseNode = {\n        id: collapseNodeId,\n        parentId: foundNode.id,\n        level: foundNode.level - 1,\n      };\n      collapseArray.push(collapseNode);\n    }\n  }\n\n  const currentNode = {\n    id: model.id,\n    level: model.level,\n    parentId: model.parentId,\n  };\n\n  // 加入当前需要展开的节点\n  expandArray.push(currentNode);\n\n  graph.get('canvas').setCursor('default');\n  return { expandArray, collapseArray };\n};\n\nconst cacheNodePositions = (nodes) => {\n  const positionMap = {};\n  const nodeLength = nodes.length;\n  for (let i = 0; i < nodeLength; i++) {\n    const node = nodes[i].getModel();\n    positionMap[node.id] = {\n      x: node.x,\n      y: node.y,\n      level: node.level,\n    };\n  }\n  return positionMap;\n};\n\nconst stopLayout = () => {\n  layout.instance.stop();\n};\n\nconst bindListener = (graph) => {\n  graph.on('keydown', (evt) => {\n    const code = evt.key;\n    if (!code) {\n      return;\n    }\n    if (code.toLowerCase() === 'shift') {\n      shiftKeydown = true;\n    } else {\n      shiftKeydown = false;\n    }\n  });\n  graph.on('keyup', (evt) => {\n    const code = evt.key;\n    if (!code) {\n      return;\n    }\n    if (code.toLowerCase() === 'shift') {\n      shiftKeydown = false;\n    }\n  });\n  graph.on('node:mouseenter', (evt) => {\n    const { item } = evt;\n    const model = item.getModel();\n    const currentLabel = model.label;\n    model.oriFontSize = model.labelCfg.style.fontSize;\n    item.update({\n      label: model.oriLabel,\n    });\n    model.oriLabel = currentLabel;\n    graph.setItemState(item, 'hover', true);\n    item.toFront();\n  });\n\n  graph.on('node:mouseleave', (evt) => {\n    const { item } = evt;\n    const model = item.getModel();\n    const currentLabel = model.label;\n    item.update({\n      label: model.oriLabel,\n    });\n    model.oriLabel = currentLabel;\n    graph.setItemState(item, 'hover', false);\n  });\n\n  graph.on('edge:mouseenter', (evt) => {\n    const { item } = evt;\n    const model = item.getModel();\n    const currentLabel = model.label;\n    item.update({\n      label: model.oriLabel,\n    });\n    model.oriLabel = currentLabel;\n    item.toFront();\n    item.getSource().toFront();\n    item.getTarget().toFront();\n  });\n\n  graph.on('edge:mouseleave', (evt) => {\n    const { item } = evt;\n    const model = item.getModel();\n    const currentLabel = model.label;\n    item.update({\n      label: model.oriLabel,\n    });\n    model.oriLabel = currentLabel;\n  });\n  // click node to show the detail drawer\n  graph.on('node:click', (evt) => {\n    stopLayout();\n    if (!shiftKeydown) clearFocusItemState(graph);\n    else clearFocusEdgeState(graph);\n    const { item } = evt;\n\n    // highlight the clicked node, it is down by click-select\n    graph.setItemState(item, 'focus', true);\n\n    if (!shiftKeydown) {\n      // 将相关边也高亮\n      const relatedEdges = item.getEdges();\n      relatedEdges.forEach((edge) => {\n        graph.setItemState(edge, 'focus', true);\n      });\n    }\n  });\n\n  // click edge to show the detail of integrated edge drawer\n  graph.on('edge:click', (evt) => {\n    stopLayout();\n    if (!shiftKeydown) clearFocusItemState(graph);\n    const { item } = evt;\n    // highlight the clicked edge\n    graph.setItemState(item, 'focus', true);\n  });\n\n  // click canvas to cancel all the focus state\n  graph.on('canvas:click', (evt) => {\n    clearFocusItemState(graph);\n    console.log(graph.getGroup(), graph.getGroup().getBBox(), graph.getGroup().getCanvasBBox());\n  });\n};\n\nfetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/relations.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const container = document.getElementById('container');\n    const descriptionDiv = document.createElement('div');\n    descriptionDiv.innerHTML = `<a href='/en/largegraph' target='_blanck'>Click【HERE】To Full Demo</a>\n      <br/>\n      <a href='/zh/largegraph' target='_blanck'>点击【这里】进入完整 Demo</a>`;\n    descriptionDiv.style.textAlign = 'right';\n    descriptionDiv.style.color = '#fff';\n    descriptionDiv.style.position = 'absolute';\n    descriptionDiv.style.right = '32px';\n    descriptionDiv.style.marginTop = '8px';\n    container.appendChild(descriptionDiv);\n\n    container.style.backgroundColor = '#2b2f33';\n\n    CANVAS_WIDTH = container.scrollWidth;\n    CANVAS_HEIGHT = (container.scrollHeight || 500) - 30;\n\n    nodeMap = {};\n    const clusteredData = louvain(data, false, 'weight');\n    const aggregatedData = { nodes: [], edges: [] };\n    clusteredData.clusters.forEach((cluster, i) => {\n      cluster.nodes.forEach((node) => {\n        node.level = 0;\n        node.label = node.id;\n        node.type = '';\n        node.colorSet = colorSets[i];\n        nodeMap[node.id] = node;\n      });\n      const cnode = {\n        id: cluster.id,\n        type: 'aggregated-node',\n        count: cluster.nodes.length,\n        level: 1,\n        label: cluster.id,\n        colorSet: colorSets[i],\n        idx: i,\n      };\n      aggregatedNodeMap[cluster.id] = cnode;\n      aggregatedData.nodes.push(cnode);\n    });\n    clusteredData.clusterEdges.forEach((clusterEdge) => {\n      const cedge = {\n        ...clusterEdge,\n        size: Math.log(clusterEdge.count),\n        label: '',\n        id: `edge-${uniqueId()}`,\n      };\n      if (cedge.source === cedge.target) {\n        cedge.type = 'loop';\n        cedge.loopCfg = {\n          dist: 20,\n        };\n      } else cedge.type = 'line';\n      aggregatedData.edges.push(cedge);\n    });\n\n    data.edges.forEach((edge) => {\n      edge.label = `${edge.source}-${edge.target}`;\n      edge.id = `edge-${uniqueId()}`;\n    });\n\n    currentUnproccessedData = aggregatedData;\n\n    const { edges: processedEdges } = processNodesEdges(\n      currentUnproccessedData.nodes,\n      currentUnproccessedData.edges,\n      CANVAS_WIDTH,\n      CANVAS_HEIGHT,\n      largeGraphMode,\n      true,\n      true,\n    );\n\n    const contextMenu = new G6.Menu({\n      shouldBegin(evt) {\n        if (evt.target && evt.target.isCanvas && evt.target.isCanvas()) return true;\n        if (evt.item) return true;\n        return false;\n      },\n      getContent(evt) {\n        const { item } = evt;\n        if (evt.target && evt.target.isCanvas && evt.target.isCanvas()) {\n          return `<ul>\n          <li id='show'>Show all Hidden Items</li>\n          <li id='collapseAll'>Collapse all Clusters</li>\n        </ul>`;\n        } else if (!item) return;\n        const itemType = item.getType();\n        const model = item.getModel();\n        if (itemType && model) {\n          if (itemType === 'node') {\n            if (model.level !== 0) {\n              return `<ul>\n              <li id='expand'>Expand the Cluster</li>\n              <li id='hide'>Hide the Node</li>\n            </ul>`;\n            } else {\n              return `<ul>\n              <li id='collapse'>Collapse the Cluster</li>\n              <li id='neighbor-1'>Find 1-degree Neighbors</li>\n              <li id='neighbor-2'>Find 2-degree Neighbors</li>\n              <li id='neighbor-3'>Find 3-degree Neighbors</li>\n              <li id='hide'>Hide the Node</li>\n            </ul>`;\n            }\n          } else {\n            return `<ul>\n            <li id='hide'>Hide the Edge</li>\n          </ul>`;\n          }\n        }\n      },\n      handleMenuClick: (target, item) => {\n        const model = item && item.getModel();\n        const liIdStrs = target.id.split('-');\n        let mixedGraphData;\n        switch (liIdStrs[0]) {\n          case 'hide':\n            graph.hideItem(item);\n            hiddenItemIds.push(model.id);\n            break;\n          case 'expand':\n            const newArray = manageExpandCollapseArray(\n              graph.getNodes().length,\n              model,\n              collapseArray,\n              expandArray,\n            );\n            expandArray = newArray.expandArray;\n            collapseArray = newArray.collapseArray;\n            mixedGraphData = getMixedGraph(\n              clusteredData,\n              data,\n              nodeMap,\n              aggregatedNodeMap,\n              expandArray,\n              collapseArray,\n            );\n            break;\n          case 'collapse':\n            const aggregatedNode = aggregatedNodeMap[model.clusterId];\n            manipulatePosition = { x: aggregatedNode.x, y: aggregatedNode.y };\n            collapseArray.push(aggregatedNode);\n            for (let i = 0; i < expandArray.length; i++) {\n              if (expandArray[i].id === model.clusterId) {\n                expandArray.splice(i, 1);\n                break;\n              }\n            }\n            mixedGraphData = getMixedGraph(\n              clusteredData,\n              data,\n              nodeMap,\n              aggregatedNodeMap,\n              expandArray,\n              collapseArray,\n            );\n            break;\n          case 'collapseAll':\n            expandArray = [];\n            collapseArray = [];\n            mixedGraphData = getMixedGraph(\n              clusteredData,\n              data,\n              nodeMap,\n              aggregatedNodeMap,\n              expandArray,\n              collapseArray,\n            );\n            break;\n          case 'neighbor':\n            const expandNeighborSteps = parseInt(liIdStrs[1]);\n            mixedGraphData = getNeighborMixedGraph(\n              model,\n              expandNeighborSteps,\n              data,\n              clusteredData,\n              currentUnproccessedData,\n              nodeMap,\n              aggregatedNodeMap,\n              10,\n            );\n            break;\n          case 'show':\n            showItems(graph);\n            break;\n          default:\n            break;\n        }\n        if (mixedGraphData) {\n          cachePositions = cacheNodePositions(graph.getNodes());\n          currentUnproccessedData = mixedGraphData;\n          handleRefreshGraph(\n            graph,\n            currentUnproccessedData,\n            CANVAS_WIDTH,\n            CANVAS_HEIGHT,\n            largeGraphMode,\n            true,\n            false,\n          );\n        }\n      },\n      // offsetX and offsetY include the padding of the parent container\n      // 需要加上父级容器的 padding-left 16 与自身偏移量 10\n      offsetX: 16 + 10,\n      // 需要加上父级容器的 padding-top 24 、画布兄弟元素高度、与自身偏移量 10\n      offsetY: 0,\n      // the types of items that allow the menu show up\n      // 在哪些类型的元素上响应\n      itemTypes: ['node', 'edge', 'canvas'],\n    });\n\n    graph = new G6.Graph({\n      container: 'container',\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      linkCenter: true,\n      minZoom: 0.1,\n      groupByTypes: false,\n      modes: {\n        default: [\n          {\n            type: 'drag-canvas',\n            enableOptimize: true,\n          },\n          {\n            type: 'zoom-canvas',\n            enableOptimize: true,\n            optimizeZoom: 0.01,\n          },\n          'drag-node',\n          'shortcuts-call',\n        ],\n        lassoSelect: [\n          {\n            type: 'zoom-canvas',\n            enableOptimize: true,\n            optimizeZoom: 0.01,\n          },\n          {\n            type: 'lasso-select',\n            selectedState: 'focus',\n            trigger: 'drag',\n          },\n        ],\n        fisheyeMode: [],\n      },\n      defaultNode: {\n        type: 'aggregated-node',\n        size: DEFAULTNODESIZE,\n      },\n      plugins: [contextMenu],\n    });\n\n    graph.get('canvas').set('localRefresh', false);\n\n    const layoutConfig = getForceLayoutConfig(graph, largeGraphMode);\n    layoutConfig.center = [CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2];\n    layout.instance = new G6.Layout['gForce'](layoutConfig);\n    layout.instance.init({\n      nodes: currentUnproccessedData.nodes,\n      edges: processedEdges,\n    });\n    layout.instance.execute();\n\n    bindListener(graph);\n    graph.data({ nodes: aggregatedData.nodes, edges: processedEdges });\n    graph.render();\n  });\n\nif (typeof window !== 'undefined')\n  window.onresize = () => {\n    if (!graph || graph.get('destroyed')) return;\n    const container = document.getElementById('container');\n    if (!container) return;\n    graph.changeSize(container.scrollWidth, container.scrollHeight - 30);\n  };\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g6\", \"insert-css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g6\"), require(\"insert-css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.g6, global.insertCss);\n    global.largeGraph = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_g, _insertCss) {\n  \"use strict\";\n\n  _g = _interopRequireDefault(_g);\n  _insertCss = _interopRequireDefault(_insertCss);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  // 实际开发中把 window.AntVUtil 换成从 @antv/util 引入的相关模块\n  // replace window.AntVUtil.isObject with\n  // import { isNumber, isArray } from '@antv/util';\n  var _window$AntVUtil = window.AntVUtil,\n      isNumber = _window$AntVUtil.isNumber,\n      isArray = _window$AntVUtil.isArray;\n  (0, _insertCss.default)(\"\\n  .g6-component-contextmenu {\\n    position: absolute;\\n    z-index: 2;\\n    list-style-type: none;\\n    background-color: #363b40;\\n    border-radius: 6px;\\n    font-size: 14px;\\n    color: hsla(0,0%,100%,.85);\\n    width: fit-content;\\n    transition: opacity .2s;\\n    text-align: center;\\n    padding: 0px 20px 0px 20px;\\n\\t\\tbox-shadow: 0 5px 18px 0 rgba(0, 0, 0, 0.6);\\n\\t\\tborder: 0px;\\n  }\\n  .g6-component-contextmenu ul {\\n\\t\\tpadding-left: 0px;\\n\\t\\tmargin: 0;\\n  }\\n  .g6-component-contextmenu li {\\n    cursor: pointer;\\n    list-style-type: none;\\n    list-style: none;\\n    margin-left: 0;\\n    line-height: 38px;\\n  }\\n  .g6-component-contextmenu li:hover {\\n    color: #aaaaaa;\\n\\t}\\n\");\n  var _G6$Algorithm = _g.default.Algorithm,\n      labelPropagation = _G6$Algorithm.labelPropagation,\n      louvain = _G6$Algorithm.louvain,\n      findShortestPath = _G6$Algorithm.findShortestPath;\n  var uniqueId = _g.default.Util.uniqueId;\n  var NODESIZEMAPPING = 'degree';\n  var SMALLGRAPHLABELMAXLENGTH = 5;\n  var labelMaxLength = SMALLGRAPHLABELMAXLENGTH;\n  var DEFAULTNODESIZE = 20;\n  var DEFAULTAGGREGATEDNODESIZE = 53;\n  var NODE_LIMIT = 40; // TODO: find a proper number for maximum node number on the canvas\n\n  var graph = null;\n  var currentUnproccessedData = {\n    nodes: [],\n    edges: []\n  };\n  var nodeMap = {};\n  var aggregatedNodeMap = {};\n  var hiddenItemIds = []; // \b隐藏的元素 id 数组\n\n  var largeGraphMode = true;\n  var cachePositions = {};\n  var manipulatePosition = undefined;\n  var descreteNodeCenter;\n  var layout = {\n    type: '',\n    instance: null,\n    destroyed: true\n  };\n  var expandArray = [];\n  var collapseArray = [];\n  var shiftKeydown = false;\n  var CANVAS_WIDTH = 800,\n      CANVAS_HEIGHT = 800;\n  var duration = 2000;\n  var animateOpacity = 0.6;\n  var animateBackOpacity = 0.1;\n  var virtualEdgeOpacity = 0.1;\n  var realEdgeOpacity = 0.2;\n  var darkBackColor = 'rgb(43, 47, 51)';\n  var disableColor = '#777';\n  var theme = 'dark';\n  var subjectColors = ['#5F95FF', // blue\n  '#61DDAA', '#65789B', '#F6BD16', '#7262FD', '#78D3F8', '#9661BC', '#F6903D', '#008685', '#F08BB4'];\n\n  var colorSets = _g.default.Util.getColorSetsBySubjectColors(subjectColors, darkBackColor, theme, disableColor);\n\n  var global = {\n    node: {\n      style: {\n        fill: '#2B384E'\n      },\n      labelCfg: {\n        style: {\n          fill: '#acaeaf',\n          stroke: '#191b1c'\n        }\n      },\n      stateStyles: {\n        focus: {\n          fill: '#2B384E'\n        }\n      }\n    },\n    edge: {\n      style: {\n        stroke: '#acaeaf',\n        realEdgeStroke: '#acaeaf',\n        //'#f00',\n        realEdgeOpacity: realEdgeOpacity,\n        strokeOpacity: realEdgeOpacity\n      },\n      labelCfg: {\n        style: {\n          fill: '#acaeaf',\n          realEdgeStroke: '#acaeaf',\n          //'#f00',\n          realEdgeOpacity: 0.5,\n          stroke: '#191b1c'\n        }\n      },\n      stateStyles: {\n        focus: {\n          stroke: '#fff' // '#3C9AE8',\n\n        }\n      }\n    }\n  }; // Custom super node\n\n  _g.default.registerNode('aggregated-node', {\n    draw: function draw(cfg, group) {\n      var width = 53,\n          height = 27;\n      var style = cfg.style || {};\n      var colorSet = cfg.colorSet || colorSets[0]; // halo for hover\n\n      group.addShape('rect', {\n        attrs: {\n          x: -width * 0.55,\n          y: -height * 0.6,\n          width: width * 1.1,\n          height: height * 1.2,\n          fill: colorSet.mainFill,\n          opacity: 0.9,\n          lineWidth: 0,\n          radius: (height / 2 || 13) * 1.2\n        },\n        name: 'halo-shape',\n        visible: false\n      }); // focus stroke for hover\n\n      group.addShape('rect', {\n        attrs: {\n          x: -width * 0.55,\n          y: -height * 0.6,\n          width: width * 1.1,\n          height: height * 1.2,\n          fill: colorSet.mainFill,\n          // '#3B4043',\n          stroke: '#AAB7C4',\n          lineWidth: 1,\n          lineOpacty: 0.85,\n          radius: (height / 2 || 13) * 1.2\n        },\n        name: 'stroke-shape',\n        visible: false\n      });\n      var keyShape = group.addShape('rect', {\n        attrs: { ...style,\n          x: -width / 2,\n          y: -height / 2,\n          width: width,\n          height: height,\n          fill: colorSet.mainFill,\n          // || '#3B4043',\n          stroke: colorSet.mainStroke,\n          lineWidth: 2,\n          cursor: 'pointer',\n          radius: height / 2 || 13,\n          lineDash: [2, 2]\n        },\n        name: 'aggregated-node-keyShape'\n      });\n      var labelStyle = {};\n\n      if (cfg.labelCfg) {\n        labelStyle = Object.assign(labelStyle, cfg.labelCfg.style);\n      }\n\n      group.addShape('text', {\n        attrs: {\n          text: \"\".concat(cfg.count),\n          x: 0,\n          y: 0,\n          textAlign: 'center',\n          textBaseline: 'middle',\n          cursor: 'pointer',\n          fontSize: 12,\n          fill: '#fff',\n          opacity: 0.85,\n          fontWeight: 400\n        },\n        name: 'count-shape',\n        className: 'count-shape',\n        draggable: true\n      }); // tag for new node\n\n      if (cfg.new) {\n        group.addShape('circle', {\n          attrs: {\n            x: width / 2 - 3,\n            y: -height / 2 + 3,\n            r: 4,\n            fill: '#6DD400',\n            lineWidth: 0.5,\n            stroke: '#FFFFFF'\n          },\n          name: 'typeNode-tag-circle'\n        });\n      }\n\n      return keyShape;\n    },\n    setState: function setState(name, value, item) {\n      var group = item.get('group');\n\n      if (name === 'layoutEnd' && value) {\n        var labelShape = group.find(function (e) {\n          return e.get('name') === 'text-shape';\n        });\n        if (labelShape) labelShape.set('visible', true);\n      } else if (name === 'hover') {\n        if (item.hasState('focus')) {\n          return;\n        }\n\n        var halo = group.find(function (e) {\n          return e.get('name') === 'halo-shape';\n        });\n        var keyShape = item.getKeyShape();\n        var colorSet = item.getModel().colorSet || colorSets[0];\n\n        if (value) {\n          halo && halo.show();\n          keyShape.attr('fill', colorSet.activeFill);\n        } else {\n          halo && halo.hide();\n          keyShape.attr('fill', colorSet.mainFill);\n        }\n      } else if (name === 'focus') {\n        var stroke = group.find(function (e) {\n          return e.get('name') === 'stroke-shape';\n        });\n\n        var _keyShape = item.getKeyShape();\n\n        var _colorSet = item.getModel().colorSet || colorSets[0];\n\n        if (value) {\n          stroke && stroke.show();\n\n          _keyShape.attr('fill', _colorSet.selectedFill);\n        } else {\n          stroke && stroke.hide();\n\n          _keyShape.attr('fill', _colorSet.mainFill);\n        }\n      }\n    },\n    update: undefined\n  }, 'single-node'); // Custom real node\n\n\n  _g.default.registerNode('real-node', {\n    draw: function draw(cfg, group) {\n      var r = 30;\n\n      if (isNumber(cfg.size)) {\n        r = cfg.size / 2;\n      } else if (isArray(cfg.size)) {\n        r = cfg.size[0] / 2;\n      }\n\n      var style = cfg.style || {};\n      var colorSet = cfg.colorSet || colorSets[0]; // halo for hover\n\n      group.addShape('circle', {\n        attrs: {\n          x: 0,\n          y: 0,\n          r: r + 5,\n          fill: style.fill || colorSet.mainFill || '#2B384E',\n          opacity: 0.9,\n          lineWidth: 0\n        },\n        name: 'halo-shape',\n        visible: false\n      }); // focus stroke for hover\n\n      group.addShape('circle', {\n        attrs: {\n          x: 0,\n          y: 0,\n          r: r + 5,\n          fill: style.fill || colorSet.mainFill || '#2B384E',\n          stroke: '#fff',\n          strokeOpacity: 0.85,\n          lineWidth: 1\n        },\n        name: 'stroke-shape',\n        visible: false\n      });\n      var keyShape = group.addShape('circle', {\n        attrs: { ...style,\n          x: 0,\n          y: 0,\n          r: r,\n          fill: colorSet.mainFill,\n          stroke: colorSet.mainStroke,\n          lineWidth: 2,\n          cursor: 'pointer'\n        },\n        name: 'aggregated-node-keyShape'\n      });\n      var labelStyle = {};\n\n      if (cfg.labelCfg) {\n        labelStyle = Object.assign(labelStyle, cfg.labelCfg.style);\n      }\n\n      if (cfg.label) {\n        var text = cfg.label;\n        var _labelStyle = {};\n        var refY = 0;\n\n        if (cfg.labelCfg) {\n          _labelStyle = Object.assign(_labelStyle, cfg.labelCfg.style);\n          refY += cfg.labelCfg.refY || 0;\n        }\n\n        var offsetY = 0;\n        var fontSize = _labelStyle.fontSize < 8 ? 8 : _labelStyle.fontSize;\n        var lineNum = cfg.labelLineNum || 1;\n        offsetY = lineNum * (fontSize || 12);\n        group.addShape('text', {\n          attrs: {\n            text: text,\n            x: 0,\n            y: r + refY + offsetY + 5,\n            textAlign: 'center',\n            textBaseLine: 'alphabetic',\n            cursor: 'pointer',\n            fontSize: fontSize,\n            fill: '#fff',\n            opacity: 0.85,\n            fontWeight: 400,\n            stroke: global.edge.labelCfg.style.stroke\n          },\n          name: 'text-shape',\n          className: 'text-shape'\n        });\n      } // tag for new node\n\n\n      if (cfg.new) {\n        group.addShape('circle', {\n          attrs: {\n            x: r - 3,\n            y: -r + 3,\n            r: 4,\n            fill: '#6DD400',\n            lineWidth: 0.5,\n            stroke: '#FFFFFF'\n          },\n          name: 'typeNode-tag-circle'\n        });\n      }\n\n      return keyShape;\n    },\n    setState: function setState(name, value, item) {\n      var group = item.get('group');\n\n      if (name === 'layoutEnd' && value) {\n        var labelShape = group.find(function (e) {\n          return e.get('name') === 'text-shape';\n        });\n        if (labelShape) labelShape.set('visible', true);\n      } else if (name === 'hover') {\n        if (item.hasState('focus')) {\n          return;\n        }\n\n        var halo = group.find(function (e) {\n          return e.get('name') === 'halo-shape';\n        });\n        var keyShape = item.getKeyShape();\n        var colorSet = item.getModel().colorSet || colorSets[0];\n\n        if (value) {\n          halo && halo.show();\n          keyShape.attr('fill', colorSet.activeFill);\n        } else {\n          halo && halo.hide();\n          keyShape.attr('fill', colorSet.mainFill);\n        }\n      } else if (name === 'focus') {\n        var stroke = group.find(function (e) {\n          return e.get('name') === 'stroke-shape';\n        });\n        var label = group.find(function (e) {\n          return e.get('name') === 'text-shape';\n        });\n\n        var _keyShape2 = item.getKeyShape();\n\n        var _colorSet2 = item.getModel().colorSet || colorSets[0];\n\n        if (value) {\n          stroke && stroke.show();\n\n          _keyShape2.attr('fill', _colorSet2.selectedFill);\n\n          label && label.attr('fontWeight', 800);\n        } else {\n          stroke && stroke.hide();\n\n          _keyShape2.attr('fill', _colorSet2.mainFill); // '#2B384E'\n\n\n          label && label.attr('fontWeight', 400);\n        }\n      }\n    },\n    update: undefined\n  }, 'aggregated-node'); // 这样可以继承 aggregated-node 的 setState\n  // Custom the quadratic edge for multiple edges between one node pair\n\n\n  _g.default.registerEdge('custom-quadratic', {\n    setState: function setState(name, value, item) {\n      var group = item.get('group');\n      var model = item.getModel();\n\n      if (name === 'focus') {\n        var back = group.find(function (ele) {\n          return ele.get('name') === 'back-line';\n        });\n\n        if (back) {\n          back.stopAnimate();\n          back.remove();\n          back.destroy();\n        }\n\n        var keyShape = group.find(function (ele) {\n          return ele.get('name') === 'edge-shape';\n        });\n        var arrow = model.style.endArrow;\n\n        if (value) {\n          if (keyShape.cfg.animation) {\n            keyShape.stopAnimate(true);\n          }\n\n          keyShape.attr({\n            strokeOpacity: animateOpacity,\n            opacity: animateOpacity,\n            stroke: '#fff',\n            endArrow: { ...arrow,\n              stroke: '#fff',\n              fill: '#fff'\n            }\n          });\n\n          if (model.isReal) {\n            var _keyShape$attr = keyShape.attr(),\n                lineWidth = _keyShape$attr.lineWidth,\n                path = _keyShape$attr.path,\n                endArrow = _keyShape$attr.endArrow,\n                stroke = _keyShape$attr.stroke;\n\n            var _back = group.addShape('path', {\n              attrs: {\n                lineWidth: lineWidth,\n                path: path,\n                stroke: stroke,\n                endArrow: endArrow,\n                opacity: animateBackOpacity\n              },\n              name: 'back-line'\n            });\n\n            _back.toBack();\n\n            var length = keyShape.getTotalLength();\n            keyShape.animate(function (ratio) {\n              // the operations in each frame. Ratio ranges from 0 to 1 indicating the prograss of the animation. Returns the modified configurations\n              var startLen = ratio * length; // Calculate the lineDash\n\n              var cfg = {\n                lineDash: [startLen, length - startLen]\n              };\n              return cfg;\n            }, {\n              repeat: true,\n              // Whether executes the animation repeatly\n              duration: duration // the duration for executing once\n\n            });\n          } else {\n            var index = 0;\n            var lineDash = keyShape.attr('lineDash');\n            var totalLength = lineDash[0] + lineDash[1];\n            keyShape.animate(function () {\n              index++;\n\n              if (index > totalLength) {\n                index = 0;\n              }\n\n              var res = {\n                lineDash: lineDash,\n                lineDashOffset: -index\n              }; // returns the modified configurations here, lineDash and lineDashOffset here\n\n              return res;\n            }, {\n              repeat: true,\n              // whether executes the animation repeatly\n              duration: duration // the duration for executing once\n\n            });\n          }\n        } else {\n          keyShape.stopAnimate();\n          var _stroke = '#acaeaf';\n          var opacity = model.isReal ? realEdgeOpacity : virtualEdgeOpacity;\n          keyShape.attr({\n            stroke: _stroke,\n            strokeOpacity: opacity,\n            opacity: opacity,\n            endArrow: { ...arrow,\n              stroke: _stroke,\n              fill: _stroke\n            }\n          });\n        }\n      }\n    }\n  }, 'quadratic'); // Custom the line edge for single edge between one node pair\n\n\n  _g.default.registerEdge('custom-line', {\n    setState: function setState(name, value, item) {\n      var group = item.get('group');\n      var model = item.getModel();\n\n      if (name === 'focus') {\n        var keyShape = group.find(function (ele) {\n          return ele.get('name') === 'edge-shape';\n        });\n        var back = group.find(function (ele) {\n          return ele.get('name') === 'back-line';\n        });\n\n        if (back) {\n          back.stopAnimate();\n          back.remove();\n          back.destroy();\n        }\n\n        var arrow = model.style.endArrow;\n\n        if (value) {\n          if (keyShape.cfg.animation) {\n            keyShape.stopAnimate(true);\n          }\n\n          keyShape.attr({\n            strokeOpacity: animateOpacity,\n            opacity: animateOpacity,\n            stroke: '#fff',\n            endArrow: { ...arrow,\n              stroke: '#fff',\n              fill: '#fff'\n            }\n          });\n\n          if (model.isReal) {\n            var _keyShape$attr2 = keyShape.attr(),\n                path = _keyShape$attr2.path,\n                stroke = _keyShape$attr2.stroke,\n                lineWidth = _keyShape$attr2.lineWidth;\n\n            var _back2 = group.addShape('path', {\n              attrs: {\n                path: path,\n                stroke: stroke,\n                lineWidth: lineWidth,\n                opacity: animateBackOpacity\n              },\n              name: 'back-line'\n            });\n\n            _back2.toBack();\n\n            var length = keyShape.getTotalLength();\n            keyShape.animate(function (ratio) {\n              // the operations in each frame. Ratio ranges from 0 to 1 indicating the prograss of the animation. Returns the modified configurations\n              var startLen = ratio * length; // Calculate the lineDash\n\n              var cfg = {\n                lineDash: [startLen, length - startLen]\n              };\n              return cfg;\n            }, {\n              repeat: true,\n              // Whether executes the animation repeatly\n              duration: duration // the duration for executing once\n\n            });\n          } else {\n            var lineDash = keyShape.attr('lineDash');\n            var totalLength = lineDash[0] + lineDash[1];\n            var index = 0;\n            keyShape.animate(function () {\n              index++;\n\n              if (index > totalLength) {\n                index = 0;\n              }\n\n              var res = {\n                lineDash: lineDash,\n                lineDashOffset: -index\n              }; // returns the modified configurations here, lineDash and lineDashOffset here\n\n              return res;\n            }, {\n              repeat: true,\n              // whether executes the animation repeatly\n              duration: duration // the duration for executing once\n\n            });\n          }\n        } else {\n          keyShape.stopAnimate();\n          var _stroke2 = '#acaeaf';\n          var opacity = model.isReal ? realEdgeOpacity : virtualEdgeOpacity;\n          keyShape.attr({\n            stroke: _stroke2,\n            strokeOpacity: opacity,\n            opacity: opacity,\n            endArrow: { ...arrow,\n              stroke: _stroke2,\n              fill: _stroke2\n            }\n          });\n        }\n      }\n    }\n  }, 'single-edge');\n\n  var descendCompare = function descendCompare(p) {\n    // 这是比较函数\n    return function (m, n) {\n      var a = m[p];\n      var b = n[p];\n      return b - a; // 降序\n    };\n  };\n\n  var clearFocusItemState = function clearFocusItemState(graph) {\n    if (!graph) return;\n    clearFocusNodeState(graph);\n    clearFocusEdgeState(graph);\n  }; // 清除图上所有节点的 focus 状态及相应样式\n\n\n  var clearFocusNodeState = function clearFocusNodeState(graph) {\n    var focusNodes = graph.findAllByState('node', 'focus');\n    focusNodes.forEach(function (fnode) {\n      graph.setItemState(fnode, 'focus', false); // false\n    });\n  }; // 清除图上所有边的 focus 状态及相应样式\n\n\n  var clearFocusEdgeState = function clearFocusEdgeState(graph) {\n    var focusEdges = graph.findAllByState('edge', 'focus');\n    focusEdges.forEach(function (fedge) {\n      graph.setItemState(fedge, 'focus', false);\n    });\n  }; // 截断长文本。length 为文本截断后长度，elipsis 是后缀\n\n\n  var formatText = function formatText(text) {\n    var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    var elipsis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '...';\n    if (!text) return '';\n\n    if (text.length > length) {\n      return \"\".concat(text.substr(0, length)).concat(elipsis);\n    }\n\n    return text;\n  };\n\n  var labelFormatter = function labelFormatter(text) {\n    var minLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;\n    if (text && text.split('').length > minLength) return \"\".concat(text.substr(0, minLength), \"...\");\n    return text;\n  };\n\n  var processNodesEdges = function processNodesEdges(nodes, edges, width, height, largeGraphMode, edgeLabelVisible) {\n    var isNewGraph = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    if (!nodes || nodes.length === 0) return {};\n    var currentNodeMap = {};\n    var maxNodeCount = -Infinity;\n    var paddingRatio = 0.3;\n    var paddingLeft = paddingRatio * width;\n    var paddingTop = paddingRatio * height;\n    nodes.forEach(function (node) {\n      node.type = node.level === 0 ? 'real-node' : 'aggregated-node';\n      node.isReal = node.level === 0 ? true : false;\n      node.label = \"\".concat(node.id);\n      node.labelLineNum = undefined;\n      node.oriLabel = node.label;\n      node.label = formatText(node.label, labelMaxLength, '...');\n      node.degree = 0;\n      node.inDegree = 0;\n      node.outDegree = 0;\n\n      if (currentNodeMap[node.id]) {\n        console.warn('node exists already!', node.id);\n        node.id = \"\".concat(node.id).concat(Math.random());\n      }\n\n      currentNodeMap[node.id] = node;\n      if (node.count > maxNodeCount) maxNodeCount = node.count;\n      var cachePosition = cachePositions ? cachePositions[node.id] : undefined;\n\n      if (cachePosition) {\n        node.x = cachePosition.x;\n        node.y = cachePosition.y;\n        node.new = false;\n      } else {\n        node.new = isNewGraph ? false : true;\n\n        if (manipulatePosition && !node.x && !node.y) {\n          node.x = manipulatePosition.x + 30 * Math.cos(Math.random() * Math.PI * 2);\n          node.y = manipulatePosition.y + 30 * Math.sin(Math.random() * Math.PI * 2);\n        }\n      }\n    });\n    var maxCount = -Infinity;\n    var minCount = Infinity; // let maxCount = 0;\n\n    edges.forEach(function (edge) {\n      // to avoid the dulplicated id to nodes\n      if (!edge.id) edge.id = \"edge-\".concat(uniqueId());else if (edge.id.split('-')[0] !== 'edge') edge.id = \"edge-\".concat(edge.id); // TODO: delete the following line after the queried data is correct\n\n      if (!currentNodeMap[edge.source] || !currentNodeMap[edge.target]) {\n        console.warn('edge source target does not exist', edge.source, edge.target, edge.id);\n        return;\n      }\n\n      var sourceNode = currentNodeMap[edge.source];\n      var targetNode = currentNodeMap[edge.target];\n      if (!sourceNode || !targetNode) console.warn('source or target is not defined!!!', edge, sourceNode, targetNode); // calculate the degree\n\n      sourceNode.degree++;\n      targetNode.degree++;\n      sourceNode.outDegree++;\n      targetNode.inDegree++;\n      if (edge.count > maxCount) maxCount = edge.count;\n      if (edge.count < minCount) minCount = edge.count;\n    });\n    nodes.sort(descendCompare(NODESIZEMAPPING));\n    var maxDegree = nodes[0].degree || 1;\n    var descreteNodes = [];\n    nodes.forEach(function (node, i) {\n      // assign the size mapping to the outDegree\n      var countRatio = node.count / maxNodeCount;\n      var isRealNode = node.level === 0;\n      node.size = isRealNode ? DEFAULTNODESIZE : DEFAULTAGGREGATEDNODESIZE;\n      node.isReal = isRealNode;\n      node.labelCfg = {\n        position: 'bottom',\n        offset: 5,\n        style: {\n          fill: global.node.labelCfg.style.fill,\n          fontSize: 6 + countRatio * 6 || 12,\n          stroke: global.node.labelCfg.style.stroke,\n          lineWidth: 3\n        }\n      };\n\n      if (!node.degree) {\n        descreteNodes.push(node);\n      }\n    });\n    var countRange = maxCount - minCount;\n    var minEdgeSize = 1;\n    var maxEdgeSize = 7;\n    var edgeSizeRange = maxEdgeSize - minEdgeSize;\n    edges.forEach(function (edge) {\n      // set edges' style\n      var targetNode = currentNodeMap[edge.target];\n      var size = (edge.count - minCount) / countRange * edgeSizeRange + minEdgeSize || 1;\n      edge.size = size;\n      var arrowWidth = Math.max(size / 2 + 2, 3);\n      var arrowLength = 10;\n      var arrowBeging = targetNode.size + arrowLength;\n      var arrowPath = \"M \".concat(arrowBeging, \",0 L \").concat(arrowBeging + arrowLength, \",-\").concat(arrowWidth, \" L \").concat(arrowBeging + arrowLength, \",\").concat(arrowWidth, \" Z\");\n      var d = targetNode.size / 2 + arrowLength;\n\n      if (edge.source === edge.target) {\n        edge.type = 'loop';\n        arrowPath = undefined;\n      }\n\n      var sourceNode = currentNodeMap[edge.source];\n      var isRealEdge = targetNode.isReal && sourceNode.isReal;\n      edge.isReal = isRealEdge;\n      var stroke = isRealEdge ? global.edge.style.realEdgeStroke : global.edge.style.stroke;\n      var opacity = isRealEdge ? global.edge.style.realEdgeOpacity : global.edge.style.strokeOpacity;\n      var dash = Math.max(size, 2);\n      var lineDash = isRealEdge ? undefined : [dash, dash];\n      edge.style = {\n        stroke: stroke,\n        strokeOpacity: opacity,\n        cursor: 'pointer',\n        lineAppendWidth: Math.max(edge.size || 5, 5),\n        fillOpacity: 1,\n        lineDash: lineDash,\n        endArrow: arrowPath ? {\n          path: arrowPath,\n          d: d,\n          fill: stroke,\n          strokeOpacity: 0\n        } : false\n      };\n      edge.labelCfg = {\n        autoRotate: true,\n        style: {\n          stroke: global.edge.labelCfg.style.stroke,\n          fill: global.edge.labelCfg.style.fill,\n          lineWidth: 4,\n          fontSize: 12,\n          lineAppendWidth: 10,\n          opacity: 1\n        }\n      };\n      if (!edge.oriLabel) edge.oriLabel = edge.label;\n      if (largeGraphMode || !edgeLabelVisible) edge.label = '';else {\n        edge.label = labelFormatter(edge.label, labelMaxLength);\n      } // arrange the other nodes around the hub\n\n      var sourceDis = sourceNode.size / 2 + 20;\n      var targetDis = targetNode.size / 2 + 20;\n\n      if (sourceNode.x && !targetNode.x) {\n        targetNode.x = sourceNode.x + sourceDis * Math.cos(Math.random() * Math.PI * 2);\n      }\n\n      if (sourceNode.y && !targetNode.y) {\n        targetNode.y = sourceNode.y + sourceDis * Math.sin(Math.random() * Math.PI * 2);\n      }\n\n      if (targetNode.x && !sourceNode.x) {\n        sourceNode.x = targetNode.x + targetDis * Math.cos(Math.random() * Math.PI * 2);\n      }\n\n      if (targetNode.y && !sourceNode.y) {\n        sourceNode.y = targetNode.y + targetDis * Math.sin(Math.random() * Math.PI * 2);\n      }\n\n      if (!sourceNode.x && !sourceNode.y && manipulatePosition) {\n        sourceNode.x = manipulatePosition.x + 30 * Math.cos(Math.random() * Math.PI * 2);\n        sourceNode.y = manipulatePosition.y + 30 * Math.sin(Math.random() * Math.PI * 2);\n      }\n\n      if (!targetNode.x && !targetNode.y && manipulatePosition) {\n        targetNode.x = manipulatePosition.x + 30 * Math.cos(Math.random() * Math.PI * 2);\n        targetNode.y = manipulatePosition.y + 30 * Math.sin(Math.random() * Math.PI * 2);\n      }\n    });\n    descreteNodeCenter = {\n      x: width - paddingLeft,\n      y: height - paddingTop\n    };\n    descreteNodes.forEach(function (node) {\n      if (!node.x && !node.y) {\n        node.x = descreteNodeCenter.x + 30 * Math.cos(Math.random() * Math.PI * 2);\n        node.y = descreteNodeCenter.y + 30 * Math.sin(Math.random() * Math.PI * 2);\n      }\n    });\n\n    _g.default.Util.processParallelEdges(edges, 12.5, 'custom-quadratic', 'custom-line');\n\n    return {\n      maxDegree: maxDegree,\n      edges: edges\n    };\n  };\n\n  var getForceLayoutConfig = function getForceLayoutConfig(graph, largeGraphMode, configSettings) {\n    var _ref = configSettings || {\n      preventOverlap: true\n    },\n        _linkDistance = _ref.linkDistance,\n        _edgeStrength = _ref.edgeStrength,\n        _nodeStrength = _ref.nodeStrength,\n        _nodeSpacing = _ref.nodeSpacing,\n        preventOverlap = _ref.preventOverlap,\n        _nodeSize = _ref.nodeSize,\n        collideStrength = _ref.collideStrength,\n        alpha = _ref.alpha,\n        alphaDecay = _ref.alphaDecay,\n        alphaMin = _ref.alphaMin;\n\n    if (!_linkDistance && _linkDistance !== 0) _linkDistance = 225;\n    if (!_edgeStrength && _edgeStrength !== 0) _edgeStrength = 50;\n    if (!_nodeStrength && _nodeStrength !== 0) _nodeStrength = 200;\n    if (!_nodeSpacing && _nodeSpacing !== 0) _nodeSpacing = 5;\n    var config = {\n      type: 'gForce',\n      minMovement: 0.01,\n      maxIteration: 5000,\n      preventOverlap: preventOverlap,\n      damping: 0.99,\n      linkDistance: function linkDistance(d) {\n        var dist = _linkDistance;\n        var sourceNode = nodeMap[d.source] || aggregatedNodeMap[d.source];\n        var targetNode = nodeMap[d.target] || aggregatedNodeMap[d.target]; // // 两端都是聚合点\n        // if (sourceNode.level && targetNode.level) dist = linkDistance * 3;\n        // // 一端是聚合点，一端是真实节点\n        // else if (sourceNode.level || targetNode.level) dist = linkDistance * 1.5;\n\n        if (!sourceNode.level && !targetNode.level) dist = _linkDistance * 0.3;\n        return dist;\n      },\n      edgeStrength: function edgeStrength(d) {\n        var sourceNode = nodeMap[d.source] || aggregatedNodeMap[d.source];\n        var targetNode = nodeMap[d.target] || aggregatedNodeMap[d.target]; // 聚合节点之间的引力小\n\n        if (sourceNode.level && targetNode.level) return _edgeStrength / 2; // 聚合节点与真实节点之间引力大\n\n        if (sourceNode.level || targetNode.level) return _edgeStrength;\n        return _edgeStrength;\n      },\n      nodeStrength: function nodeStrength(d) {\n        // 给离散点引力，让它们聚集\n        if (d.degree === 0) return -10; // 聚合点的斥力大\n\n        if (d.level) return _nodeStrength * 2;\n        return _nodeStrength;\n      },\n      nodeSize: function nodeSize(d) {\n        if (!_nodeSize && d.size) return d.size;\n        return 50;\n      },\n      nodeSpacing: function nodeSpacing(d) {\n        if (d.degree === 0) return _nodeSpacing * 2;\n        if (d.level) return _nodeSpacing;\n        return _nodeSpacing;\n      },\n      onLayoutEnd: function onLayoutEnd() {\n        if (largeGraphMode) {\n          graph.getEdges().forEach(function (edge) {\n            if (!edge.oriLabel) return;\n            edge.update({\n              label: labelFormatter(edge.oriLabel, labelMaxLength)\n            });\n          });\n        }\n      },\n      tick: function tick() {\n        graph.refreshPositions();\n      }\n    };\n    if (_nodeSize) config['nodeSize'] = _nodeSize;\n    if (collideStrength) config['collideStrength'] = collideStrength;\n    if (alpha) config['alpha'] = alpha;\n    if (alphaDecay) config['alphaDecay'] = alphaDecay;\n    if (alphaMin) config['alphaMin'] = alphaMin;\n    return config;\n  };\n\n  var hideItems = function hideItems(graph) {\n    hiddenItemIds.forEach(function (id) {\n      graph.hideItem(id);\n    });\n  };\n\n  var showItems = function showItems(graph) {\n    graph.getNodes().forEach(function (node) {\n      if (!node.isVisible()) graph.showItem(node);\n    });\n    graph.getEdges().forEach(function (edge) {\n      if (!edge.isVisible()) edge.showItem(edge);\n    });\n    hiddenItemIds = [];\n  };\n\n  var handleRefreshGraph = function handleRefreshGraph(graph, graphData, width, height, largeGraphMode, edgeLabelVisible, isNewGraph) {\n    if (!graphData || !graph) return;\n    clearFocusItemState(graph); // reset the filtering\n\n    graph.getNodes().forEach(function (node) {\n      if (!node.isVisible()) node.show();\n    });\n    graph.getEdges().forEach(function (edge) {\n      if (!edge.isVisible()) edge.show();\n    });\n    var nodes = [],\n        edges = [];\n    nodes = graphData.nodes;\n    var processRes = processNodesEdges(nodes, graphData.edges || [], width, height, largeGraphMode, edgeLabelVisible, isNewGraph);\n    edges = processRes.edges;\n    graph.changeData({\n      nodes: nodes,\n      edges: edges\n    });\n    hideItems(graph);\n    graph.getNodes().forEach(function (node) {\n      node.toFront();\n    }); // layout.instance.stop();\n    // force 需要使用不同 id 的对象才能进行全新的布局，否则会使用原来的引用。因此复制一份节点和边作为 force 的布局数据\n\n    layout.instance.init({\n      nodes: graphData.nodes,\n      edges: edges\n    });\n    layout.instance.minMovement = 0.0001; // layout.instance.getCenter = d => {\n    // \tconst cachePosition = cachePositions[d.id];\n    // \tif (!cachePosition && (d.x || d.y)) return [d.x, d.y, 10];\n    // \telse if (cachePosition) return [cachePosition.x, cachePosition.y, 10];\n    // \treturn [width / 2, height / 2, 10];\n    // }\n\n    layout.instance.getMass = function (d) {\n      var cachePosition = cachePositions[d.id];\n      if (cachePosition) return 5;\n      return 1;\n    };\n\n    layout.instance.execute();\n    return {\n      nodes: nodes,\n      edges: edges\n    };\n  };\n\n  var getMixedGraph = function getMixedGraph(aggregatedData, originData, nodeMap, aggregatedNodeMap, expandArray, collapseArray) {\n    var nodes = [],\n        edges = [];\n    var expandMap = {},\n        collapseMap = {};\n    expandArray.forEach(function (expandModel) {\n      expandMap[expandModel.id] = true;\n    });\n    collapseArray.forEach(function (collapseModel) {\n      collapseMap[collapseModel.id] = true;\n    });\n    aggregatedData.clusters.forEach(function (cluster, i) {\n      if (expandMap[cluster.id]) {\n        nodes = nodes.concat(cluster.nodes);\n        aggregatedNodeMap[cluster.id].expanded = true;\n      } else {\n        nodes.push(aggregatedNodeMap[cluster.id]);\n        aggregatedNodeMap[cluster.id].expanded = false;\n      }\n    });\n    originData.edges.forEach(function (edge) {\n      var isSourceInExpandArray = expandMap[nodeMap[edge.source].clusterId];\n      var isTargetInExpandArray = expandMap[nodeMap[edge.target].clusterId];\n\n      if (isSourceInExpandArray && isTargetInExpandArray) {\n        edges.push(edge);\n      } else if (isSourceInExpandArray) {\n        var targetClusterId = nodeMap[edge.target].clusterId;\n        var vedge = {\n          source: edge.source,\n          target: targetClusterId,\n          id: \"edge-\".concat(uniqueId()),\n          label: ''\n        };\n        edges.push(vedge);\n      } else if (isTargetInExpandArray) {\n        var sourceClusterId = nodeMap[edge.source].clusterId;\n        var _vedge = {\n          target: edge.target,\n          source: sourceClusterId,\n          id: \"edge-\".concat(uniqueId()),\n          label: ''\n        };\n        edges.push(_vedge);\n      }\n    });\n    aggregatedData.clusterEdges.forEach(function (edge) {\n      if (expandMap[edge.source] || expandMap[edge.target]) return;else edges.push(edge);\n    });\n    return {\n      nodes: nodes,\n      edges: edges\n    };\n  };\n\n  var getNeighborMixedGraph = function getNeighborMixedGraph(centerNodeModel, step, originData, clusteredData, currentData, nodeMap, aggregatedNodeMap) {\n    var maxNeighborNumPerNode = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 5;\n    // update the manipulate position for center gravity of the new nodes\n    manipulatePosition = {\n      x: centerNodeModel.x,\n      y: centerNodeModel.y\n    }; // the neighborSubGraph does not include the centerNodeModel. the elements are all generated new nodes and edges\n\n    var neighborSubGraph = generateNeighbors(centerNodeModel, step, maxNeighborNumPerNode); // update the origin data\n\n    originData.nodes = originData.nodes.concat(neighborSubGraph.nodes);\n    originData.edges = originData.edges.concat(neighborSubGraph.edges); // update the origin nodeMap\n\n    neighborSubGraph.nodes.forEach(function (node) {\n      nodeMap[node.id] = node;\n    }); // update the clusteredData\n\n    var clusterId = centerNodeModel.clusterId;\n    clusteredData.clusters.forEach(function (cluster) {\n      if (cluster.id !== clusterId) return;\n      cluster.nodes = cluster.nodes.concat(neighborSubGraph.nodes);\n      cluster.sumTot += neighborSubGraph.edges.length;\n    }); // update the count\n\n    aggregatedNodeMap[clusterId].count += neighborSubGraph.nodes.length;\n    currentData.nodes = currentData.nodes.concat(neighborSubGraph.nodes);\n    currentData.edges = currentData.edges.concat(neighborSubGraph.edges);\n    return currentData;\n  };\n\n  var generateNeighbors = function generateNeighbors(centerNodeModel, step) {\n    var maxNeighborNumPerNode = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n    if (step <= 0) return undefined;\n    var nodes = [],\n        edges = [];\n    var clusterId = centerNodeModel.clusterId;\n    var centerId = centerNodeModel.id;\n    var neighborNum = Math.ceil(Math.random() * maxNeighborNumPerNode);\n\n    for (var i = 0; i < neighborNum; i++) {\n      var neighborNode = {\n        id: uniqueId(),\n        clusterId: clusterId,\n        level: 0,\n        colorSet: centerNodeModel.colorSet\n      };\n      nodes.push(neighborNode);\n      var dire = Math.random() > 0.5;\n      var source = dire ? centerId : neighborNode.id;\n      var target = dire ? neighborNode.id : centerId;\n      var neighborEdge = {\n        id: uniqueId(),\n        source: source,\n        target: target,\n        label: \"\".concat(source, \"-\").concat(target)\n      };\n      edges.push(neighborEdge);\n      var subNeighbors = generateNeighbors(neighborNode, step - 1, maxNeighborNumPerNode);\n\n      if (subNeighbors) {\n        nodes = nodes.concat(subNeighbors.nodes);\n        edges = edges.concat(subNeighbors.edges);\n      }\n    }\n\n    return {\n      nodes: nodes,\n      edges: edges\n    };\n  };\n\n  var getExtractNodeMixedGraph = function getExtractNodeMixedGraph(extractNodeData, originData, nodeMap, aggregatedNodeMap, currentUnproccessedData) {\n    var extractNodeId = extractNodeData.id; // const extractNodeClusterId = extractNodeData.clusterId;\n    // push to the current rendering data\n\n    currentUnproccessedData.nodes.push(extractNodeData); // update the count of aggregatedNodeMap, when to revert?\n    // aggregatedNodeMap[extractNodeClusterId].count --;\n    // extract the related edges\n\n    originData.edges.forEach(function (edge) {\n      if (edge.source === extractNodeId) {\n        var targetClusterId = nodeMap[edge.target].clusterId;\n\n        if (!aggregatedNodeMap[targetClusterId].expanded) {\n          // did not expand, create an virtual edge fromt he extract node to the cluster\n          currentUnproccessedData.edges.push({\n            id: uniqueId(),\n            source: extractNodeId,\n            target: targetClusterId\n          });\n        } else {\n          // if the cluster is already expanded, push the origin edge\n          currentUnproccessedData.edges.push(edge);\n        }\n      } else if (edge.target === extractNodeId) {\n        var sourceClusterId = nodeMap[edge.source].clusterId;\n\n        if (!aggregatedNodeMap[sourceClusterId].expanded) {\n          // did not expand, create an virtual edge fromt he extract node to the cluster\n          currentUnproccessedData.edges.push({\n            id: uniqueId(),\n            target: extractNodeId,\n            source: sourceClusterId\n          });\n        } else {\n          // if the cluster is already expanded, push the origin edge\n          currentUnproccessedData.edges.push(edge);\n        }\n      }\n    });\n    return currentUnproccessedData;\n  };\n\n  var examAncestors = function examAncestors(model, expandedArray, length, keepTags) {\n    for (var i = 0; i < length; i++) {\n      var expandedNode = expandedArray[i];\n\n      if (!keepTags[i] && model.parentId === expandedNode.id) {\n        keepTags[i] = true; // 需要被保留\n\n        examAncestors(expandedNode, expandedArray, length, keepTags);\n        break;\n      }\n    }\n  };\n\n  var manageExpandCollapseArray = function manageExpandCollapseArray(nodeNumber, model, collapseArray, expandArray) {\n    manipulatePosition = {\n      x: model.x,\n      y: model.y\n    }; // 维护 expandArray，若当前画布节点数高于上限，移出 expandedArray 中非 model 祖先的节点)\n\n    if (nodeNumber > NODE_LIMIT) {\n      // 若 keepTags[i] 为 true，则 expandedArray 的第 i 个节点需要被保留\n      var keepTags = {};\n      var expandLen = expandArray.length; // 检查 X 的所有祖先并标记 keepTags\n\n      examAncestors(model, expandArray, expandLen, keepTags); // 寻找 expandedArray 中第一个 keepTags 不为 true 的点\n\n      var shiftNodeIdx = -1;\n\n      for (var i = 0; i < expandLen; i++) {\n        if (!keepTags[i]) {\n          shiftNodeIdx = i;\n          break;\n        }\n      } // 如果有符合条件的节点，将其从 expandedArray 中移除\n\n\n      if (shiftNodeIdx !== -1) {\n        var foundNode = expandArray[shiftNodeIdx];\n\n        if (foundNode.level === 2) {\n          var foundLevel1 = false; // 找到 expandedArray 中 parentId = foundNode.id 且 level = 1 的第一个节点\n\n          for (var _i = 0; _i < expandLen; _i++) {\n            var eNode = expandArray[_i];\n\n            if (eNode.parentId === foundNode.id && eNode.level === 1) {\n              foundLevel1 = true;\n              foundNode = eNode;\n              expandArray.splice(_i, 1);\n              break;\n            }\n          } // 若未找到，则 foundNode 不变, 直接删去 foundNode\n\n\n          if (!foundLevel1) expandArray.splice(shiftNodeIdx, 1);\n        } else {\n          // 直接删去 foundNode\n          expandArray.splice(shiftNodeIdx, 1);\n        } // const removedNode = expandedArray.splice(shiftNodeIdx, 1); // splice returns an array\n\n\n        var idSplits = foundNode.id.split('-');\n        var collapseNodeId; // 去掉最后一个后缀\n\n        for (var _i2 = 0; _i2 < idSplits.length - 1; _i2++) {\n          var str = idSplits[_i2];\n          if (collapseNodeId) collapseNodeId = \"\".concat(collapseNodeId, \"-\").concat(str);else collapseNodeId = str;\n        }\n\n        var collapseNode = {\n          id: collapseNodeId,\n          parentId: foundNode.id,\n          level: foundNode.level - 1\n        };\n        collapseArray.push(collapseNode);\n      }\n    }\n\n    var currentNode = {\n      id: model.id,\n      level: model.level,\n      parentId: model.parentId\n    }; // 加入当前需要展开的节点\n\n    expandArray.push(currentNode);\n    graph.get('canvas').setCursor('default');\n    return {\n      expandArray: expandArray,\n      collapseArray: collapseArray\n    };\n  };\n\n  var cacheNodePositions = function cacheNodePositions(nodes) {\n    var positionMap = {};\n    var nodeLength = nodes.length;\n\n    for (var i = 0; i < nodeLength; i++) {\n      var node = nodes[i].getModel();\n      positionMap[node.id] = {\n        x: node.x,\n        y: node.y,\n        level: node.level\n      };\n    }\n\n    return positionMap;\n  };\n\n  var stopLayout = function stopLayout() {\n    layout.instance.stop();\n  };\n\n  var bindListener = function bindListener(graph) {\n    graph.on('keydown', function (evt) {\n      var code = evt.key;\n\n      if (!code) {\n        return;\n      }\n\n      if (code.toLowerCase() === 'shift') {\n        shiftKeydown = true;\n      } else {\n        shiftKeydown = false;\n      }\n    });\n    graph.on('keyup', function (evt) {\n      var code = evt.key;\n\n      if (!code) {\n        return;\n      }\n\n      if (code.toLowerCase() === 'shift') {\n        shiftKeydown = false;\n      }\n    });\n    graph.on('node:mouseenter', function (evt) {\n      var item = evt.item;\n      var model = item.getModel();\n      var currentLabel = model.label;\n      model.oriFontSize = model.labelCfg.style.fontSize;\n      item.update({\n        label: model.oriLabel\n      });\n      model.oriLabel = currentLabel;\n      graph.setItemState(item, 'hover', true);\n      item.toFront();\n    });\n    graph.on('node:mouseleave', function (evt) {\n      var item = evt.item;\n      var model = item.getModel();\n      var currentLabel = model.label;\n      item.update({\n        label: model.oriLabel\n      });\n      model.oriLabel = currentLabel;\n      graph.setItemState(item, 'hover', false);\n    });\n    graph.on('edge:mouseenter', function (evt) {\n      var item = evt.item;\n      var model = item.getModel();\n      var currentLabel = model.label;\n      item.update({\n        label: model.oriLabel\n      });\n      model.oriLabel = currentLabel;\n      item.toFront();\n      item.getSource().toFront();\n      item.getTarget().toFront();\n    });\n    graph.on('edge:mouseleave', function (evt) {\n      var item = evt.item;\n      var model = item.getModel();\n      var currentLabel = model.label;\n      item.update({\n        label: model.oriLabel\n      });\n      model.oriLabel = currentLabel;\n    }); // click node to show the detail drawer\n\n    graph.on('node:click', function (evt) {\n      stopLayout();\n      if (!shiftKeydown) clearFocusItemState(graph);else clearFocusEdgeState(graph);\n      var item = evt.item; // highlight the clicked node, it is down by click-select\n\n      graph.setItemState(item, 'focus', true);\n\n      if (!shiftKeydown) {\n        // 将相关边也高亮\n        var relatedEdges = item.getEdges();\n        relatedEdges.forEach(function (edge) {\n          graph.setItemState(edge, 'focus', true);\n        });\n      }\n    }); // click edge to show the detail of integrated edge drawer\n\n    graph.on('edge:click', function (evt) {\n      stopLayout();\n      if (!shiftKeydown) clearFocusItemState(graph);\n      var item = evt.item; // highlight the clicked edge\n\n      graph.setItemState(item, 'focus', true);\n    }); // click canvas to cancel all the focus state\n\n    graph.on('canvas:click', function (evt) {\n      clearFocusItemState(graph);\n      console.log(graph.getGroup(), graph.getGroup().getBBox(), graph.getGroup().getCanvasBBox());\n    });\n  };\n\n  fetch('https://gw.alipayobjects.com/os/antvdemo/assets/data/relations.json').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    var container = document.getElementById('container');\n    var descriptionDiv = document.createElement('div');\n    descriptionDiv.innerHTML = \"<a href='/en/largegraph' target='_blanck'>Click\\u3010HERE\\u3011To Full Demo</a>\\n      <br/>\\n      <a href='/zh/largegraph' target='_blanck'>\\u70B9\\u51FB\\u3010\\u8FD9\\u91CC\\u3011\\u8FDB\\u5165\\u5B8C\\u6574 Demo</a>\";\n    descriptionDiv.style.textAlign = 'right';\n    descriptionDiv.style.color = '#fff';\n    descriptionDiv.style.position = 'absolute';\n    descriptionDiv.style.right = '32px';\n    descriptionDiv.style.marginTop = '8px';\n    container.appendChild(descriptionDiv);\n    container.style.backgroundColor = '#2b2f33';\n    CANVAS_WIDTH = container.scrollWidth;\n    CANVAS_HEIGHT = (container.scrollHeight || 500) - 30;\n    nodeMap = {};\n    var clusteredData = louvain(data, false, 'weight');\n    var aggregatedData = {\n      nodes: [],\n      edges: []\n    };\n    clusteredData.clusters.forEach(function (cluster, i) {\n      cluster.nodes.forEach(function (node) {\n        node.level = 0;\n        node.label = node.id;\n        node.type = '';\n        node.colorSet = colorSets[i];\n        nodeMap[node.id] = node;\n      });\n      var cnode = {\n        id: cluster.id,\n        type: 'aggregated-node',\n        count: cluster.nodes.length,\n        level: 1,\n        label: cluster.id,\n        colorSet: colorSets[i],\n        idx: i\n      };\n      aggregatedNodeMap[cluster.id] = cnode;\n      aggregatedData.nodes.push(cnode);\n    });\n    clusteredData.clusterEdges.forEach(function (clusterEdge) {\n      var cedge = { ...clusterEdge,\n        size: Math.log(clusterEdge.count),\n        label: '',\n        id: \"edge-\".concat(uniqueId())\n      };\n\n      if (cedge.source === cedge.target) {\n        cedge.type = 'loop';\n        cedge.loopCfg = {\n          dist: 20\n        };\n      } else cedge.type = 'line';\n\n      aggregatedData.edges.push(cedge);\n    });\n    data.edges.forEach(function (edge) {\n      edge.label = \"\".concat(edge.source, \"-\").concat(edge.target);\n      edge.id = \"edge-\".concat(uniqueId());\n    });\n    currentUnproccessedData = aggregatedData;\n\n    var _processNodesEdges = processNodesEdges(currentUnproccessedData.nodes, currentUnproccessedData.edges, CANVAS_WIDTH, CANVAS_HEIGHT, largeGraphMode, true, true),\n        processedEdges = _processNodesEdges.edges;\n\n    var contextMenu = new _g.default.Menu({\n      shouldBegin: function shouldBegin(evt) {\n        if (evt.target && evt.target.isCanvas && evt.target.isCanvas()) return true;\n        if (evt.item) return true;\n        return false;\n      },\n      getContent: function getContent(evt) {\n        var item = evt.item;\n\n        if (evt.target && evt.target.isCanvas && evt.target.isCanvas()) {\n          return \"<ul>\\n          <li id='show'>Show all Hidden Items</li>\\n          <li id='collapseAll'>Collapse all Clusters</li>\\n        </ul>\";\n        } else if (!item) return;\n\n        var itemType = item.getType();\n        var model = item.getModel();\n\n        if (itemType && model) {\n          if (itemType === 'node') {\n            if (model.level !== 0) {\n              return \"<ul>\\n              <li id='expand'>Expand the Cluster</li>\\n              <li id='hide'>Hide the Node</li>\\n            </ul>\";\n            } else {\n              return \"<ul>\\n              <li id='collapse'>Collapse the Cluster</li>\\n              <li id='neighbor-1'>Find 1-degree Neighbors</li>\\n              <li id='neighbor-2'>Find 2-degree Neighbors</li>\\n              <li id='neighbor-3'>Find 3-degree Neighbors</li>\\n              <li id='hide'>Hide the Node</li>\\n            </ul>\";\n            }\n          } else {\n            return \"<ul>\\n            <li id='hide'>Hide the Edge</li>\\n          </ul>\";\n          }\n        }\n      },\n      handleMenuClick: function handleMenuClick(target, item) {\n        var model = item && item.getModel();\n        var liIdStrs = target.id.split('-');\n        var mixedGraphData;\n\n        switch (liIdStrs[0]) {\n          case 'hide':\n            graph.hideItem(item);\n            hiddenItemIds.push(model.id);\n            break;\n\n          case 'expand':\n            var newArray = manageExpandCollapseArray(graph.getNodes().length, model, collapseArray, expandArray);\n            expandArray = newArray.expandArray;\n            collapseArray = newArray.collapseArray;\n            mixedGraphData = getMixedGraph(clusteredData, data, nodeMap, aggregatedNodeMap, expandArray, collapseArray);\n            break;\n\n          case 'collapse':\n            var aggregatedNode = aggregatedNodeMap[model.clusterId];\n            manipulatePosition = {\n              x: aggregatedNode.x,\n              y: aggregatedNode.y\n            };\n            collapseArray.push(aggregatedNode);\n\n            for (var i = 0; i < expandArray.length; i++) {\n              if (expandArray[i].id === model.clusterId) {\n                expandArray.splice(i, 1);\n                break;\n              }\n            }\n\n            mixedGraphData = getMixedGraph(clusteredData, data, nodeMap, aggregatedNodeMap, expandArray, collapseArray);\n            break;\n\n          case 'collapseAll':\n            expandArray = [];\n            collapseArray = [];\n            mixedGraphData = getMixedGraph(clusteredData, data, nodeMap, aggregatedNodeMap, expandArray, collapseArray);\n            break;\n\n          case 'neighbor':\n            var expandNeighborSteps = parseInt(liIdStrs[1]);\n            mixedGraphData = getNeighborMixedGraph(model, expandNeighborSteps, data, clusteredData, currentUnproccessedData, nodeMap, aggregatedNodeMap, 10);\n            break;\n\n          case 'show':\n            showItems(graph);\n            break;\n\n          default:\n            break;\n        }\n\n        if (mixedGraphData) {\n          cachePositions = cacheNodePositions(graph.getNodes());\n          currentUnproccessedData = mixedGraphData;\n          handleRefreshGraph(graph, currentUnproccessedData, CANVAS_WIDTH, CANVAS_HEIGHT, largeGraphMode, true, false);\n        }\n      },\n      // offsetX and offsetY include the padding of the parent container\n      // 需要加上父级容器的 padding-left 16 与自身偏移量 10\n      offsetX: 16 + 10,\n      // 需要加上父级容器的 padding-top 24 、画布兄弟元素高度、与自身偏移量 10\n      offsetY: 0,\n      // the types of items that allow the menu show up\n      // 在哪些类型的元素上响应\n      itemTypes: ['node', 'edge', 'canvas']\n    });\n    graph = new _g.default.Graph({\n      container: 'container',\n      width: CANVAS_WIDTH,\n      height: CANVAS_HEIGHT,\n      linkCenter: true,\n      minZoom: 0.1,\n      groupByTypes: false,\n      modes: {\n        default: [{\n          type: 'drag-canvas',\n          enableOptimize: true\n        }, {\n          type: 'zoom-canvas',\n          enableOptimize: true,\n          optimizeZoom: 0.01\n        }, 'drag-node', 'shortcuts-call'],\n        lassoSelect: [{\n          type: 'zoom-canvas',\n          enableOptimize: true,\n          optimizeZoom: 0.01\n        }, {\n          type: 'lasso-select',\n          selectedState: 'focus',\n          trigger: 'drag'\n        }],\n        fisheyeMode: []\n      },\n      defaultNode: {\n        type: 'aggregated-node',\n        size: DEFAULTNODESIZE\n      },\n      plugins: [contextMenu]\n    });\n    graph.get('canvas').set('localRefresh', false);\n    var layoutConfig = getForceLayoutConfig(graph, largeGraphMode);\n    layoutConfig.center = [CANVAS_WIDTH / 2, CANVAS_HEIGHT / 2];\n    layout.instance = new _g.default.Layout['gForce'](layoutConfig);\n    layout.instance.init({\n      nodes: currentUnproccessedData.nodes,\n      edges: processedEdges\n    });\n    layout.instance.execute();\n    bindListener(graph);\n    graph.data({\n      nodes: aggregatedData.nodes,\n      edges: processedEdges\n    });\n    graph.render();\n  });\n  if (typeof window !== 'undefined') window.onresize = function () {\n    if (!graph || graph.get('destroyed')) return;\n    var container = document.getElementById('container');\n    if (!container) return;\n    graph.changeSize(container.scrollWidth, container.scrollHeight - 30);\n  };\n});"},{"relativePath":"case/graphDemos/demo/christmasBubbles.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/christmasBubbles.js","order":1,"filename":"christmasBubbles.js","title":{"zh":"圣诞推文可视化","en":"Christmas Bubbles"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*yRU1QZbcQN4AAAAAAAAAAABkARQnAQ","source":"import G6 from '@antv/g6';\n\n// 实际开发中把 window.AntVUtil 换成从 @antv/util 引入的相关模块\n// replace window.AntVUtil.isObject with\n// import { mix } from '@antv/util';\nconst { mix } = window.AntVUtil;\n\nlet showNodes = [];\nlet showEdges = [];\nlet curShowNodes = [];\nlet curShowEdges = [];\nlet nodes = [];\nlet edges = [];\nlet nodeMap = new Map();\nlet edgesMap = new Map();\nlet curShowNodesMap = new Map();\nlet highlighting = false;\nlet currentFocus;\nconst width = document.getElementById('container').scrollWidth;\nconst height = document.getElementById('container').scrollHeight || 500;\n\nconst LIMIT_OVERFLOW_WIDTH = width;\nconst LIMIT_OVERFLOW_HEIGHT = height;\n\nconst mapNodeSizeAndFontSize = (nodes, propertyName, visualRange) => {\n  let minp = 9999999999;\n  let maxp = -9999999999;\n  nodes.forEach((node) => {\n    const propertyValue = node[propertyName] > 5000 ? 5000 : node[propertyName];\n    minp = propertyValue < minp ? propertyValue : minp;\n    maxp = propertyValue > maxp ? propertyValue : maxp;\n  });\n  const rangepLength = maxp - minp;\n  const rangevLength = visualRange[1] - visualRange[0];\n  nodes.forEach((node) => {\n    const propertyValue = node[propertyName] > 5000 ? 5000 : node[propertyName];\n    node.size = ((propertyValue - minp) / rangepLength) * rangevLength + visualRange[0];\n    if (node.labelCfg && node.labelCfg.style) {\n      const textLength = node.label.length;\n      let fontSize = (1.3 * node.size) / textLength;\n      if (fontSize < 11) fontSize = 11;\n      node.labelCfg.style.fontSize = fontSize;\n    }\n  });\n};\n\nconst Colors = { noun: '#588c73', adj: '#f2e394', v: '#d96459', adv: '#f2ae72' };\n\nlet graph;\nconst layoutCfg = {\n  type: 'force',\n  nodeSize: (d) => {\n    return d.size / 2 + 5;\n  },\n  nodeStrength: 2500,\n  collideStrength: 0.8,\n  alphaDecay: 0.01,\n  preventOverlap: true,\n  onTick: () => {\n    const nodeItems = graph.getNodes();\n    const height = graph.get('height');\n    const width = graph.get('width');\n    const padding = 10;\n    nodeItems.forEach((item) => {\n      const model = item.getModel();\n      if (model.x > width - padding) model.x = width - padding;\n      else if (model.x < padding) model.x = padding;\n\n      if (model.y > height - padding) model.y = height - padding;\n      else if (model.y < padding) model.y = padding;\n    });\n  },\n};\n\n// G6.registerBehavior('double-finger-drag-canvas', {\n//   getEvents: function getEvents() {\n//     return {\n//       wheel: 'onWheel'\n//     };\n//   },\n\n//   onWheel: ev => {\n//     if (ev.ctrlKey) {\n//       const canvas = graph.get('canvas');\n//       const point = canvas.getPointByClient(ev.clientX, ev.clientY);\n//       let ratio = graph.getZoom();\n//       if (ev.wheelDelta > 0) {\n//         ratio = ratio + ratio * 0.05;\n//       } else {\n//         ratio = ratio - ratio * 0.05;\n//       }\n//       graph.zoomTo(ratio, {\n//         x: point.x,\n//         y: point.y\n//       });\n//     } else {\n//       const x = ev.deltaX || ev.movementX;\n//       const y = ev.deltaY || ev.movementY;\n//       translate(x, y);\n//     }\n//     ev.preventDefault();\n//   }\n// });\n\nG6.registerNode(\n  'bubble',\n  {\n    drawShape(cfg, group) {\n      const self = this;\n      const r = cfg.size / 2;\n      // a circle by path\n      const path = [\n        ['M', -r, 0],\n        ['C', -r, r / 2, -r / 2, r, 0, r],\n        ['C', r / 2, r, r, r / 2, r, 0],\n        ['C', r, -r / 2, r / 2, -r, 0, -r],\n        ['C', -r / 2, -r, -r, -r / 2, -r, 0],\n        ['Z'],\n      ];\n      const keyShape = group.addShape('path', {\n        attrs: {\n          x: 0,\n          y: 0,\n          path,\n          fill: cfg.color || 'steelblue',\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any value you want\n        name: 'path-shape',\n      });\n\n      const mask = group.addShape('path', {\n        attrs: {\n          x: 0,\n          y: 0,\n          path,\n          opacity: 0.25,\n          fill: cfg.color || 'steelblue',\n          shadowColor: cfg.color, // cfg.color.split(' ')[2].substr(2),\n          shadowBlur: 40,\n          shadowOffsetX: 0,\n          shadowOffsetY: 30,\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any value you want\n        name: 'mask-shape',\n      });\n\n      const spNum = 10; // split points number\n      const directions = [],\n        rs = [];\n      self.changeDirections(spNum, directions);\n      for (let i = 0; i < spNum; i++) {\n        const rr = r + directions[i] * ((Math.random() * r) / 1000); // +-r/6, the sign according to the directions\n        if (rs[i] < 0.97 * r) rs[i] = 0.97 * r;\n        else if (rs[i] > 1.03 * r) rs[i] = 1.03 * r;\n        rs.push(rr);\n      }\n      keyShape.animate(\n        () => {\n          const path = self.getBubblePath(r, spNum, directions, rs);\n          return { path };\n        },\n        {\n          repeat: true,\n          duration: 1000,\n        },\n      );\n\n      const directions2 = [],\n        rs2 = [];\n      self.changeDirections(spNum, directions2);\n      for (let i = 0; i < spNum; i++) {\n        const rr = r + directions2[i] * ((Math.random() * r) / 1000); // +-r/6, the sign according to the directions\n        if (rs2[i] < 0.97 * r) rs2[i] = 0.97 * r;\n        else if (rs2[i] > 1.03 * r) rs2[i] = 1.03 * r;\n        rs2.push(rr);\n      }\n      mask.animate(\n        () => {\n          const path = self.getBubblePath(r, spNum, directions2, rs2);\n          return { path };\n        },\n        {\n          repeat: true,\n          duration: 1000,\n        },\n      );\n      return keyShape;\n    },\n    changeDirections(num, directions) {\n      for (let i = 0; i < num; i++) {\n        if (!directions[i]) {\n          const rand = Math.random();\n          const dire = rand > 0.5 ? 1 : -1;\n          directions.push(dire);\n        } else {\n          directions[i] = -1 * directions[i];\n        }\n      }\n      return directions;\n    },\n    getBubblePath(r, spNum, directions, rs) {\n      const path = [];\n      const cpNum = spNum * 2; // control points number\n      const unitAngle = (Math.PI * 2) / spNum; // base angle for split points\n      let angleSum = 0;\n      const sps = [];\n      const cps = [];\n      for (let i = 0; i < spNum; i++) {\n        const speed = 0.001 * Math.random();\n        rs[i] = rs[i] + directions[i] * speed * r; // +-r/6, the sign according to the directions\n        if (rs[i] < 0.97 * r) {\n          rs[i] = 0.97 * r;\n          directions[i] = -1 * directions[i];\n        } else if (rs[i] > 1.03 * r) {\n          rs[i] = 1.03 * r;\n          directions[i] = -1 * directions[i];\n        }\n        const spX = rs[i] * Math.cos(angleSum);\n        const spY = rs[i] * Math.sin(angleSum);\n        sps.push({ x: spX, y: spY });\n        for (let j = 0; j < 2; j++) {\n          const cpAngleRand = unitAngle / 3;\n          const cpR = rs[i] / Math.cos(cpAngleRand);\n          const sign = j === 0 ? -1 : 1;\n          const x = cpR * Math.cos(angleSum + sign * cpAngleRand);\n          const y = cpR * Math.sin(angleSum + sign * cpAngleRand);\n          cps.push({ x, y });\n        }\n        angleSum += unitAngle;\n      }\n      path.push(['M', sps[0].x, sps[0].y]);\n      for (let i = 1; i < spNum; i++) {\n        path.push([\n          'C',\n          cps[2 * i - 1].x,\n          cps[2 * i - 1].y,\n          cps[2 * i].x,\n          cps[2 * i].y,\n          sps[i].x,\n          sps[i].y,\n        ]);\n      }\n      path.push(['C', cps[cpNum - 1].x, cps[cpNum - 1].y, cps[0].x, cps[0].y, sps[0].x, sps[0].y]);\n      path.push(['Z']);\n      return path;\n    },\n  },\n  'single-node',\n);\n\nG6.registerNode(\n  'animate-circle',\n  {\n    setState(name, value, item) {\n      const shape = item.get('keyShape');\n      const label = shape.get('parent').get('children')[1];\n      if (name === 'disappearing' && value) {\n        shape.animate(\n          (ratio) => {\n            return {\n              opacity: 1 - ratio,\n              r: shape.attr('r') * (1 - ratio),\n            };\n          },\n          {\n            duration: 200,\n          },\n        );\n        label.animate(\n          (ratio) => {\n            return {\n              opacity: 1 - ratio,\n            };\n          },\n          {\n            duration: 500,\n          },\n        );\n      } else if (name === 'appearing' && value) {\n        const r = item.getModel().size / 2;\n        shape.animate(\n          (ratio) => {\n            return {\n              opacity: ratio,\n              r: r * ratio,\n              fill: shape.attr('fill'),\n            };\n          },\n          {\n            duration: 300,\n          },\n        );\n        label.animate(\n          (ratio) => {\n            return {\n              opacity: ratio,\n            };\n          },\n          {\n            duration: 500,\n          },\n        );\n      }\n    },\n  },\n  'circle',\n);\n\nG6.registerEdge(\n  'animate-line',\n  {\n    drawShape(cfg, group) {\n      const self = this;\n      let shapeStyle = self.getShapeStyle(cfg);\n      shapeStyle = mix(shapeStyle, {\n        opacity: 0,\n        strokeOpacity: 0,\n      });\n      const keyShape = group.addShape('path', {\n        attrs: shapeStyle,\n        // must be assigned in G6 3.3 and later versions. it can be any value you want\n        name: 'path-shape',\n      });\n      return keyShape;\n    },\n    afterDraw(cfg, group) {\n      const shape = group.get('children')[0];\n      shape.animate(\n        (ratio) => {\n          const opacity = ratio * cfg.style.opacity;\n          const strokeOpacity = ratio * cfg.style.strokeOpacity;\n          return {\n            opacity: ratio || opacity,\n            strokeOpacity: ratio || strokeOpacity,\n          };\n        },\n        {\n          duration: 300,\n        },\n      );\n    },\n    setState(name, value, item) {\n      const shape = item.get('keyShape');\n      if (name === 'disappearing' && value) {\n        shape.animate(\n          (ratio) => {\n            return {\n              opacity: 1 - ratio,\n              strokeOpacity: 1 - ratio,\n            };\n          },\n          {\n            duration: 200,\n          },\n        );\n      }\n    },\n  },\n  'line',\n);\n\ngraph = new G6.Graph({\n  container: 'container',\n  width,\n  height,\n  linkCenter: true,\n  layout: layoutCfg,\n  modes: {\n    default: ['drag-canvas'],\n  },\n  defaultNode: {\n    type: 'bubble',\n    size: 30,\n    labelCfg: {\n      position: 'center',\n      style: {\n        fill: 'white',\n        fontStyle: 'bold',\n      },\n    },\n  },\n  defaultEdge: {\n    color: '#888',\n    type: 'animate-line',\n  },\n});\n\nfunction translate(x, y) {\n  let moveX = x;\n  let moveY = y;\n\n  /* 获得当前偏移量*/\n  const group = graph.get('group');\n  const bbox = group.getBBox();\n  const leftTopPoint = graph.getCanvasByPoint(bbox.minX, bbox.minY);\n  const rightBottomPoint = graph.getCanvasByPoint(bbox.maxX, bbox.maxY);\n  /* 如果 x 轴在区域内，不允许左右超过100 */\n  if (x < 0 && leftTopPoint.x - x > LIMIT_OVERFLOW_WIDTH) {\n    moveX = 0;\n  }\n  if (x > 0 && rightBottomPoint.x - x < width - LIMIT_OVERFLOW_WIDTH) {\n    moveX = 0;\n  }\n\n  if (y < 0 && leftTopPoint.y - y > LIMIT_OVERFLOW_HEIGHT) {\n    moveY = 0;\n  }\n  if (y > 0 && rightBottomPoint.y - y < height - LIMIT_OVERFLOW_HEIGHT) {\n    moveY = 0;\n  }\n  graph.translate(-moveX, -moveY);\n}\n\nfunction refreshDragedNodePosition(e) {\n  const model = e.item.get('model');\n  model.fx = e.x;\n  model.fy = e.y;\n}\ngraph.on('node:dragstart', (e) => {\n  graph.layout();\n  refreshDragedNodePosition(e);\n});\ngraph.on('node:drag', (e) => {\n  refreshDragedNodePosition(e);\n});\ngraph.on('node:dragend', (e) => {\n  e.item.get('model').fx = null;\n  e.item.get('model').fy = null;\n});\n\nconst loadData = (data) => {\n  const layoutController = graph.get('layoutController');\n  layoutController.layoutCfg.nodeStrength = 30;\n  layoutController.layoutCfg.collideStrength = 0.8;\n  layoutController.layoutCfg.alphaDecay = 0.01;\n  nodes = data.nodes;\n  edges = data.edges;\n\n  showNodes = [];\n  showEdges = [];\n  nodeMap = new Map();\n  edgesMap = new Map();\n  // find the roots\n  nodes.forEach((node) => {\n    if (!node.neighbor) {\n      node.label = node.text;\n      node.color = Colors[node.type];\n      node.style = {\n        fill: Colors[node.type],\n        lineWidth: 0,\n      };\n      let labelColor = '#fff';\n      if (node.type === 'adj') {\n        labelColor = Colors.noun;\n      }\n      node.labelCfg = {\n        style: {\n          fontSize: 15,\n          fill: labelColor,\n          fontWeight: 300,\n        },\n      };\n      node.x = Math.random() * 800;\n      node.y = Math.random() * 800;\n      showNodes.push(node);\n    }\n    nodeMap.set(node.id, node);\n  });\n\n  mapNodeSizeAndFontSize(showNodes, 'count', [40, 120]);\n  showNodes.forEach((snode) => {\n    if (snode.size < 80) {\n      snode.type = 'circle';\n    }\n  });\n\n  edges.forEach((edge) => {\n    // map the id\n    edge.id = `${edge.source}-${edge.target}`;\n    edge.style = {\n      lineWidth: 0.5,\n      opacity: 1,\n      strokeOpacity: 1,\n    };\n    edgesMap.set(edge.id, edge);\n  });\n  graph.data({\n    nodes: showNodes,\n    edges: showEdges,\n  });\n  graph.render();\n};\n\nfetch('https://gw.alipayobjects.com/os/basement_prod/0a749386-8593-44a2-a132-81dfa1fc3158.json')\n  .then((res) => res.json())\n  .then((data) => {\n    loadData(data);\n  });\n\n// click root to expand\ngraph.on('node:click', (e) => {\n  curShowNodes = [];\n  curShowEdges = [];\n  const item = e.item;\n  const model = item.getModel();\n  if (model.neighbor) {\n    return;\n  }\n  // if clicked a root, hide unrelated items and show the related items\n  if (!model.neighbor) {\n    const layoutController = graph.get('layoutController');\n    const forceLayout = layoutController.layoutMethods[0];\n    forceLayout.forceSimulation.stop();\n    // light the level 0 nodes\n    showNodes.forEach((snode) => {\n      if (snode.x < 0.5 * width) {\n        snode.x = 300;\n      } else {\n        snode.x = width - 300;\n      }\n    });\n    model.x = width / 2;\n    model.y = height / 2;\n    // animatively hide the items which are going to disappear\n    if (curShowEdges.length) {\n      curShowEdges.forEach((csedge) => {\n        const item = graph.findById(csedge.id);\n        item && graph.setItemState(item, 'disappearing', true);\n      });\n    }\n    curShowNodes.forEach((csnode) => {\n      const item = graph.findById(csnode.id);\n      item && graph.setItemState(item, 'disappearing', true);\n    });\n    graph.positionsAnimate();\n\n    // reset curShowNodes nad curShowEdges\n    curShowNodes = [];\n    curShowEdges = [];\n\n    // click on the same node which is the current focus node, hide the small nodes, change the layout parameters to roots view\n    if (currentFocus && currentFocus.id === model.id) {\n      currentFocus = undefined;\n      layoutController.layoutCfg.nodeStrength = 100;\n      layoutController.layoutCfg.collideStrength = 0.8;\n      layoutController.layoutCfg.alphaDecay = 0.01;\n    } else {\n      // click other focus node, hide the current small nodes and show the related nodes\n      currentFocus = model;\n      // change data after the original items disappearing\n      const layoutController = graph.get('layoutController');\n      layoutController.layoutCfg.nodeStrength = () => {\n        return -80;\n      };\n      layoutController.layoutCfg.collideStrength = 0.2;\n      layoutController.layoutCfg.linkDistance = (d) => {\n        if (!d.source.neighbor && !d.target.neighbor) return 150;\n        return 80;\n      };\n      layoutController.layoutCfg.edgeStrength = () => {\n        return 2;\n      };\n\n      curShowNodesMap = new Map();\n      // find the nodes which are the descendants of clicked model\n      edges.forEach((edge) => {\n        let nodeId = '';\n        let node;\n        if (edge.source === model.id) {\n          nodeId = edge.target;\n        } else if (edge.target === model.id) {\n          nodeId = edge.source;\n        } else {\n          return;\n        }\n        nodes.forEach((tnode) => {\n          if (tnode.id === nodeId) {\n            node = tnode;\n          }\n        });\n        if (!node) return;\n        const randomAngle = Math.random() * 2 * Math.PI;\n        node.x = model.x + (Math.cos(randomAngle) * model.size) / 2 + 10;\n        node.y = model.y + (Math.sin(randomAngle) * model.size) / 2 + 10;\n        // const dist = (model.x - node.x) * (model.x - node.x) + (model.y - node.y) * (model.y - node.y);\n\n        if (!node.style) node.style = {};\n        node.style.lineWidth = 0;\n        node.style.opacity = 1;\n        if (node.neighbor) {\n          node.type = 'animate-circle';\n          node.label = node.text;\n          const color = model.style.fill;\n          node.color = color;\n          node.style.fill = '#fff';\n          node.style.lineWidth = 1;\n          node.size = 30;\n          node.labelCfg = {\n            style: {\n              fontSize: 13,\n              lineHeight: 19,\n              fill: '#697B8C',\n            },\n            position: 'center',\n          };\n        }\n        curShowNodes.push(node);\n        curShowNodesMap.set(node.id, node);\n\n        // add the edge connect from model to node which exists in edges\n        const edgeId = `${model.id}-${node.id}`;\n        const medge = edgesMap.get(edgeId);\n        if (medge) {\n          medge.color = model.color;\n          curShowEdges.push(medge);\n        }\n      });\n\n      edges.forEach((edge) => {\n        if (edge.source === model.id || edge.target === model.id) {\n          curShowEdges.push(edge);\n        }\n      });\n    }\n    setTimeout(() => {\n      graph.changeData({\n        nodes: showNodes.concat(curShowNodes),\n        edges: showEdges.concat(curShowEdges),\n      });\n      const nodeItems = graph.getNodes();\n      const edgeItems = graph.getEdges();\n      edgeItems.forEach((item) => {\n        graph.clearItemStates(item);\n      });\n      nodeItems.forEach((item) => {\n        graph.clearItemStates(item);\n        graph.setItemState(item, 'appearing', true);\n      });\n    }, 400);\n  }\n});\ngraph.on('canvas:click', () => {\n  currentFocus = undefined;\n  const forceLayout = graph.get('layoutController').layoutMethods[0];\n  forceLayout.forceSimulation.stop();\n  const nodeItems = graph.getNodes();\n  const edgeItems = graph.getEdges();\n  if (highlighting) {\n    highlighting = false;\n  } else {\n    nodeItems.forEach((item) => {\n      const model = item.getModel();\n      if (model.neighbor) {\n        graph.setItemState(item, 'disappearing', true);\n      }\n    });\n    edgeItems.forEach((item) => {\n      graph.setItemState(item, 'disappearing', true);\n    });\n    curShowNodes = [];\n    curShowEdges = [];\n    setTimeout(() => {\n      const layoutController = graph.get('layoutController');\n      layoutController.layoutCfg.nodeStrength = 100;\n      layoutController.layoutCfg.collideStrength = 0.8;\n      layoutController.layoutCfg.alphaDecay = 0.01;\n\n      graph.changeData({\n        nodes: showNodes,\n        edges: showEdges,\n      });\n    }, 400);\n  }\n});\n\nif (typeof window !== 'undefined')\n  window.onresize = () => {\n    if (!graph || graph.get('destroyed')) return;\n    if (!container || !container.scrollWidth || !container.scrollHeight) return;\n    graph.changeSize(container.scrollWidth, container.scrollHeight);\n  };\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g6\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g6\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.g6);\n    global.christmasBubbles = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_g) {\n  \"use strict\";\n\n  _g = _interopRequireDefault(_g);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  // 实际开发中把 window.AntVUtil 换成从 @antv/util 引入的相关模块\n  // replace window.AntVUtil.isObject with\n  // import { mix } from '@antv/util';\n  var mix = window.AntVUtil.mix;\n  var showNodes = [];\n  var showEdges = [];\n  var curShowNodes = [];\n  var curShowEdges = [];\n  var nodes = [];\n  var edges = [];\n  var nodeMap = new Map();\n  var edgesMap = new Map();\n  var curShowNodesMap = new Map();\n  var highlighting = false;\n  var currentFocus;\n  var width = document.getElementById('container').scrollWidth;\n  var height = document.getElementById('container').scrollHeight || 500;\n  var LIMIT_OVERFLOW_WIDTH = width;\n  var LIMIT_OVERFLOW_HEIGHT = height;\n\n  var mapNodeSizeAndFontSize = function mapNodeSizeAndFontSize(nodes, propertyName, visualRange) {\n    var minp = 9999999999;\n    var maxp = -9999999999;\n    nodes.forEach(function (node) {\n      var propertyValue = node[propertyName] > 5000 ? 5000 : node[propertyName];\n      minp = propertyValue < minp ? propertyValue : minp;\n      maxp = propertyValue > maxp ? propertyValue : maxp;\n    });\n    var rangepLength = maxp - minp;\n    var rangevLength = visualRange[1] - visualRange[0];\n    nodes.forEach(function (node) {\n      var propertyValue = node[propertyName] > 5000 ? 5000 : node[propertyName];\n      node.size = (propertyValue - minp) / rangepLength * rangevLength + visualRange[0];\n\n      if (node.labelCfg && node.labelCfg.style) {\n        var textLength = node.label.length;\n        var fontSize = 1.3 * node.size / textLength;\n        if (fontSize < 11) fontSize = 11;\n        node.labelCfg.style.fontSize = fontSize;\n      }\n    });\n  };\n\n  var Colors = {\n    noun: '#588c73',\n    adj: '#f2e394',\n    v: '#d96459',\n    adv: '#f2ae72'\n  };\n  var graph;\n  var layoutCfg = {\n    type: 'force',\n    nodeSize: function nodeSize(d) {\n      return d.size / 2 + 5;\n    },\n    nodeStrength: 2500,\n    collideStrength: 0.8,\n    alphaDecay: 0.01,\n    preventOverlap: true,\n    onTick: function onTick() {\n      var nodeItems = graph.getNodes();\n      var height = graph.get('height');\n      var width = graph.get('width');\n      var padding = 10;\n      nodeItems.forEach(function (item) {\n        var model = item.getModel();\n        if (model.x > width - padding) model.x = width - padding;else if (model.x < padding) model.x = padding;\n        if (model.y > height - padding) model.y = height - padding;else if (model.y < padding) model.y = padding;\n      });\n    }\n  }; // G6.registerBehavior('double-finger-drag-canvas', {\n  //   getEvents: function getEvents() {\n  //     return {\n  //       wheel: 'onWheel'\n  //     };\n  //   },\n  //   onWheel: ev => {\n  //     if (ev.ctrlKey) {\n  //       const canvas = graph.get('canvas');\n  //       const point = canvas.getPointByClient(ev.clientX, ev.clientY);\n  //       let ratio = graph.getZoom();\n  //       if (ev.wheelDelta > 0) {\n  //         ratio = ratio + ratio * 0.05;\n  //       } else {\n  //         ratio = ratio - ratio * 0.05;\n  //       }\n  //       graph.zoomTo(ratio, {\n  //         x: point.x,\n  //         y: point.y\n  //       });\n  //     } else {\n  //       const x = ev.deltaX || ev.movementX;\n  //       const y = ev.deltaY || ev.movementY;\n  //       translate(x, y);\n  //     }\n  //     ev.preventDefault();\n  //   }\n  // });\n\n  _g.default.registerNode('bubble', {\n    drawShape: function drawShape(cfg, group) {\n      var self = this;\n      var r = cfg.size / 2; // a circle by path\n\n      var path = [['M', -r, 0], ['C', -r, r / 2, -r / 2, r, 0, r], ['C', r / 2, r, r, r / 2, r, 0], ['C', r, -r / 2, r / 2, -r, 0, -r], ['C', -r / 2, -r, -r, -r / 2, -r, 0], ['Z']];\n      var keyShape = group.addShape('path', {\n        attrs: {\n          x: 0,\n          y: 0,\n          path: path,\n          fill: cfg.color || 'steelblue'\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any value you want\n        name: 'path-shape'\n      });\n      var mask = group.addShape('path', {\n        attrs: {\n          x: 0,\n          y: 0,\n          path: path,\n          opacity: 0.25,\n          fill: cfg.color || 'steelblue',\n          shadowColor: cfg.color,\n          // cfg.color.split(' ')[2].substr(2),\n          shadowBlur: 40,\n          shadowOffsetX: 0,\n          shadowOffsetY: 30\n        },\n        // must be assigned in G6 3.3 and later versions. it can be any value you want\n        name: 'mask-shape'\n      });\n      var spNum = 10; // split points number\n\n      var directions = [],\n          rs = [];\n      self.changeDirections(spNum, directions);\n\n      for (var i = 0; i < spNum; i++) {\n        var rr = r + directions[i] * (Math.random() * r / 1000); // +-r/6, the sign according to the directions\n\n        if (rs[i] < 0.97 * r) rs[i] = 0.97 * r;else if (rs[i] > 1.03 * r) rs[i] = 1.03 * r;\n        rs.push(rr);\n      }\n\n      keyShape.animate(function () {\n        var path = self.getBubblePath(r, spNum, directions, rs);\n        return {\n          path: path\n        };\n      }, {\n        repeat: true,\n        duration: 1000\n      });\n      var directions2 = [],\n          rs2 = [];\n      self.changeDirections(spNum, directions2);\n\n      for (var _i = 0; _i < spNum; _i++) {\n        var _rr = r + directions2[_i] * (Math.random() * r / 1000); // +-r/6, the sign according to the directions\n\n\n        if (rs2[_i] < 0.97 * r) rs2[_i] = 0.97 * r;else if (rs2[_i] > 1.03 * r) rs2[_i] = 1.03 * r;\n        rs2.push(_rr);\n      }\n\n      mask.animate(function () {\n        var path = self.getBubblePath(r, spNum, directions2, rs2);\n        return {\n          path: path\n        };\n      }, {\n        repeat: true,\n        duration: 1000\n      });\n      return keyShape;\n    },\n    changeDirections: function changeDirections(num, directions) {\n      for (var i = 0; i < num; i++) {\n        if (!directions[i]) {\n          var rand = Math.random();\n          var dire = rand > 0.5 ? 1 : -1;\n          directions.push(dire);\n        } else {\n          directions[i] = -1 * directions[i];\n        }\n      }\n\n      return directions;\n    },\n    getBubblePath: function getBubblePath(r, spNum, directions, rs) {\n      var path = [];\n      var cpNum = spNum * 2; // control points number\n\n      var unitAngle = Math.PI * 2 / spNum; // base angle for split points\n\n      var angleSum = 0;\n      var sps = [];\n      var cps = [];\n\n      for (var i = 0; i < spNum; i++) {\n        var speed = 0.001 * Math.random();\n        rs[i] = rs[i] + directions[i] * speed * r; // +-r/6, the sign according to the directions\n\n        if (rs[i] < 0.97 * r) {\n          rs[i] = 0.97 * r;\n          directions[i] = -1 * directions[i];\n        } else if (rs[i] > 1.03 * r) {\n          rs[i] = 1.03 * r;\n          directions[i] = -1 * directions[i];\n        }\n\n        var spX = rs[i] * Math.cos(angleSum);\n        var spY = rs[i] * Math.sin(angleSum);\n        sps.push({\n          x: spX,\n          y: spY\n        });\n\n        for (var j = 0; j < 2; j++) {\n          var cpAngleRand = unitAngle / 3;\n          var cpR = rs[i] / Math.cos(cpAngleRand);\n          var sign = j === 0 ? -1 : 1;\n          var x = cpR * Math.cos(angleSum + sign * cpAngleRand);\n          var y = cpR * Math.sin(angleSum + sign * cpAngleRand);\n          cps.push({\n            x: x,\n            y: y\n          });\n        }\n\n        angleSum += unitAngle;\n      }\n\n      path.push(['M', sps[0].x, sps[0].y]);\n\n      for (var _i2 = 1; _i2 < spNum; _i2++) {\n        path.push(['C', cps[2 * _i2 - 1].x, cps[2 * _i2 - 1].y, cps[2 * _i2].x, cps[2 * _i2].y, sps[_i2].x, sps[_i2].y]);\n      }\n\n      path.push(['C', cps[cpNum - 1].x, cps[cpNum - 1].y, cps[0].x, cps[0].y, sps[0].x, sps[0].y]);\n      path.push(['Z']);\n      return path;\n    }\n  }, 'single-node');\n\n  _g.default.registerNode('animate-circle', {\n    setState: function setState(name, value, item) {\n      var shape = item.get('keyShape');\n      var label = shape.get('parent').get('children')[1];\n\n      if (name === 'disappearing' && value) {\n        shape.animate(function (ratio) {\n          return {\n            opacity: 1 - ratio,\n            r: shape.attr('r') * (1 - ratio)\n          };\n        }, {\n          duration: 200\n        });\n        label.animate(function (ratio) {\n          return {\n            opacity: 1 - ratio\n          };\n        }, {\n          duration: 500\n        });\n      } else if (name === 'appearing' && value) {\n        var r = item.getModel().size / 2;\n        shape.animate(function (ratio) {\n          return {\n            opacity: ratio,\n            r: r * ratio,\n            fill: shape.attr('fill')\n          };\n        }, {\n          duration: 300\n        });\n        label.animate(function (ratio) {\n          return {\n            opacity: ratio\n          };\n        }, {\n          duration: 500\n        });\n      }\n    }\n  }, 'circle');\n\n  _g.default.registerEdge('animate-line', {\n    drawShape: function drawShape(cfg, group) {\n      var self = this;\n      var shapeStyle = self.getShapeStyle(cfg);\n      shapeStyle = mix(shapeStyle, {\n        opacity: 0,\n        strokeOpacity: 0\n      });\n      var keyShape = group.addShape('path', {\n        attrs: shapeStyle,\n        // must be assigned in G6 3.3 and later versions. it can be any value you want\n        name: 'path-shape'\n      });\n      return keyShape;\n    },\n    afterDraw: function afterDraw(cfg, group) {\n      var shape = group.get('children')[0];\n      shape.animate(function (ratio) {\n        var opacity = ratio * cfg.style.opacity;\n        var strokeOpacity = ratio * cfg.style.strokeOpacity;\n        return {\n          opacity: ratio || opacity,\n          strokeOpacity: ratio || strokeOpacity\n        };\n      }, {\n        duration: 300\n      });\n    },\n    setState: function setState(name, value, item) {\n      var shape = item.get('keyShape');\n\n      if (name === 'disappearing' && value) {\n        shape.animate(function (ratio) {\n          return {\n            opacity: 1 - ratio,\n            strokeOpacity: 1 - ratio\n          };\n        }, {\n          duration: 200\n        });\n      }\n    }\n  }, 'line');\n\n  graph = new _g.default.Graph({\n    container: 'container',\n    width: width,\n    height: height,\n    linkCenter: true,\n    layout: layoutCfg,\n    modes: {\n      default: ['drag-canvas']\n    },\n    defaultNode: {\n      type: 'bubble',\n      size: 30,\n      labelCfg: {\n        position: 'center',\n        style: {\n          fill: 'white',\n          fontStyle: 'bold'\n        }\n      }\n    },\n    defaultEdge: {\n      color: '#888',\n      type: 'animate-line'\n    }\n  });\n\n  function translate(x, y) {\n    var moveX = x;\n    var moveY = y;\n    /* 获得当前偏移量*/\n\n    var group = graph.get('group');\n    var bbox = group.getBBox();\n    var leftTopPoint = graph.getCanvasByPoint(bbox.minX, bbox.minY);\n    var rightBottomPoint = graph.getCanvasByPoint(bbox.maxX, bbox.maxY);\n    /* 如果 x 轴在区域内，不允许左右超过100 */\n\n    if (x < 0 && leftTopPoint.x - x > LIMIT_OVERFLOW_WIDTH) {\n      moveX = 0;\n    }\n\n    if (x > 0 && rightBottomPoint.x - x < width - LIMIT_OVERFLOW_WIDTH) {\n      moveX = 0;\n    }\n\n    if (y < 0 && leftTopPoint.y - y > LIMIT_OVERFLOW_HEIGHT) {\n      moveY = 0;\n    }\n\n    if (y > 0 && rightBottomPoint.y - y < height - LIMIT_OVERFLOW_HEIGHT) {\n      moveY = 0;\n    }\n\n    graph.translate(-moveX, -moveY);\n  }\n\n  function refreshDragedNodePosition(e) {\n    var model = e.item.get('model');\n    model.fx = e.x;\n    model.fy = e.y;\n  }\n\n  graph.on('node:dragstart', function (e) {\n    graph.layout();\n    refreshDragedNodePosition(e);\n  });\n  graph.on('node:drag', function (e) {\n    refreshDragedNodePosition(e);\n  });\n  graph.on('node:dragend', function (e) {\n    e.item.get('model').fx = null;\n    e.item.get('model').fy = null;\n  });\n\n  var loadData = function loadData(data) {\n    var layoutController = graph.get('layoutController');\n    layoutController.layoutCfg.nodeStrength = 30;\n    layoutController.layoutCfg.collideStrength = 0.8;\n    layoutController.layoutCfg.alphaDecay = 0.01;\n    nodes = data.nodes;\n    edges = data.edges;\n    showNodes = [];\n    showEdges = [];\n    nodeMap = new Map();\n    edgesMap = new Map(); // find the roots\n\n    nodes.forEach(function (node) {\n      if (!node.neighbor) {\n        node.label = node.text;\n        node.color = Colors[node.type];\n        node.style = {\n          fill: Colors[node.type],\n          lineWidth: 0\n        };\n        var labelColor = '#fff';\n\n        if (node.type === 'adj') {\n          labelColor = Colors.noun;\n        }\n\n        node.labelCfg = {\n          style: {\n            fontSize: 15,\n            fill: labelColor,\n            fontWeight: 300\n          }\n        };\n        node.x = Math.random() * 800;\n        node.y = Math.random() * 800;\n        showNodes.push(node);\n      }\n\n      nodeMap.set(node.id, node);\n    });\n    mapNodeSizeAndFontSize(showNodes, 'count', [40, 120]);\n    showNodes.forEach(function (snode) {\n      if (snode.size < 80) {\n        snode.type = 'circle';\n      }\n    });\n    edges.forEach(function (edge) {\n      // map the id\n      edge.id = \"\".concat(edge.source, \"-\").concat(edge.target);\n      edge.style = {\n        lineWidth: 0.5,\n        opacity: 1,\n        strokeOpacity: 1\n      };\n      edgesMap.set(edge.id, edge);\n    });\n    graph.data({\n      nodes: showNodes,\n      edges: showEdges\n    });\n    graph.render();\n  };\n\n  fetch('https://gw.alipayobjects.com/os/basement_prod/0a749386-8593-44a2-a132-81dfa1fc3158.json').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    loadData(data);\n  }); // click root to expand\n\n  graph.on('node:click', function (e) {\n    curShowNodes = [];\n    curShowEdges = [];\n    var item = e.item;\n    var model = item.getModel();\n\n    if (model.neighbor) {\n      return;\n    } // if clicked a root, hide unrelated items and show the related items\n\n\n    if (!model.neighbor) {\n      var layoutController = graph.get('layoutController');\n      var forceLayout = layoutController.layoutMethods[0];\n      forceLayout.forceSimulation.stop(); // light the level 0 nodes\n\n      showNodes.forEach(function (snode) {\n        if (snode.x < 0.5 * width) {\n          snode.x = 300;\n        } else {\n          snode.x = width - 300;\n        }\n      });\n      model.x = width / 2;\n      model.y = height / 2; // animatively hide the items which are going to disappear\n\n      if (curShowEdges.length) {\n        curShowEdges.forEach(function (csedge) {\n          var item = graph.findById(csedge.id);\n          item && graph.setItemState(item, 'disappearing', true);\n        });\n      }\n\n      curShowNodes.forEach(function (csnode) {\n        var item = graph.findById(csnode.id);\n        item && graph.setItemState(item, 'disappearing', true);\n      });\n      graph.positionsAnimate(); // reset curShowNodes nad curShowEdges\n\n      curShowNodes = [];\n      curShowEdges = []; // click on the same node which is the current focus node, hide the small nodes, change the layout parameters to roots view\n\n      if (currentFocus && currentFocus.id === model.id) {\n        currentFocus = undefined;\n        layoutController.layoutCfg.nodeStrength = 100;\n        layoutController.layoutCfg.collideStrength = 0.8;\n        layoutController.layoutCfg.alphaDecay = 0.01;\n      } else {\n        // click other focus node, hide the current small nodes and show the related nodes\n        currentFocus = model; // change data after the original items disappearing\n\n        var _layoutController = graph.get('layoutController');\n\n        _layoutController.layoutCfg.nodeStrength = function () {\n          return -80;\n        };\n\n        _layoutController.layoutCfg.collideStrength = 0.2;\n\n        _layoutController.layoutCfg.linkDistance = function (d) {\n          if (!d.source.neighbor && !d.target.neighbor) return 150;\n          return 80;\n        };\n\n        _layoutController.layoutCfg.edgeStrength = function () {\n          return 2;\n        };\n\n        curShowNodesMap = new Map(); // find the nodes which are the descendants of clicked model\n\n        edges.forEach(function (edge) {\n          var nodeId = '';\n          var node;\n\n          if (edge.source === model.id) {\n            nodeId = edge.target;\n          } else if (edge.target === model.id) {\n            nodeId = edge.source;\n          } else {\n            return;\n          }\n\n          nodes.forEach(function (tnode) {\n            if (tnode.id === nodeId) {\n              node = tnode;\n            }\n          });\n          if (!node) return;\n          var randomAngle = Math.random() * 2 * Math.PI;\n          node.x = model.x + Math.cos(randomAngle) * model.size / 2 + 10;\n          node.y = model.y + Math.sin(randomAngle) * model.size / 2 + 10; // const dist = (model.x - node.x) * (model.x - node.x) + (model.y - node.y) * (model.y - node.y);\n\n          if (!node.style) node.style = {};\n          node.style.lineWidth = 0;\n          node.style.opacity = 1;\n\n          if (node.neighbor) {\n            node.type = 'animate-circle';\n            node.label = node.text;\n            var color = model.style.fill;\n            node.color = color;\n            node.style.fill = '#fff';\n            node.style.lineWidth = 1;\n            node.size = 30;\n            node.labelCfg = {\n              style: {\n                fontSize: 13,\n                lineHeight: 19,\n                fill: '#697B8C'\n              },\n              position: 'center'\n            };\n          }\n\n          curShowNodes.push(node);\n          curShowNodesMap.set(node.id, node); // add the edge connect from model to node which exists in edges\n\n          var edgeId = \"\".concat(model.id, \"-\").concat(node.id);\n          var medge = edgesMap.get(edgeId);\n\n          if (medge) {\n            medge.color = model.color;\n            curShowEdges.push(medge);\n          }\n        });\n        edges.forEach(function (edge) {\n          if (edge.source === model.id || edge.target === model.id) {\n            curShowEdges.push(edge);\n          }\n        });\n      }\n\n      setTimeout(function () {\n        graph.changeData({\n          nodes: showNodes.concat(curShowNodes),\n          edges: showEdges.concat(curShowEdges)\n        });\n        var nodeItems = graph.getNodes();\n        var edgeItems = graph.getEdges();\n        edgeItems.forEach(function (item) {\n          graph.clearItemStates(item);\n        });\n        nodeItems.forEach(function (item) {\n          graph.clearItemStates(item);\n          graph.setItemState(item, 'appearing', true);\n        });\n      }, 400);\n    }\n  });\n  graph.on('canvas:click', function () {\n    currentFocus = undefined;\n    var forceLayout = graph.get('layoutController').layoutMethods[0];\n    forceLayout.forceSimulation.stop();\n    var nodeItems = graph.getNodes();\n    var edgeItems = graph.getEdges();\n\n    if (highlighting) {\n      highlighting = false;\n    } else {\n      nodeItems.forEach(function (item) {\n        var model = item.getModel();\n\n        if (model.neighbor) {\n          graph.setItemState(item, 'disappearing', true);\n        }\n      });\n      edgeItems.forEach(function (item) {\n        graph.setItemState(item, 'disappearing', true);\n      });\n      curShowNodes = [];\n      curShowEdges = [];\n      setTimeout(function () {\n        var layoutController = graph.get('layoutController');\n        layoutController.layoutCfg.nodeStrength = 100;\n        layoutController.layoutCfg.collideStrength = 0.8;\n        layoutController.layoutCfg.alphaDecay = 0.01;\n        graph.changeData({\n          nodes: showNodes,\n          edges: showEdges\n        });\n      }, 400);\n    }\n  });\n  if (typeof window !== 'undefined') window.onresize = function () {\n    if (!graph || graph.get('destroyed')) return;\n    if (!container || !container.scrollWidth || !container.scrollHeight) return;\n    graph.changeSize(container.scrollWidth, container.scrollHeight);\n  };\n});"},{"relativePath":"case/graphDemos/demo/edgeBundling.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/edgeBundling.js","order":2,"filename":"edgeBundling.js","title":{"zh":"美国迁徙图边绑定","en":"Edge Bundling"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*z9iXQq_kcrYAAAAAAAAAAABkARQnAQ","source":"import G6 from '@antv/g6';\nimport insertCss from 'insert-css';\n\n/**\n * 该示例演示边绑定\n * by 十吾\n */\n\ninsertCss(`\n  .g6-tooltip {\n    border: 1px solid #e2e2e2;\n    border-radius: 4px;\n    font-size: 12px;\n    color: #545454;\n    background-color: rgba(255, 255, 255, 0.9);\n    padding: 10px 8px;\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n  }\n`);\n\nconst lightBlue = 'rgb(119, 243, 252)';\nconst llightBlue16 = '#C8FDFC';\nconst lightOrange = 'rgb(230, 100, 64)';\nconst llightOrange16 = '#FFAA86';\n\nfetch('https://gw.alipayobjects.com/os/basement_prod/7ba82250-8367-4351-82b2-d48604cd2261.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const nodes = data.nodes;\n    const edges = data.edges;\n    nodes.forEach((n) => {\n      n.y = -n.y;\n      n.degree = 0;\n      n.inDegree = 0;\n      n.outDegree = 0;\n    });\n    // compute the degree of each node\n    const nodeIdMap = new Map();\n    nodes.forEach((node) => {\n      nodeIdMap.set(node.id, node);\n    });\n    edges.forEach((e) => {\n      const source = nodeIdMap.get(e.source);\n      const target = nodeIdMap.get(e.target);\n      source.outDegree++;\n      target.inDegree++;\n      source.degree++;\n      target.degree++;\n      if (e.sytle === undefined) e.style = {};\n      e.style.lineWidth = 0.7;\n      e.style.strokeOpacity = 0.1;\n      e.style.stroke = `l(0) 0:${llightOrange16} 1:${llightBlue16}`;\n      if (nodeIdMap.get(e.source).x < nodeIdMap.get(e.target).x) {\n        e.style.stroke = `l(0) 0:${llightBlue16} 1:${llightOrange16}`;\n      }\n    });\n    let maxDegree = -9999;\n    let minDegree = 9999;\n    nodes.forEach((n) => {\n      if (maxDegree < n.degree) maxDegree = n.degree;\n      if (minDegree > n.degree) minDegree = n.degree;\n    });\n    const sizeRange = [1, 20];\n    const sizeDataRange = [minDegree, maxDegree];\n    scaleNodeProp(nodes, 'size', 'degree', sizeDataRange, sizeRange);\n\n    // customize the node\n    G6.registerNode(\n      'pie-node',\n      {\n        draw: (cfg, group) => {\n          const radius = cfg.size / 2;\n          const inPercentage = cfg.inDegree / cfg.degree;\n          const inAngle = inPercentage * Math.PI * 2;\n          const inArcEnd = [radius * Math.cos(inAngle), radius * Math.sin(inAngle)];\n          let isInBigArc = 1;\n          let isOutBigArc = 0;\n          if (inAngle > Math.PI) {\n            isInBigArc = 0;\n            isOutBigArc = 1;\n          }\n          const fanIn = group.addShape('path', {\n            attrs: {\n              path: [\n                ['M', radius, 0],\n                ['A', radius, radius, 0, isInBigArc, 0, inArcEnd[0], inArcEnd[1]],\n                ['L', 0, 0],\n                ['Z'],\n              ],\n              stroke: lightOrange,\n              lineWidth: 0,\n              fill: lightOrange,\n            },\n            name: 'fan-in-path',\n          });\n\n          group.addShape('path', {\n            attrs: {\n              path: [\n                ['M', inArcEnd[0], inArcEnd[1]],\n                ['A', radius, radius, 0, isOutBigArc, 0, radius, 0],\n                ['L', 0, 0],\n                ['Z'],\n              ],\n              stroke: lightBlue,\n              lineWidth: 0,\n              fill: lightBlue,\n            },\n            name: 'fan-out-path',\n          });\n          return fanIn;\n        },\n      },\n      'single-node',\n    );\n\n    const edgeBundling = new G6.Bundling({\n      bundleThreshold: 0.6,\n      K: 100,\n    });\n\n    const container = document.getElementById('container');\n    container.style.background = '#000';\n    const width = container.scrollWidth;\n    const height = container.scrollHeight || 500;\n    const graph = new G6.Graph({\n      container: 'container',\n      width,\n      height,\n      plugins: [edgeBundling],\n      fitView: true,\n      defaultNode: {\n        type: 'pie-node',\n        size: 3,\n        color: 'steelblue',\n        style: {\n          lineWidth: 0,\n          fill: 'steelblue',\n        },\n      },\n      modes: {\n        default: [\n          'drag-canvas',\n          'zoom-canvas',\n          {\n            type: 'tooltip',\n            formatText(model) {\n              const text = `Longitude: ${model.lon} \\n Latitude: ${model.lat}`;\n              return text;\n            },\n            shouldUpdate: (e) => true,\n          },\n        ],\n      },\n    });\n\n    edgeBundling.bundling(data);\n    graph.data(data);\n    graph.render();\n    if (typeof window !== 'undefined')\n      window.onresize = () => {\n        if (!graph || graph.get('destroyed')) return;\n        if (!container || !container.scrollWidth || !container.scrollHeight) return;\n        graph.changeSize(container.scrollWidth, container.scrollHeight);\n      };\n  });\n\nfunction scaleNodeProp(nodes, propName, refPropName, dataRange, outRange) {\n  const outLength = outRange[1] - outRange[0];\n  const dataLength = dataRange[1] - dataRange[0];\n  nodes.forEach((n) => {\n    n[propName] = ((n[refPropName] - dataRange[0]) * outLength) / dataLength + outRange[0];\n  });\n}\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g6\", \"insert-css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g6\"), require(\"insert-css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.g6, global.insertCss);\n    global.edgeBundling = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_g, _insertCss) {\n  \"use strict\";\n\n  _g = _interopRequireDefault(_g);\n  _insertCss = _interopRequireDefault(_insertCss);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * 该示例演示边绑定\n   * by 十吾\n   */\n  (0, _insertCss.default)(\"\\n  .g6-tooltip {\\n    border: 1px solid #e2e2e2;\\n    border-radius: 4px;\\n    font-size: 12px;\\n    color: #545454;\\n    background-color: rgba(255, 255, 255, 0.9);\\n    padding: 10px 8px;\\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\\n  }\\n\");\n  var lightBlue = 'rgb(119, 243, 252)';\n  var llightBlue16 = '#C8FDFC';\n  var lightOrange = 'rgb(230, 100, 64)';\n  var llightOrange16 = '#FFAA86';\n  fetch('https://gw.alipayobjects.com/os/basement_prod/7ba82250-8367-4351-82b2-d48604cd2261.json').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    var nodes = data.nodes;\n    var edges = data.edges;\n    nodes.forEach(function (n) {\n      n.y = -n.y;\n      n.degree = 0;\n      n.inDegree = 0;\n      n.outDegree = 0;\n    }); // compute the degree of each node\n\n    var nodeIdMap = new Map();\n    nodes.forEach(function (node) {\n      nodeIdMap.set(node.id, node);\n    });\n    edges.forEach(function (e) {\n      var source = nodeIdMap.get(e.source);\n      var target = nodeIdMap.get(e.target);\n      source.outDegree++;\n      target.inDegree++;\n      source.degree++;\n      target.degree++;\n      if (e.sytle === undefined) e.style = {};\n      e.style.lineWidth = 0.7;\n      e.style.strokeOpacity = 0.1;\n      e.style.stroke = \"l(0) 0:\".concat(llightOrange16, \" 1:\").concat(llightBlue16);\n\n      if (nodeIdMap.get(e.source).x < nodeIdMap.get(e.target).x) {\n        e.style.stroke = \"l(0) 0:\".concat(llightBlue16, \" 1:\").concat(llightOrange16);\n      }\n    });\n    var maxDegree = -9999;\n    var minDegree = 9999;\n    nodes.forEach(function (n) {\n      if (maxDegree < n.degree) maxDegree = n.degree;\n      if (minDegree > n.degree) minDegree = n.degree;\n    });\n    var sizeRange = [1, 20];\n    var sizeDataRange = [minDegree, maxDegree];\n    scaleNodeProp(nodes, 'size', 'degree', sizeDataRange, sizeRange); // customize the node\n\n    _g.default.registerNode('pie-node', {\n      draw: function draw(cfg, group) {\n        var radius = cfg.size / 2;\n        var inPercentage = cfg.inDegree / cfg.degree;\n        var inAngle = inPercentage * Math.PI * 2;\n        var inArcEnd = [radius * Math.cos(inAngle), radius * Math.sin(inAngle)];\n        var isInBigArc = 1;\n        var isOutBigArc = 0;\n\n        if (inAngle > Math.PI) {\n          isInBigArc = 0;\n          isOutBigArc = 1;\n        }\n\n        var fanIn = group.addShape('path', {\n          attrs: {\n            path: [['M', radius, 0], ['A', radius, radius, 0, isInBigArc, 0, inArcEnd[0], inArcEnd[1]], ['L', 0, 0], ['Z']],\n            stroke: lightOrange,\n            lineWidth: 0,\n            fill: lightOrange\n          },\n          name: 'fan-in-path'\n        });\n        group.addShape('path', {\n          attrs: {\n            path: [['M', inArcEnd[0], inArcEnd[1]], ['A', radius, radius, 0, isOutBigArc, 0, radius, 0], ['L', 0, 0], ['Z']],\n            stroke: lightBlue,\n            lineWidth: 0,\n            fill: lightBlue\n          },\n          name: 'fan-out-path'\n        });\n        return fanIn;\n      }\n    }, 'single-node');\n\n    var edgeBundling = new _g.default.Bundling({\n      bundleThreshold: 0.6,\n      K: 100\n    });\n    var container = document.getElementById('container');\n    container.style.background = '#000';\n    var width = container.scrollWidth;\n    var height = container.scrollHeight || 500;\n    var graph = new _g.default.Graph({\n      container: 'container',\n      width: width,\n      height: height,\n      plugins: [edgeBundling],\n      fitView: true,\n      defaultNode: {\n        type: 'pie-node',\n        size: 3,\n        color: 'steelblue',\n        style: {\n          lineWidth: 0,\n          fill: 'steelblue'\n        }\n      },\n      modes: {\n        default: ['drag-canvas', 'zoom-canvas', {\n          type: 'tooltip',\n          formatText: function formatText(model) {\n            var text = \"Longitude: \".concat(model.lon, \" \\n Latitude: \").concat(model.lat);\n            return text;\n          },\n          shouldUpdate: function shouldUpdate(e) {\n            return true;\n          }\n        }]\n      }\n    });\n    edgeBundling.bundling(data);\n    graph.data(data);\n    graph.render();\n    if (typeof window !== 'undefined') window.onresize = function () {\n      if (!graph || graph.get('destroyed')) return;\n      if (!container || !container.scrollWidth || !container.scrollHeight) return;\n      graph.changeSize(container.scrollWidth, container.scrollHeight);\n    };\n  });\n\n  function scaleNodeProp(nodes, propName, refPropName, dataRange, outRange) {\n    var outLength = outRange[1] - outRange[0];\n    var dataLength = dataRange[1] - dataRange[0];\n    nodes.forEach(function (n) {\n      n[propName] = (n[refPropName] - dataRange[0]) * outLength / dataLength + outRange[0];\n    });\n  }\n});"},{"relativePath":"case/graphDemos/demo/decisionBubbles.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/decisionBubbles.js","order":3,"filename":"decisionBubbles.js","title":{"zh":"图表决策","en":"Decision Bubbles"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*wvofQ6DuC0YAAAAAAAAAAABkARQnAQ","source":"import G6 from '@antv/g6';\n/**\n * by Shiwu\n */\nlet showNodes = [];\nlet showEdges = [];\nlet curShowNodes = [];\nlet curShowEdges = [];\nlet nodes = [];\nlet edges = [];\nlet nodeMap = new Map();\nlet edgesMap = new Map();\nlet curShowNodesMap = new Map();\nlet highlighting = false;\nlet currentFocus;\nconst width = document.getElementById('container').scrollWidth;\nconst height = document.getElementById('container').scrollHeight || 500;\n\nconst LIMIT_OVERFLOW_WIDTH = width;\nconst LIMIT_OVERFLOW_HEIGHT = height;\n\nconst mapNodeSize = (nodes, propertyName, visualRange) => {\n  let minp = 9999999999;\n  let maxp = -9999999999;\n  nodes.forEach((node) => {\n    minp = node[propertyName] < minp ? node[propertyName] : minp;\n    maxp = node[propertyName] > maxp ? node[propertyName] : maxp;\n  });\n  const rangepLength = maxp - minp;\n  const rangevLength = visualRange[1] - visualRange[0];\n  nodes.forEach((node) => {\n    node.size = ((node[propertyName] - minp) / rangepLength) * rangevLength + visualRange[0];\n  });\n};\n\nconst lightColors = [\n  '#8FE9FF',\n  '#87EAEF',\n  '#FFC9E3',\n  '#A7C2FF',\n  '#FFA1E3',\n  '#FFE269',\n  '#BFCFEE',\n  '#FFA0C5',\n  '#D5FF86',\n];\nconst darkColors = [\n  '#7DA8FF',\n  '#44E6C1',\n  '#FF68A7',\n  '#7F86FF',\n  '#AE6CFF',\n  '#FF5A34',\n  '#5D7092',\n  '#FF6565',\n  '#6BFFDE',\n];\nconst uLightColors = [\n  '#CFF6FF',\n  '#BCFCFF',\n  '#FFECF5',\n  '#ECFBFF',\n  '#EAD9FF',\n  '#FFF8DA',\n  '#DCE2EE',\n  '#FFE7F0',\n  '#EEFFCE',\n];\nconst uDarkColors = [\n  '#CADBFF',\n  '#A9FFEB',\n  '#FFC4DD',\n  '#CACDFF',\n  '#FFD4F2',\n  '#FFD3C9',\n  '#EBF2FF',\n  '#FFCBCB',\n  '#CAFFF3',\n];\n\nconst gColors = [];\nconst unlightColorMap = new Map();\nlightColors.forEach((lcolor, i) => {\n  gColors.push('l(0) 0:' + lcolor + ' 1:' + darkColors[i]);\n  unlightColorMap.set(gColors[i], 'l(0) 0:' + uLightColors[i] + ' 1:' + uDarkColors[i]);\n});\n\nlet graph;\nconst layoutCfg = {\n  type: 'force',\n  nodeSize: (d) => {\n    return d.size / 2 + 5;\n  },\n  nodeStrength: 2500,\n  collideStrength: 0.8,\n  alphaDecay: 0.01,\n  preventOverlap: true,\n  onTick: () => {\n    const nodeItems = graph.getNodes();\n    const height = graph.get('height');\n    const width = graph.get('width');\n    const padding = 10;\n    nodeItems.forEach((item) => {\n      const model = item.getModel();\n      if (model.x > width - padding) model.x = width - padding;\n      else if (model.x < padding) model.x = padding;\n\n      if (model.y > height - padding) model.y = height - padding;\n      else if (model.y < padding) model.y = padding;\n    });\n  },\n};\n\nG6.registerBehavior('double-finger-drag-canvas', {\n  getEvents: function getEvents() {\n    return {\n      wheel: 'onWheel',\n    };\n  },\n\n  onWheel: (ev) => {\n    if (ev.ctrlKey) {\n      const canvas = graph.get('canvas');\n      const point = canvas.getPointByClient(ev.clientX, ev.clientY);\n      let ratio = graph.getZoom();\n      if (ev.wheelDelta > 0) {\n        ratio = ratio + ratio * 0.05;\n      } else {\n        ratio = ratio - ratio * 0.05;\n      }\n      graph.zoomTo(ratio, {\n        x: point.x,\n        y: point.y,\n      });\n    } else {\n      const x = ev.deltaX || ev.movementX;\n      const y = ev.deltaY || ev.movementY || (-ev.wheelDelta * 125) / 3;\n      translate(x, y);\n    }\n    ev.preventDefault();\n  },\n});\n\nG6.registerNode(\n  'bubble',\n  {\n    drawShape(cfg, group) {\n      const self = this;\n      const r = cfg.size / 2;\n      // a circle by path\n      const path = [\n        ['M', -r, 0],\n        ['C', -r, r / 2, -r / 2, r, 0, r],\n        ['C', r / 2, r, r, r / 2, r, 0],\n        ['C', r, -r / 2, r / 2, -r, 0, -r],\n        ['C', -r / 2, -r, -r, -r / 2, -r, 0],\n        ['Z'],\n      ];\n      const keyShape = group.addShape('path', {\n        attrs: {\n          x: 0,\n          y: 0,\n          path,\n          fill: cfg.color || 'steelblue',\n        },\n        name: 'path-shape',\n      });\n\n      const mask = group.addShape('path', {\n        attrs: {\n          x: 0,\n          y: 0,\n          path,\n          opacity: 0.25,\n          fill: cfg.color || 'steelblue',\n          shadowColor: cfg.color.split(' ')[2].substr(2),\n          shadowBlur: 40,\n          shadowOffsetX: 0,\n          shadowOffsetY: 30,\n        },\n        name: 'mask-shape',\n      });\n\n      const spNum = 10; // split points number\n      const directions = [],\n        rs = [];\n      self.changeDirections(spNum, directions);\n      for (let i = 0; i < spNum; i++) {\n        const rr = r + directions[i] * ((Math.random() * r) / 1000); // +-r/6, the sign according to the directions\n        if (rs[i] < 0.97 * r) rs[i] = 0.97 * r;\n        else if (rs[i] > 1.03 * r) rs[i] = 1.03 * r;\n        rs.push(rr);\n      }\n      keyShape.animate(\n        () => {\n          const path = self.getBubblePath(r, spNum, directions, rs);\n          return { path };\n        },\n        {\n          repeat: true,\n          duration: 10000,\n        },\n      );\n\n      const directions2 = [],\n        rs2 = [];\n      self.changeDirections(spNum, directions2);\n      for (let i = 0; i < spNum; i++) {\n        const rr = r + directions2[i] * ((Math.random() * r) / 1000); // +-r/6, the sign according to the directions\n        if (rs2[i] < 0.97 * r) rs2[i] = 0.97 * r;\n        else if (rs2[i] > 1.03 * r) rs2[i] = 1.03 * r;\n        rs2.push(rr);\n      }\n      mask.animate(\n        () => {\n          const path = self.getBubblePath(r, spNum, directions2, rs2);\n          return { path };\n        },\n        {\n          repeat: true,\n          duration: 10000,\n        },\n      );\n      return keyShape;\n    },\n    changeDirections(num, directions) {\n      for (let i = 0; i < num; i++) {\n        if (!directions[i]) {\n          const rand = Math.random();\n          const dire = rand > 0.5 ? 1 : -1;\n          directions.push(dire);\n        } else {\n          directions[i] = -1 * directions[i];\n        }\n      }\n      return directions;\n    },\n    getBubblePath(r, spNum, directions, rs) {\n      const path = [];\n      const cpNum = spNum * 2; // control points number\n      const unitAngle = (Math.PI * 2) / spNum; // base angle for split points\n      let angleSum = 0;\n      const sps = [];\n      const cps = [];\n      for (let i = 0; i < spNum; i++) {\n        const speed = 0.001 * Math.random();\n        rs[i] = rs[i] + directions[i] * speed * r; // +-r/6, the sign according to the directions\n        if (rs[i] < 0.97 * r) {\n          rs[i] = 0.97 * r;\n          directions[i] = -1 * directions[i];\n        } else if (rs[i] > 1.03 * r) {\n          rs[i] = 1.03 * r;\n          directions[i] = -1 * directions[i];\n        }\n        const spX = rs[i] * Math.cos(angleSum);\n        const spY = rs[i] * Math.sin(angleSum);\n        sps.push({ x: spX, y: spY });\n        for (let j = 0; j < 2; j++) {\n          const cpAngleRand = unitAngle / 3;\n          const cpR = rs[i] / Math.cos(cpAngleRand);\n          const sign = j === 0 ? -1 : 1;\n          const x = cpR * Math.cos(angleSum + sign * cpAngleRand);\n          const y = cpR * Math.sin(angleSum + sign * cpAngleRand);\n          cps.push({ x, y });\n        }\n        angleSum += unitAngle;\n      }\n      path.push(['M', sps[0].x, sps[0].y]);\n      for (let i = 1; i < spNum; i++) {\n        path.push([\n          'C',\n          cps[2 * i - 1].x,\n          cps[2 * i - 1].y,\n          cps[2 * i].x,\n          cps[2 * i].y,\n          sps[i].x,\n          sps[i].y,\n        ]);\n      }\n      path.push(['C', cps[cpNum - 1].x, cps[cpNum - 1].y, cps[0].x, cps[0].y, sps[0].x, sps[0].y]);\n      path.push(['Z']);\n      return path;\n    },\n    setState(name, value, item) {\n      const shape = item.get('keyShape');\n      if (name === 'dark') {\n        if (value) {\n          if (shape.attr('fill') !== '#fff') {\n            shape.oriFill = shape.attr('fill');\n            const uColor = unlightColorMap.get(shape.attr('fill'));\n            shape.attr('fill', uColor);\n          } else {\n            shape.attr('opacity', 0.2);\n          }\n        } else {\n          if (shape.attr('fill') !== '#fff') {\n            shape.attr('fill', shape.oriFill || shape.attr('fill'));\n          } else {\n            shape.attr('opacity', 1);\n          }\n        }\n      }\n    },\n  },\n  'single-node',\n);\n\nG6.registerNode(\n  'animate-circle',\n  {\n    setState(name, value, item) {\n      const shape = item.get('keyShape');\n      const label = shape.get('parent').get('children')[1];\n      if (name === 'disappearing' && value) {\n        shape.animate(\n          (ratio) => {\n            return {\n              opacity: 1 - ratio,\n              r: shape.attr('r') * (1 - ratio),\n            };\n          },\n          {\n            duration: 200,\n          },\n        );\n        label.animate(\n          (ratio) => {\n            return {\n              opacity: 1 - ratio,\n            };\n          },\n          {\n            duration: 500,\n          },\n        );\n      } else if (name === 'appearing' && value) {\n        const r = item.getModel().size / 2;\n        shape.animate(\n          (ratio) => {\n            return {\n              opacity: ratio,\n              r: r * ratio,\n              fill: shape.attr('fill'),\n            };\n          },\n          {\n            duration: 300,\n          },\n        );\n        label.animate(\n          {\n            onFrame(ratio) {\n              return {\n                opacity: ratio,\n              };\n            },\n          },\n          {\n            duration: 300,\n          },\n        );\n      } else if (name === 'dark') {\n        if (value) {\n          if (shape.attr('fill') !== '#fff') {\n            shape.oriFill = shape.attr('fill');\n            const uColor = unlightColorMap.get(shape.attr('fill'));\n            shape.attr('fill', uColor);\n          } else {\n            shape.attr('opacity', 0.2);\n            label.attr('fill', '#A3B1BF');\n          }\n        } else {\n          if (shape.attr('fill') !== '#fff') {\n            shape.attr('fill', shape.oriFill || shape.attr('fill'));\n          } else {\n            shape.attr('opacity', 1);\n            label.attr('fill', '#697B8C');\n          }\n        }\n      }\n    },\n  },\n  'circle',\n);\n\nG6.registerEdge(\n  'animate-line',\n  {\n    drawShape(cfg, group) {\n      const self = this;\n      let shapeStyle = self.getShapeStyle(cfg);\n      shapeStyle = Object.assign(shapeStyle, {\n        opacity: 0,\n        strokeOpacity: 0,\n      });\n      const keyShape = group.addShape('path', {\n        attrs: shapeStyle,\n        name: 'path-shape',\n      });\n      return keyShape;\n    },\n    afterDraw(cfg, group) {\n      const shape = group.get('children')[0];\n      shape.animate(\n        (ratio) => {\n          const opacity = ratio * cfg.style.opacity;\n          const strokeOpacity = ratio * cfg.style.strokeOpacity;\n          return {\n            opacity: ratio || opacity,\n            strokeOpacity: ratio || strokeOpacity,\n          };\n        },\n        {\n          duration: 300,\n        },\n      );\n    },\n    setState(name, value, item) {\n      const shape = item.get('keyShape');\n      if (name === 'disappearing' && value) {\n        shape.animate(\n          (ratio) => {\n            return {\n              opacity: 1 - ratio,\n              strokeOpacity: 1 - ratio,\n            };\n          },\n          {\n            duration: 200,\n          },\n        );\n      } else if (name === 'dark') {\n        if (value) shape.attr('opacity', 0.2);\n        else shape.attr('opacity', 1);\n      }\n    },\n  },\n  'line',\n);\n\ngraph = new G6.Graph({\n  container: 'container',\n  width,\n  height,\n  linkCenter: true,\n  layout: layoutCfg,\n  modes: {\n    default: ['drag-canvas'],\n  },\n  defaultNode: {\n    type: 'bubble',\n    size: 95,\n    labelCfg: {\n      position: 'center',\n      style: {\n        fill: 'white',\n        fontStyle: 'bold',\n      },\n    },\n  },\n  defaultEdge: {\n    color: '#888',\n    type: 'animate-line', //'animate-line'\n  },\n});\ngraph.get('canvas').set('localRefresh', false);\n\nfunction translate(x, y) {\n  let moveX = x;\n  let moveY = y;\n\n  /* 获得当前偏移量*/\n  const group = graph.get('group');\n  const bbox = group.getBBox();\n  const leftTopPoint = graph.getCanvasByPoint(bbox.minX, bbox.minY);\n  const rightBottomPoint = graph.getCanvasByPoint(bbox.maxX, bbox.maxY);\n  /* 如果 x 轴在区域内，不允许左右超过100 */\n  if (x < 0 && leftTopPoint.x - x > LIMIT_OVERFLOW_WIDTH) {\n    moveX = 0;\n  }\n  if (x > 0 && rightBottomPoint.x - x < width - LIMIT_OVERFLOW_WIDTH) {\n    moveX = 0;\n  }\n\n  if (y < 0 && leftTopPoint.y - y > LIMIT_OVERFLOW_HEIGHT) {\n    moveY = 0;\n  }\n  if (y > 0 && rightBottomPoint.y - y < height - LIMIT_OVERFLOW_HEIGHT) {\n    moveY = 0;\n  }\n  graph.translate(-moveX, -moveY);\n}\n\nfunction refreshDragedNodePosition(e) {\n  const model = e.item.get('model');\n  model.fx = e.x;\n  model.fy = e.y;\n}\ngraph.on('node:dragstart', (e) => {\n  graph.layout();\n  refreshDragedNodePosition(e);\n});\ngraph.on('node:drag', (e) => {\n  refreshDragedNodePosition(e);\n});\ngraph.on('node:dragend', (e) => {\n  e.item.get('model').fx = null;\n  e.item.get('model').fy = null;\n});\n\nconst loadData = (data) => {\n  const layoutController = graph.get('layoutController');\n  layoutController.layoutCfg.nodeStrength = 2500;\n  layoutController.layoutCfg.collideStrength = 0.8;\n  layoutController.layoutCfg.alphaDecay = 0.01;\n  nodes = data.nodes;\n  edges = data.edges;\n\n  showNodes = [];\n  showEdges = [];\n  nodeMap = new Map();\n  edgesMap = new Map();\n  // find the roots\n  nodes.forEach((node) => {\n    if (node.level === 0) {\n      node.color = gColors[showNodes.length % gColors.length];\n      node.style = {\n        fill: gColors[showNodes.length % gColors.length],\n        lineWidth: 0,\n      };\n      node.labelCfg = {\n        style: {\n          fontSize: 25,\n          fill: '#fff',\n          fontWeight: 300,\n        },\n      };\n      node.x = Math.random() * 800;\n      node.y = Math.random() * 800;\n      showNodes.push(node);\n    }\n    if (!node.isLeaf) {\n      const num = node.childrenNum ? `\\n(${node.childrenNum})` : '';\n      node.label = `${node.name}${num}`;\n    } else {\n      node.label = node.name;\n    }\n    nodeMap.set(node.id, node);\n  });\n\n  mapNodeSize(showNodes, 'childrenNum', [120, 180]);\n\n  // map the color to F nodes, same to its parent\n  nodes.forEach((node) => {\n    if (node.level !== 0 && !node.isLeaf) {\n      const parent = nodeMap.get(node.tags[0]);\n      node.color = parent.color;\n      node.style = {\n        fill: parent.color,\n      };\n    }\n  });\n  edges.forEach((edge) => {\n    // map the id\n    edge.id = `${edge.source}-${edge.target}`;\n    edge.style = {\n      lineWidth: 0.5,\n      opacity: 1,\n      strokeOpacity: 1,\n    };\n    edgesMap.set(edge.id, edge);\n  });\n  graph.data({\n    nodes: showNodes,\n    edges: showEdges,\n  });\n  graph.render();\n};\n\ngraph.on('node:mouseenter', (e) => {\n  const item = e.item;\n  const model = item.getModel();\n  if (model.level === 0) {\n    return;\n  }\n  highlighting = true;\n  graph.setAutoPaint(false);\n  const nodeItems = graph.getNodes();\n  const edgeItems = graph.getEdges();\n  nodeItems.forEach((node) => {\n    graph.setItemState(node, 'dark', true);\n    node.getModel().light = false;\n  });\n  graph.setItemState(item, 'dark', false);\n  model.light = true;\n  const tags = model.tags;\n  const findTagsMap = new Map();\n  let mid = 0;\n\n  let fTag = '';\n  // if the model is F node, find the leaves of it\n  if (!model.isLeaf && model.level !== 0) {\n    fTag = model.tag;\n    nodeItems.forEach((item) => {\n      const itemModel = item.getModel();\n      if (!itemModel.isLeaf) return;\n      const modelTags = itemModel.tags;\n      modelTags.forEach((mt) => {\n        const mts = mt.split('-');\n        if (mts[1] === fTag) {\n          graph.setItemState(item, 'dark', false);\n          itemModel.light = true;\n        }\n      });\n    });\n  }\n\n  // find the tags\n  tags.forEach((t) => {\n    const ts = t.split('-');\n    findTagsMap.set(ts[0], mid);\n    mid++;\n    if (ts[1]) {\n      findTagsMap.set(ts[1], mid);\n      mid++;\n    }\n  });\n  // find the nodes with tag === tags[?]\n  nodeItems.forEach((item) => {\n    const node = item.getModel();\n    if (findTagsMap.get(node.tag) !== undefined) {\n      graph.setItemState(item, 'dark', false);\n      node.light = true;\n    }\n  });\n  edgeItems.forEach((item) => {\n    const source = item.getSource().getModel();\n    const target = item.getTarget().getModel();\n    if (source.light && target.light) {\n      graph.setItemState(item, 'dark', false);\n    } else {\n      graph.setItemState(item, 'dark', true);\n    }\n  });\n  graph.paint();\n  graph.setAutoPaint(true);\n});\n\ngraph.on('node:mouseleave', () => {\n  if (highlighting) {\n    const nodeItems = graph.getNodes();\n    const edgeItems = graph.getEdges();\n    highlighting = false;\n    nodeItems.forEach((item) => {\n      graph.setItemState(item, 'dark', false);\n    });\n    edgeItems.forEach((item) => {\n      graph.setItemState(item, 'dark', false);\n    });\n  }\n});\n\nfetch('https://gw.alipayobjects.com/os/bmw-prod/fc6e64fc-be94-40fb-b9e2-2d13dd414f38.json')\n  .then((res) => res.json())\n  .then((data) => {\n    loadData(data);\n  });\n\n// click root to expand\ngraph.on('node:click', (e) => {\n  curShowNodes = [];\n  curShowEdges = [];\n  const item = e.item;\n  const model = item.getModel();\n  if (!model.isLeaf && model.level !== 0) {\n    return;\n  }\n  // if clicked a root, hide unrelated items and show the related items\n  if (model.level === 0) {\n    const layoutController = graph.get('layoutController');\n    const forceLayout = layoutController.layoutMethods[0];\n    forceLayout.forceSimulation.stop();\n    // light the level 0 nodes\n    showNodes.forEach((snode) => {\n      const item = graph.findById(snode.id);\n      graph.setItemState(item, 'dark', false);\n      if (snode.x < 0.5 * width) {\n        snode.x = 300;\n      } else {\n        snode.x = width - 300;\n      }\n    });\n    model.x = width / 2;\n    model.y = height / 2;\n    // animatively hide the items which are going to disappear\n    if (curShowEdges.length) {\n      curShowEdges.forEach((csedge) => {\n        const item = graph.findById(csedge.id);\n        item && graph.setItemState(item, 'disappearing', true);\n      });\n    }\n    curShowNodes.forEach((csnode) => {\n      const item = graph.findById(csnode.id);\n      item && graph.setItemState(item, 'disappearing', true);\n    });\n    graph.positionsAnimate();\n\n    // reset curShowNodes nad curShowEdges\n    curShowNodes = [];\n    curShowEdges = [];\n\n    // click on the same node which is the current focus node, hide the small nodes, change the layout parameters to roots view\n    if (currentFocus && currentFocus.id === model.id) {\n      currentFocus = undefined;\n      layoutController.layoutCfg.nodeStrength = 2500;\n      layoutController.layoutCfg.collideStrength = 0.8;\n      layoutController.layoutCfg.alphaDecay = 0.01;\n    } else {\n      // click other focus node, hide the current small nodes and show the related nodes\n      currentFocus = model;\n      // change data after the original items disappearing\n      const layoutController = graph.get('layoutController');\n      layoutController.layoutCfg.nodeStrength = () => {\n        return -80;\n      };\n      layoutController.layoutCfg.collideStrength = 0.2;\n      layoutController.layoutCfg.linkDistance = (d) => {\n        if (d.source.level !== 0) return 120;\n        const length = 250;\n        return length;\n      };\n      layoutController.layoutCfg.edgeStrength = () => {\n        return 2;\n      };\n\n      const tag = model.tag;\n      const findTags = [];\n      curShowNodesMap = new Map();\n      // find the nodes which are the descendants of clicked model\n      nodes.forEach((node) => {\n        if (!node.tags) return;\n        const tags = node.tags;\n        const tlength = tags.length;\n        let isChild = false;\n        const parents = [];\n        for (let i = 0; i < tlength; i++) {\n          const ts = tags[i].split('-');\n          if (ts[0] === tag) {\n            isChild = true;\n          }\n          parents.push(nodeMap.get(ts[0]));\n        }\n        if (isChild) {\n          const randomAngle = Math.random() * 2 * Math.PI;\n          node.x = model.x + (Math.cos(randomAngle) * model.size) / 2 + 10;\n          node.y = model.y + (Math.sin(randomAngle) * model.size) / 2 + 10;\n          // const dist = (model.x - node.x) * (model.x - node.x) + (model.y - node.y) * (model.y - node.y);\n\n          if (!node.style) node.style = {};\n          node.style.lineWidth = 0;\n          node.style.opacity = 1;\n          if (node.isLeaf) {\n            node.type = 'animate-circle';\n            let color = 'l(0)';\n            const parentsNum = parents.length;\n            parents.forEach((parent, i) => {\n              const parentColor = parent.color.split(' ')[1].substr(2);\n              color += ` ${i / (parentsNum - 1)}:${parentColor}`;\n            });\n            if (parentsNum === 1) {\n              color = model.color.split(' ')[1].substr(2);\n            }\n            node.color = color;\n            node.style.fill = color;\n            node.style.fill = '#fff';\n            node.style.lineWidth = 1;\n            node.size = 60;\n            node.labelCfg = {\n              style: {\n                fontSize: 11,\n                lineHeight: 19,\n                fill: '#697B8C',\n              },\n              position: 'center',\n            };\n          } else if (node.level !== 0) {\n            node.type = 'circle'; // 'bubble';\n            node.size = 95;\n            if (!node.style) node.style = {};\n            node.color = model.color;\n            node.style.fill = model.color;\n            node.labelCfg = {\n              style: {\n                fill: '#fff',\n                fontSize: 14,\n              },\n              position: 'center',\n            };\n          }\n          curShowNodes.push(node);\n          curShowNodesMap.set(node.id, node);\n\n          // add the edge connect from model to node which exists in edges\n          const edgeId = `${model.id}-${node.id}`;\n          const edge = edgesMap.get(edgeId);\n          if (edge) {\n            edge.color = model.color;\n            curShowEdges.push(edge);\n          }\n          tags.forEach((t) => {\n            const ts = t.split('-');\n            if (ts[0] !== tag) {\n              findTags.push(ts[0]);\n            }\n            if (ts[1]) {\n              findTags.push(ts[1]);\n            }\n          });\n        }\n      });\n\n      // find the nodes which are the ancestors of the current curShowNodes\n      nodes.forEach((node) => {\n        const findTagsLength = findTags.length;\n        for (let i = 0; i < findTagsLength; i++) {\n          if (node.tag === findTags[i] && curShowNodesMap.get(node.id) === undefined) {\n            curShowNodes.push(node);\n            curShowNodesMap.set(node.id, node);\n            return;\n          }\n        }\n      });\n\n      // find the edges whose target end source are in the curShowNodes\n      curShowNodes.forEach((nu, i) => {\n        const lu = nu.level;\n        curShowNodes.forEach((nv, j) => {\n          if (j <= i) return;\n          const lv = nv.level;\n          let edgeId;\n          if (lu < lv) {\n            edgeId = `${nu.id}-${nv.id}`;\n          } else {\n            edgeId = `${nv.id}-${nu.id}`;\n          }\n          let color = model.color;\n          if (nu.isLeaf) {\n            if (nv.level === 0 && nv.tag !== model.tag) color = '#DFE5EB';\n            else if (!nv.isLeaf && nv.tags[0] !== model.tag) {\n              color = '#DFE5EB';\n            }\n          } else if (nv.isLeaf) {\n            if (nu.level === 0 && nu.tag !== model.tag) color = '#DFE5EB';\n            else if (!nu.isLeaf && nu.tags[0] !== model.tag) {\n              color = '#DFE5EB';\n            }\n          }\n          const edge = edgesMap.get(edgeId);\n          if (edge) {\n            edge.color = color;\n            curShowEdges.push(edge);\n          }\n        });\n      });\n    }\n    setTimeout(() => {\n      graph.changeData({\n        nodes: showNodes.concat(curShowNodes),\n        edges: showEdges.concat(curShowEdges),\n      });\n      const nodeItems = graph.getNodes();\n      const edgeItems = graph.getEdges();\n      edgeItems.forEach((item) => {\n        graph.clearItemStates(item);\n      });\n      nodeItems.forEach((item) => {\n        graph.clearItemStates(item);\n        graph.setItemState(item, 'appearing', true);\n      });\n    }, 400);\n  }\n});\ngraph.on('canvas:click', () => {\n  currentFocus = undefined;\n  const forceLayout = graph.get('layoutController').layoutMethods[0];\n  forceLayout.forceSimulation.stop();\n  const nodeItems = graph.getNodes();\n  const edgeItems = graph.getEdges();\n  if (highlighting) {\n    highlighting = false;\n    nodeItems.forEach((item) => {\n      graph.setItemState(item, 'dark', false);\n    });\n    edgeItems.forEach((item) => {\n      graph.setItemState(item, 'dark', false);\n    });\n  } else {\n    nodeItems.forEach((item) => {\n      const model = item.getModel();\n      if (model.level === 0) {\n        graph.setItemState(item, 'dark', false);\n      } else {\n        graph.setItemState(item, 'disappearing', true);\n      }\n    });\n    edgeItems.forEach((item) => {\n      graph.setItemState(item, 'disappearing', true);\n    });\n    curShowNodes = [];\n    curShowEdges = [];\n    setTimeout(() => {\n      const layoutController = graph.get('layoutController');\n      layoutController.layoutCfg.nodeStrength = 2500;\n      layoutController.layoutCfg.collideStrength = 0.8;\n      layoutController.layoutCfg.alphaDecay = 0.01;\n\n      graph.changeData({\n        nodes: showNodes,\n        edges: showEdges,\n      });\n    }, 400);\n  }\n});\n\nif (typeof window !== 'undefined')\n  window.onresize = () => {\n    if (!graph || graph.get('destroyed')) return;\n    if (!container || !container.scrollWidth || !container.scrollHeight) return;\n    graph.changeSize(container.scrollWidth, container.scrollHeight);\n  };\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g6\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g6\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.g6);\n    global.decisionBubbles = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_g) {\n  \"use strict\";\n\n  _g = _interopRequireDefault(_g);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * by Shiwu\n   */\n  var showNodes = [];\n  var showEdges = [];\n  var curShowNodes = [];\n  var curShowEdges = [];\n  var nodes = [];\n  var edges = [];\n  var nodeMap = new Map();\n  var edgesMap = new Map();\n  var curShowNodesMap = new Map();\n  var highlighting = false;\n  var currentFocus;\n  var width = document.getElementById('container').scrollWidth;\n  var height = document.getElementById('container').scrollHeight || 500;\n  var LIMIT_OVERFLOW_WIDTH = width;\n  var LIMIT_OVERFLOW_HEIGHT = height;\n\n  var mapNodeSize = function mapNodeSize(nodes, propertyName, visualRange) {\n    var minp = 9999999999;\n    var maxp = -9999999999;\n    nodes.forEach(function (node) {\n      minp = node[propertyName] < minp ? node[propertyName] : minp;\n      maxp = node[propertyName] > maxp ? node[propertyName] : maxp;\n    });\n    var rangepLength = maxp - minp;\n    var rangevLength = visualRange[1] - visualRange[0];\n    nodes.forEach(function (node) {\n      node.size = (node[propertyName] - minp) / rangepLength * rangevLength + visualRange[0];\n    });\n  };\n\n  var lightColors = ['#8FE9FF', '#87EAEF', '#FFC9E3', '#A7C2FF', '#FFA1E3', '#FFE269', '#BFCFEE', '#FFA0C5', '#D5FF86'];\n  var darkColors = ['#7DA8FF', '#44E6C1', '#FF68A7', '#7F86FF', '#AE6CFF', '#FF5A34', '#5D7092', '#FF6565', '#6BFFDE'];\n  var uLightColors = ['#CFF6FF', '#BCFCFF', '#FFECF5', '#ECFBFF', '#EAD9FF', '#FFF8DA', '#DCE2EE', '#FFE7F0', '#EEFFCE'];\n  var uDarkColors = ['#CADBFF', '#A9FFEB', '#FFC4DD', '#CACDFF', '#FFD4F2', '#FFD3C9', '#EBF2FF', '#FFCBCB', '#CAFFF3'];\n  var gColors = [];\n  var unlightColorMap = new Map();\n  lightColors.forEach(function (lcolor, i) {\n    gColors.push('l(0) 0:' + lcolor + ' 1:' + darkColors[i]);\n    unlightColorMap.set(gColors[i], 'l(0) 0:' + uLightColors[i] + ' 1:' + uDarkColors[i]);\n  });\n  var graph;\n  var layoutCfg = {\n    type: 'force',\n    nodeSize: function nodeSize(d) {\n      return d.size / 2 + 5;\n    },\n    nodeStrength: 2500,\n    collideStrength: 0.8,\n    alphaDecay: 0.01,\n    preventOverlap: true,\n    onTick: function onTick() {\n      var nodeItems = graph.getNodes();\n      var height = graph.get('height');\n      var width = graph.get('width');\n      var padding = 10;\n      nodeItems.forEach(function (item) {\n        var model = item.getModel();\n        if (model.x > width - padding) model.x = width - padding;else if (model.x < padding) model.x = padding;\n        if (model.y > height - padding) model.y = height - padding;else if (model.y < padding) model.y = padding;\n      });\n    }\n  };\n\n  _g.default.registerBehavior('double-finger-drag-canvas', {\n    getEvents: function getEvents() {\n      return {\n        wheel: 'onWheel'\n      };\n    },\n    onWheel: function onWheel(ev) {\n      if (ev.ctrlKey) {\n        var canvas = graph.get('canvas');\n        var point = canvas.getPointByClient(ev.clientX, ev.clientY);\n        var ratio = graph.getZoom();\n\n        if (ev.wheelDelta > 0) {\n          ratio = ratio + ratio * 0.05;\n        } else {\n          ratio = ratio - ratio * 0.05;\n        }\n\n        graph.zoomTo(ratio, {\n          x: point.x,\n          y: point.y\n        });\n      } else {\n        var x = ev.deltaX || ev.movementX;\n        var y = ev.deltaY || ev.movementY || -ev.wheelDelta * 125 / 3;\n        translate(x, y);\n      }\n\n      ev.preventDefault();\n    }\n  });\n\n  _g.default.registerNode('bubble', {\n    drawShape: function drawShape(cfg, group) {\n      var self = this;\n      var r = cfg.size / 2; // a circle by path\n\n      var path = [['M', -r, 0], ['C', -r, r / 2, -r / 2, r, 0, r], ['C', r / 2, r, r, r / 2, r, 0], ['C', r, -r / 2, r / 2, -r, 0, -r], ['C', -r / 2, -r, -r, -r / 2, -r, 0], ['Z']];\n      var keyShape = group.addShape('path', {\n        attrs: {\n          x: 0,\n          y: 0,\n          path: path,\n          fill: cfg.color || 'steelblue'\n        },\n        name: 'path-shape'\n      });\n      var mask = group.addShape('path', {\n        attrs: {\n          x: 0,\n          y: 0,\n          path: path,\n          opacity: 0.25,\n          fill: cfg.color || 'steelblue',\n          shadowColor: cfg.color.split(' ')[2].substr(2),\n          shadowBlur: 40,\n          shadowOffsetX: 0,\n          shadowOffsetY: 30\n        },\n        name: 'mask-shape'\n      });\n      var spNum = 10; // split points number\n\n      var directions = [],\n          rs = [];\n      self.changeDirections(spNum, directions);\n\n      for (var i = 0; i < spNum; i++) {\n        var rr = r + directions[i] * (Math.random() * r / 1000); // +-r/6, the sign according to the directions\n\n        if (rs[i] < 0.97 * r) rs[i] = 0.97 * r;else if (rs[i] > 1.03 * r) rs[i] = 1.03 * r;\n        rs.push(rr);\n      }\n\n      keyShape.animate(function () {\n        var path = self.getBubblePath(r, spNum, directions, rs);\n        return {\n          path: path\n        };\n      }, {\n        repeat: true,\n        duration: 10000\n      });\n      var directions2 = [],\n          rs2 = [];\n      self.changeDirections(spNum, directions2);\n\n      for (var _i = 0; _i < spNum; _i++) {\n        var _rr = r + directions2[_i] * (Math.random() * r / 1000); // +-r/6, the sign according to the directions\n\n\n        if (rs2[_i] < 0.97 * r) rs2[_i] = 0.97 * r;else if (rs2[_i] > 1.03 * r) rs2[_i] = 1.03 * r;\n        rs2.push(_rr);\n      }\n\n      mask.animate(function () {\n        var path = self.getBubblePath(r, spNum, directions2, rs2);\n        return {\n          path: path\n        };\n      }, {\n        repeat: true,\n        duration: 10000\n      });\n      return keyShape;\n    },\n    changeDirections: function changeDirections(num, directions) {\n      for (var i = 0; i < num; i++) {\n        if (!directions[i]) {\n          var rand = Math.random();\n          var dire = rand > 0.5 ? 1 : -1;\n          directions.push(dire);\n        } else {\n          directions[i] = -1 * directions[i];\n        }\n      }\n\n      return directions;\n    },\n    getBubblePath: function getBubblePath(r, spNum, directions, rs) {\n      var path = [];\n      var cpNum = spNum * 2; // control points number\n\n      var unitAngle = Math.PI * 2 / spNum; // base angle for split points\n\n      var angleSum = 0;\n      var sps = [];\n      var cps = [];\n\n      for (var i = 0; i < spNum; i++) {\n        var speed = 0.001 * Math.random();\n        rs[i] = rs[i] + directions[i] * speed * r; // +-r/6, the sign according to the directions\n\n        if (rs[i] < 0.97 * r) {\n          rs[i] = 0.97 * r;\n          directions[i] = -1 * directions[i];\n        } else if (rs[i] > 1.03 * r) {\n          rs[i] = 1.03 * r;\n          directions[i] = -1 * directions[i];\n        }\n\n        var spX = rs[i] * Math.cos(angleSum);\n        var spY = rs[i] * Math.sin(angleSum);\n        sps.push({\n          x: spX,\n          y: spY\n        });\n\n        for (var j = 0; j < 2; j++) {\n          var cpAngleRand = unitAngle / 3;\n          var cpR = rs[i] / Math.cos(cpAngleRand);\n          var sign = j === 0 ? -1 : 1;\n          var x = cpR * Math.cos(angleSum + sign * cpAngleRand);\n          var y = cpR * Math.sin(angleSum + sign * cpAngleRand);\n          cps.push({\n            x: x,\n            y: y\n          });\n        }\n\n        angleSum += unitAngle;\n      }\n\n      path.push(['M', sps[0].x, sps[0].y]);\n\n      for (var _i2 = 1; _i2 < spNum; _i2++) {\n        path.push(['C', cps[2 * _i2 - 1].x, cps[2 * _i2 - 1].y, cps[2 * _i2].x, cps[2 * _i2].y, sps[_i2].x, sps[_i2].y]);\n      }\n\n      path.push(['C', cps[cpNum - 1].x, cps[cpNum - 1].y, cps[0].x, cps[0].y, sps[0].x, sps[0].y]);\n      path.push(['Z']);\n      return path;\n    },\n    setState: function setState(name, value, item) {\n      var shape = item.get('keyShape');\n\n      if (name === 'dark') {\n        if (value) {\n          if (shape.attr('fill') !== '#fff') {\n            shape.oriFill = shape.attr('fill');\n            var uColor = unlightColorMap.get(shape.attr('fill'));\n            shape.attr('fill', uColor);\n          } else {\n            shape.attr('opacity', 0.2);\n          }\n        } else {\n          if (shape.attr('fill') !== '#fff') {\n            shape.attr('fill', shape.oriFill || shape.attr('fill'));\n          } else {\n            shape.attr('opacity', 1);\n          }\n        }\n      }\n    }\n  }, 'single-node');\n\n  _g.default.registerNode('animate-circle', {\n    setState: function setState(name, value, item) {\n      var shape = item.get('keyShape');\n      var label = shape.get('parent').get('children')[1];\n\n      if (name === 'disappearing' && value) {\n        shape.animate(function (ratio) {\n          return {\n            opacity: 1 - ratio,\n            r: shape.attr('r') * (1 - ratio)\n          };\n        }, {\n          duration: 200\n        });\n        label.animate(function (ratio) {\n          return {\n            opacity: 1 - ratio\n          };\n        }, {\n          duration: 500\n        });\n      } else if (name === 'appearing' && value) {\n        var r = item.getModel().size / 2;\n        shape.animate(function (ratio) {\n          return {\n            opacity: ratio,\n            r: r * ratio,\n            fill: shape.attr('fill')\n          };\n        }, {\n          duration: 300\n        });\n        label.animate({\n          onFrame: function onFrame(ratio) {\n            return {\n              opacity: ratio\n            };\n          }\n        }, {\n          duration: 300\n        });\n      } else if (name === 'dark') {\n        if (value) {\n          if (shape.attr('fill') !== '#fff') {\n            shape.oriFill = shape.attr('fill');\n            var uColor = unlightColorMap.get(shape.attr('fill'));\n            shape.attr('fill', uColor);\n          } else {\n            shape.attr('opacity', 0.2);\n            label.attr('fill', '#A3B1BF');\n          }\n        } else {\n          if (shape.attr('fill') !== '#fff') {\n            shape.attr('fill', shape.oriFill || shape.attr('fill'));\n          } else {\n            shape.attr('opacity', 1);\n            label.attr('fill', '#697B8C');\n          }\n        }\n      }\n    }\n  }, 'circle');\n\n  _g.default.registerEdge('animate-line', {\n    drawShape: function drawShape(cfg, group) {\n      var self = this;\n      var shapeStyle = self.getShapeStyle(cfg);\n      shapeStyle = Object.assign(shapeStyle, {\n        opacity: 0,\n        strokeOpacity: 0\n      });\n      var keyShape = group.addShape('path', {\n        attrs: shapeStyle,\n        name: 'path-shape'\n      });\n      return keyShape;\n    },\n    afterDraw: function afterDraw(cfg, group) {\n      var shape = group.get('children')[0];\n      shape.animate(function (ratio) {\n        var opacity = ratio * cfg.style.opacity;\n        var strokeOpacity = ratio * cfg.style.strokeOpacity;\n        return {\n          opacity: ratio || opacity,\n          strokeOpacity: ratio || strokeOpacity\n        };\n      }, {\n        duration: 300\n      });\n    },\n    setState: function setState(name, value, item) {\n      var shape = item.get('keyShape');\n\n      if (name === 'disappearing' && value) {\n        shape.animate(function (ratio) {\n          return {\n            opacity: 1 - ratio,\n            strokeOpacity: 1 - ratio\n          };\n        }, {\n          duration: 200\n        });\n      } else if (name === 'dark') {\n        if (value) shape.attr('opacity', 0.2);else shape.attr('opacity', 1);\n      }\n    }\n  }, 'line');\n\n  graph = new _g.default.Graph({\n    container: 'container',\n    width: width,\n    height: height,\n    linkCenter: true,\n    layout: layoutCfg,\n    modes: {\n      default: ['drag-canvas']\n    },\n    defaultNode: {\n      type: 'bubble',\n      size: 95,\n      labelCfg: {\n        position: 'center',\n        style: {\n          fill: 'white',\n          fontStyle: 'bold'\n        }\n      }\n    },\n    defaultEdge: {\n      color: '#888',\n      type: 'animate-line' //'animate-line'\n\n    }\n  });\n  graph.get('canvas').set('localRefresh', false);\n\n  function translate(x, y) {\n    var moveX = x;\n    var moveY = y;\n    /* 获得当前偏移量*/\n\n    var group = graph.get('group');\n    var bbox = group.getBBox();\n    var leftTopPoint = graph.getCanvasByPoint(bbox.minX, bbox.minY);\n    var rightBottomPoint = graph.getCanvasByPoint(bbox.maxX, bbox.maxY);\n    /* 如果 x 轴在区域内，不允许左右超过100 */\n\n    if (x < 0 && leftTopPoint.x - x > LIMIT_OVERFLOW_WIDTH) {\n      moveX = 0;\n    }\n\n    if (x > 0 && rightBottomPoint.x - x < width - LIMIT_OVERFLOW_WIDTH) {\n      moveX = 0;\n    }\n\n    if (y < 0 && leftTopPoint.y - y > LIMIT_OVERFLOW_HEIGHT) {\n      moveY = 0;\n    }\n\n    if (y > 0 && rightBottomPoint.y - y < height - LIMIT_OVERFLOW_HEIGHT) {\n      moveY = 0;\n    }\n\n    graph.translate(-moveX, -moveY);\n  }\n\n  function refreshDragedNodePosition(e) {\n    var model = e.item.get('model');\n    model.fx = e.x;\n    model.fy = e.y;\n  }\n\n  graph.on('node:dragstart', function (e) {\n    graph.layout();\n    refreshDragedNodePosition(e);\n  });\n  graph.on('node:drag', function (e) {\n    refreshDragedNodePosition(e);\n  });\n  graph.on('node:dragend', function (e) {\n    e.item.get('model').fx = null;\n    e.item.get('model').fy = null;\n  });\n\n  var loadData = function loadData(data) {\n    var layoutController = graph.get('layoutController');\n    layoutController.layoutCfg.nodeStrength = 2500;\n    layoutController.layoutCfg.collideStrength = 0.8;\n    layoutController.layoutCfg.alphaDecay = 0.01;\n    nodes = data.nodes;\n    edges = data.edges;\n    showNodes = [];\n    showEdges = [];\n    nodeMap = new Map();\n    edgesMap = new Map(); // find the roots\n\n    nodes.forEach(function (node) {\n      if (node.level === 0) {\n        node.color = gColors[showNodes.length % gColors.length];\n        node.style = {\n          fill: gColors[showNodes.length % gColors.length],\n          lineWidth: 0\n        };\n        node.labelCfg = {\n          style: {\n            fontSize: 25,\n            fill: '#fff',\n            fontWeight: 300\n          }\n        };\n        node.x = Math.random() * 800;\n        node.y = Math.random() * 800;\n        showNodes.push(node);\n      }\n\n      if (!node.isLeaf) {\n        var num = node.childrenNum ? \"\\n(\".concat(node.childrenNum, \")\") : '';\n        node.label = \"\".concat(node.name).concat(num);\n      } else {\n        node.label = node.name;\n      }\n\n      nodeMap.set(node.id, node);\n    });\n    mapNodeSize(showNodes, 'childrenNum', [120, 180]); // map the color to F nodes, same to its parent\n\n    nodes.forEach(function (node) {\n      if (node.level !== 0 && !node.isLeaf) {\n        var parent = nodeMap.get(node.tags[0]);\n        node.color = parent.color;\n        node.style = {\n          fill: parent.color\n        };\n      }\n    });\n    edges.forEach(function (edge) {\n      // map the id\n      edge.id = \"\".concat(edge.source, \"-\").concat(edge.target);\n      edge.style = {\n        lineWidth: 0.5,\n        opacity: 1,\n        strokeOpacity: 1\n      };\n      edgesMap.set(edge.id, edge);\n    });\n    graph.data({\n      nodes: showNodes,\n      edges: showEdges\n    });\n    graph.render();\n  };\n\n  graph.on('node:mouseenter', function (e) {\n    var item = e.item;\n    var model = item.getModel();\n\n    if (model.level === 0) {\n      return;\n    }\n\n    highlighting = true;\n    graph.setAutoPaint(false);\n    var nodeItems = graph.getNodes();\n    var edgeItems = graph.getEdges();\n    nodeItems.forEach(function (node) {\n      graph.setItemState(node, 'dark', true);\n      node.getModel().light = false;\n    });\n    graph.setItemState(item, 'dark', false);\n    model.light = true;\n    var tags = model.tags;\n    var findTagsMap = new Map();\n    var mid = 0;\n    var fTag = ''; // if the model is F node, find the leaves of it\n\n    if (!model.isLeaf && model.level !== 0) {\n      fTag = model.tag;\n      nodeItems.forEach(function (item) {\n        var itemModel = item.getModel();\n        if (!itemModel.isLeaf) return;\n        var modelTags = itemModel.tags;\n        modelTags.forEach(function (mt) {\n          var mts = mt.split('-');\n\n          if (mts[1] === fTag) {\n            graph.setItemState(item, 'dark', false);\n            itemModel.light = true;\n          }\n        });\n      });\n    } // find the tags\n\n\n    tags.forEach(function (t) {\n      var ts = t.split('-');\n      findTagsMap.set(ts[0], mid);\n      mid++;\n\n      if (ts[1]) {\n        findTagsMap.set(ts[1], mid);\n        mid++;\n      }\n    }); // find the nodes with tag === tags[?]\n\n    nodeItems.forEach(function (item) {\n      var node = item.getModel();\n\n      if (findTagsMap.get(node.tag) !== undefined) {\n        graph.setItemState(item, 'dark', false);\n        node.light = true;\n      }\n    });\n    edgeItems.forEach(function (item) {\n      var source = item.getSource().getModel();\n      var target = item.getTarget().getModel();\n\n      if (source.light && target.light) {\n        graph.setItemState(item, 'dark', false);\n      } else {\n        graph.setItemState(item, 'dark', true);\n      }\n    });\n    graph.paint();\n    graph.setAutoPaint(true);\n  });\n  graph.on('node:mouseleave', function () {\n    if (highlighting) {\n      var nodeItems = graph.getNodes();\n      var edgeItems = graph.getEdges();\n      highlighting = false;\n      nodeItems.forEach(function (item) {\n        graph.setItemState(item, 'dark', false);\n      });\n      edgeItems.forEach(function (item) {\n        graph.setItemState(item, 'dark', false);\n      });\n    }\n  });\n  fetch('https://gw.alipayobjects.com/os/bmw-prod/fc6e64fc-be94-40fb-b9e2-2d13dd414f38.json').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    loadData(data);\n  }); // click root to expand\n\n  graph.on('node:click', function (e) {\n    curShowNodes = [];\n    curShowEdges = [];\n    var item = e.item;\n    var model = item.getModel();\n\n    if (!model.isLeaf && model.level !== 0) {\n      return;\n    } // if clicked a root, hide unrelated items and show the related items\n\n\n    if (model.level === 0) {\n      var layoutController = graph.get('layoutController');\n      var forceLayout = layoutController.layoutMethods[0];\n      forceLayout.forceSimulation.stop(); // light the level 0 nodes\n\n      showNodes.forEach(function (snode) {\n        var item = graph.findById(snode.id);\n        graph.setItemState(item, 'dark', false);\n\n        if (snode.x < 0.5 * width) {\n          snode.x = 300;\n        } else {\n          snode.x = width - 300;\n        }\n      });\n      model.x = width / 2;\n      model.y = height / 2; // animatively hide the items which are going to disappear\n\n      if (curShowEdges.length) {\n        curShowEdges.forEach(function (csedge) {\n          var item = graph.findById(csedge.id);\n          item && graph.setItemState(item, 'disappearing', true);\n        });\n      }\n\n      curShowNodes.forEach(function (csnode) {\n        var item = graph.findById(csnode.id);\n        item && graph.setItemState(item, 'disappearing', true);\n      });\n      graph.positionsAnimate(); // reset curShowNodes nad curShowEdges\n\n      curShowNodes = [];\n      curShowEdges = []; // click on the same node which is the current focus node, hide the small nodes, change the layout parameters to roots view\n\n      if (currentFocus && currentFocus.id === model.id) {\n        currentFocus = undefined;\n        layoutController.layoutCfg.nodeStrength = 2500;\n        layoutController.layoutCfg.collideStrength = 0.8;\n        layoutController.layoutCfg.alphaDecay = 0.01;\n      } else {\n        // click other focus node, hide the current small nodes and show the related nodes\n        currentFocus = model; // change data after the original items disappearing\n\n        var _layoutController = graph.get('layoutController');\n\n        _layoutController.layoutCfg.nodeStrength = function () {\n          return -80;\n        };\n\n        _layoutController.layoutCfg.collideStrength = 0.2;\n\n        _layoutController.layoutCfg.linkDistance = function (d) {\n          if (d.source.level !== 0) return 120;\n          var length = 250;\n          return length;\n        };\n\n        _layoutController.layoutCfg.edgeStrength = function () {\n          return 2;\n        };\n\n        var tag = model.tag;\n        var findTags = [];\n        curShowNodesMap = new Map(); // find the nodes which are the descendants of clicked model\n\n        nodes.forEach(function (node) {\n          if (!node.tags) return;\n          var tags = node.tags;\n          var tlength = tags.length;\n          var isChild = false;\n          var parents = [];\n\n          for (var i = 0; i < tlength; i++) {\n            var ts = tags[i].split('-');\n\n            if (ts[0] === tag) {\n              isChild = true;\n            }\n\n            parents.push(nodeMap.get(ts[0]));\n          }\n\n          if (isChild) {\n            var randomAngle = Math.random() * 2 * Math.PI;\n            node.x = model.x + Math.cos(randomAngle) * model.size / 2 + 10;\n            node.y = model.y + Math.sin(randomAngle) * model.size / 2 + 10; // const dist = (model.x - node.x) * (model.x - node.x) + (model.y - node.y) * (model.y - node.y);\n\n            if (!node.style) node.style = {};\n            node.style.lineWidth = 0;\n            node.style.opacity = 1;\n\n            if (node.isLeaf) {\n              node.type = 'animate-circle';\n              var color = 'l(0)';\n              var parentsNum = parents.length;\n              parents.forEach(function (parent, i) {\n                var parentColor = parent.color.split(' ')[1].substr(2);\n                color += \" \".concat(i / (parentsNum - 1), \":\").concat(parentColor);\n              });\n\n              if (parentsNum === 1) {\n                color = model.color.split(' ')[1].substr(2);\n              }\n\n              node.color = color;\n              node.style.fill = color;\n              node.style.fill = '#fff';\n              node.style.lineWidth = 1;\n              node.size = 60;\n              node.labelCfg = {\n                style: {\n                  fontSize: 11,\n                  lineHeight: 19,\n                  fill: '#697B8C'\n                },\n                position: 'center'\n              };\n            } else if (node.level !== 0) {\n              node.type = 'circle'; // 'bubble';\n\n              node.size = 95;\n              if (!node.style) node.style = {};\n              node.color = model.color;\n              node.style.fill = model.color;\n              node.labelCfg = {\n                style: {\n                  fill: '#fff',\n                  fontSize: 14\n                },\n                position: 'center'\n              };\n            }\n\n            curShowNodes.push(node);\n            curShowNodesMap.set(node.id, node); // add the edge connect from model to node which exists in edges\n\n            var edgeId = \"\".concat(model.id, \"-\").concat(node.id);\n            var edge = edgesMap.get(edgeId);\n\n            if (edge) {\n              edge.color = model.color;\n              curShowEdges.push(edge);\n            }\n\n            tags.forEach(function (t) {\n              var ts = t.split('-');\n\n              if (ts[0] !== tag) {\n                findTags.push(ts[0]);\n              }\n\n              if (ts[1]) {\n                findTags.push(ts[1]);\n              }\n            });\n          }\n        }); // find the nodes which are the ancestors of the current curShowNodes\n\n        nodes.forEach(function (node) {\n          var findTagsLength = findTags.length;\n\n          for (var i = 0; i < findTagsLength; i++) {\n            if (node.tag === findTags[i] && curShowNodesMap.get(node.id) === undefined) {\n              curShowNodes.push(node);\n              curShowNodesMap.set(node.id, node);\n              return;\n            }\n          }\n        }); // find the edges whose target end source are in the curShowNodes\n\n        curShowNodes.forEach(function (nu, i) {\n          var lu = nu.level;\n          curShowNodes.forEach(function (nv, j) {\n            if (j <= i) return;\n            var lv = nv.level;\n            var edgeId;\n\n            if (lu < lv) {\n              edgeId = \"\".concat(nu.id, \"-\").concat(nv.id);\n            } else {\n              edgeId = \"\".concat(nv.id, \"-\").concat(nu.id);\n            }\n\n            var color = model.color;\n\n            if (nu.isLeaf) {\n              if (nv.level === 0 && nv.tag !== model.tag) color = '#DFE5EB';else if (!nv.isLeaf && nv.tags[0] !== model.tag) {\n                color = '#DFE5EB';\n              }\n            } else if (nv.isLeaf) {\n              if (nu.level === 0 && nu.tag !== model.tag) color = '#DFE5EB';else if (!nu.isLeaf && nu.tags[0] !== model.tag) {\n                color = '#DFE5EB';\n              }\n            }\n\n            var edge = edgesMap.get(edgeId);\n\n            if (edge) {\n              edge.color = color;\n              curShowEdges.push(edge);\n            }\n          });\n        });\n      }\n\n      setTimeout(function () {\n        graph.changeData({\n          nodes: showNodes.concat(curShowNodes),\n          edges: showEdges.concat(curShowEdges)\n        });\n        var nodeItems = graph.getNodes();\n        var edgeItems = graph.getEdges();\n        edgeItems.forEach(function (item) {\n          graph.clearItemStates(item);\n        });\n        nodeItems.forEach(function (item) {\n          graph.clearItemStates(item);\n          graph.setItemState(item, 'appearing', true);\n        });\n      }, 400);\n    }\n  });\n  graph.on('canvas:click', function () {\n    currentFocus = undefined;\n    var forceLayout = graph.get('layoutController').layoutMethods[0];\n    forceLayout.forceSimulation.stop();\n    var nodeItems = graph.getNodes();\n    var edgeItems = graph.getEdges();\n\n    if (highlighting) {\n      highlighting = false;\n      nodeItems.forEach(function (item) {\n        graph.setItemState(item, 'dark', false);\n      });\n      edgeItems.forEach(function (item) {\n        graph.setItemState(item, 'dark', false);\n      });\n    } else {\n      nodeItems.forEach(function (item) {\n        var model = item.getModel();\n\n        if (model.level === 0) {\n          graph.setItemState(item, 'dark', false);\n        } else {\n          graph.setItemState(item, 'disappearing', true);\n        }\n      });\n      edgeItems.forEach(function (item) {\n        graph.setItemState(item, 'disappearing', true);\n      });\n      curShowNodes = [];\n      curShowEdges = [];\n      setTimeout(function () {\n        var layoutController = graph.get('layoutController');\n        layoutController.layoutCfg.nodeStrength = 2500;\n        layoutController.layoutCfg.collideStrength = 0.8;\n        layoutController.layoutCfg.alphaDecay = 0.01;\n        graph.changeData({\n          nodes: showNodes,\n          edges: showEdges\n        });\n      }, 400);\n    }\n  });\n  if (typeof window !== 'undefined') window.onresize = function () {\n    if (!graph || graph.get('destroyed')) return;\n    if (!container || !container.scrollWidth || !container.scrollHeight) return;\n    graph.changeSize(container.scrollWidth, container.scrollHeight);\n  };\n});"},{"relativePath":"case/graphDemos/demo/simplifyCluster.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/simplifyCluster.js","order":4,"filename":"simplifyCluster.js","title":{"zh":"聚类的折叠/扩展","en":"Collapse/Expand Cluster"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*yU5sRLivdLIAAAAAAAAAAABkARQnAQ","source":"import G6 from '@antv/g6';\nimport insertCss from 'insert-css';\n\ninsertCss(`\n  .g6-tooltip {\n    border: 1px solid #e2e2e2;\n    border-radius: 4px;\n    font-size: 12px;\n    color: #545454;\n    background-color: rgba(255, 255, 255, 0.9);\n    padding: 10px 8px;\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\n  }\n`);\n\n/**\n * 该示例演示 Fruchterman 布局算法的聚类效果，以及点击交互进行聚类的聚合和扩散效果\n * by 十吾\n */\nconst descriptionDiv = document.createElement('div');\ndescriptionDiv.innerHTML = 'Reading data & Doing layout......';\nconst container = document.getElementById('container');\ncontainer.appendChild(descriptionDiv);\nconst width = container.scrollWidth;\nconst height = container.scrollHeight - 30;\n\nconst colors = ['#f5222d', '#faad14', '#a0d911', '#13c2c2', '#1890ff', '#b37feb', '#eb2f96'];\nconst beginColor = '#5b8c00'; // green\nconst endColor = '#ff4d4f'; // red\n\nfetch('https://gw.alipayobjects.com/os/basement_prod/7bacd7d1-4119-4ac1-8be3-4c4b9bcbc25f.json')\n  .then((res) => res.json())\n  .then((data) => {\n    const nodes = data.nodes;\n    const edges = data.edges;\n\n    const nodeMap = new Map();\n    const clusterMap = new Map();\n    let cidx = 0;\n    nodes.forEach(function (n) {\n      nodeMap.set(n.id, n);\n      let region = n.region.split(' ');\n      if (n.region === 'East Asia') region = n.region;\n      else region = region[region.length - 1];\n\n      if (clusterMap.get(region) === undefined) {\n        clusterMap.set(region, cidx);\n        cidx++;\n      }\n      const clusterId = clusterMap.get(region);\n      const color = colors[clusterId % colors.length];\n      n.style = {\n        color,\n        fill: color,\n        stroke: '#666',\n        lineWidth: 0.6,\n      };\n      n.cluster = clusterId;\n      n.importValue = 0;\n      n.exportValue = 0;\n    });\n    // map the value of\n    edges.forEach(function (e) {\n      if (e.value === '') e.value = 0;\n      const v = parseFloat(e.value);\n      nodeMap.get(e.source).exportValue += v;\n      nodeMap.get(e.target).importValue += v;\n    });\n    mapValueToProp(nodes, 'exportValue', 'size', [2, 12]);\n    const graph = new G6.Graph({\n      container: 'container',\n      width,\n      height,\n      layout: {\n        type: 'fruchterman',\n        maxIteration: 8000,\n        gravity: 10,\n        clustering: true,\n        clusterGravity: 30,\n        workerEnabled: true,\n      },\n      fitView: true,\n      linkCenter: true,\n      defaultNode: {\n        type: 'circle',\n        size: 5,\n      },\n      defaultEdge: {\n        type: 'quadratic',\n      },\n      modes: {\n        default: [\n          'drag-node',\n          'drag-canvas',\n          {\n            type: 'tooltip',\n            formatText: function formatText(model) {\n              let name = '';\n              let countries = '';\n              if (model.name) name = model.name + '<br/>';\n              if (model.countries) countries = '<br/>Number of Countries: ' + model.countries;\n              const text = `${name} Export Value: ${model.exportValue}(1000USD)<br/>Region: ${model.region}<br/>Cluster: ${model.cluster} ${countries}`;\n              return text;\n            },\n\n            shouldUpdate: function shouldUpdate() {\n              return true;\n            },\n          },\n        ],\n      },\n    });\n\n    graph.on('afterlayout', function () {\n      descriptionDiv.innerHTML = 'Done!';\n    });\n\n    graph.data(data);\n    graph.render();\n\n    const edgeItems = graph.getEdges();\n    edgeItems.forEach(function (e) {\n      const lineWidth = 0.4;\n      const strokeOpacity = 0.2;\n      let stroke = 'l(0) 0:' + beginColor + ' 1:' + endColor;\n      const sourceModel = e.getSource().getModel();\n      const targetModel = e.getTarget().getModel();\n      if (sourceModel.x > targetModel.x) {\n        stroke = 'l(0) 0:' + endColor + ' 1:' + beginColor;\n      }\n      e.update({\n        style: {\n          lineWidth,\n          strokeOpacity,\n          stroke,\n        },\n      });\n    });\n    graph.paint();\n\n    graph.on('node:click', function (e) {\n      const targetItem = e.item;\n      const model = targetItem.getModel();\n      const graphEdges = graph.getEdges();\n      const graphNodes = graph.getNodes();\n      // click on the cluster node\n      if (model.id.substr(0, 7) === 'cluster') {\n        graphNodes.forEach(function (gn) {\n          const gnModel = gn.getModel();\n          // show the common nodes\n          if (gnModel.cluster === model.cluster && gnModel.id.substr(0, 7) !== 'cluster') {\n            gn.show();\n          }\n          // remove the cluster nodes\n          if (gnModel.id === model.id) graph.removeItem(gn);\n        });\n\n        graphEdges.forEach(function (ge) {\n          const sourceModel = ge.get('sourceNode').getModel();\n          const targetModel = ge.get('targetNode').getModel();\n          // show the common edges\n          if (\n            (sourceModel.cluster === model.cluster && sourceModel.id.substr(0, 7) !== 'cluster') ||\n            (targetModel.cluster === model.cluster && targetModel.id.substr(0, 7) !== 'cluster')\n          ) {\n            ge.show();\n            // add the edges to other cluster nodes\n            if (!ge.get('sourceNode').get('visible') && sourceModel.cluster !== model.cluster) {\n              let c1 = beginColor,\n                c2 = endColor;\n              if (model.x > targetModel.x) {\n                c1 = endColor;\n                c2 = beginColor;\n              }\n              graph.addItem('edge', {\n                source: 'cluster' + sourceModel.cluster,\n                target: targetModel.id,\n                id: 'cluster-edge-' + ge.id,\n                style: {\n                  stroke: 'l(0) 0:' + c1 + ' 1:' + c2,\n                  lineWidth: 0.4,\n                  strokeOpacity: 0.2,\n                },\n              });\n            } else if (\n              ge.get('targetNode').get('visible') &&\n              targetModel.cluster !== model.cluster\n            ) {\n              let _c = beginColor,\n                _c2 = endColor;\n              if (sourceModel.x > model.x) {\n                _c = endColor;\n                _c2 = beginColor;\n              }\n              graph.addItem('edge', {\n                source: sourceModel.id,\n                target: 'cluster' + targetModel.id,\n                id: 'cluster-edge-' + ge.id,\n                style: {\n                  stroke: 'l(0) 0:' + _c + ' 1:' + _c2,\n                  lineWidth: 0.4,\n                  strokeOpacity: 0.2,\n                },\n              });\n            }\n            // hide the edges to the common nodes in other clusters\n            if (!ge.get('sourceNode').get('visible') || !ge.get('targetNode').get('visible')) {\n              ge.hide();\n            }\n          }\n          // remove the cluster edges\n          if (sourceModel.id === model.id || targetModel.id === model.id) {\n            graph.removeItem(ge);\n          }\n        });\n      } else {\n        // click on the common node, cllapse them\n        // calculate the cluster center\n        const center = {\n          x: 0,\n          y: 0,\n          count: 0,\n          exportValue: 0,\n        };\n        nodes.forEach(function (n) {\n          if (n.cluster === model.cluster) {\n            center.x += n.x;\n            center.y += n.y;\n            center.count++;\n            center.exportValue += n.exportValue;\n          }\n        });\n        center.x /= center.count;\n        center.y /= center.count;\n        // add cluster node on the center\n        const size = center.count * 1;\n        const clusterNodeId = 'cluster' + model.cluster;\n        const color = colors[model.cluster % colors.length];\n        const regionStrs = model.region.split(' ');\n        let region = regionStrs[regionStrs.length - 1];\n        if (model.region === 'East Asia') region = model.region;\n        let labelPosition = 'center';\n        if (region.length > size) labelPosition = 'left';\n        graph.addItem('node', {\n          x: center.x,\n          y: center.y,\n          id: clusterNodeId,\n          cluster: model.cluster,\n          region,\n          countries: center.count,\n          exportValue: center.exportValue,\n          style: {\n            color,\n            fill: color,\n            stroke: '#666',\n            lineWidth: 0.6,\n          },\n          size,\n          label: region,\n          labelCfg: {\n            style: {\n              fontSize: 8.5,\n            },\n            position: labelPosition,\n          },\n        });\n\n        // add edges about the cluster\n        graphEdges.forEach(function (ge) {\n          const sourceModel = ge.get('sourceNode').getModel();\n          const targetModel = ge.get('targetNode').getModel();\n          if (!ge.get('sourceNode').get('visible') || !ge.get('targetNode').get('visible')) return;\n          if (sourceModel.cluster === model.cluster && targetModel.cluster !== model.cluster) {\n            let c1 = beginColor,\n              c2 = endColor;\n            if (center.x > targetModel.x) {\n              c1 = endColor;\n              c2 = beginColor;\n            }\n            graph.addItem('edge', {\n              source: clusterNodeId,\n              target: targetModel.id,\n              id: 'cluster-edge-' + ge.id,\n              style: {\n                stroke: 'l(0) 0:' + c1 + ' 1:' + c2,\n                lineWidth: 0.4,\n                strokeOpacity: 0.2,\n              },\n            });\n          } else if (\n            targetModel.cluster === model.cluster &&\n            sourceModel.cluster !== model.cluster\n          ) {\n            let _c3 = beginColor,\n              _c4 = endColor;\n            if (sourceModel.x > center.x) {\n              _c3 = endColor;\n              _c4 = beginColor;\n            }\n            graph.addItem('edge', {\n              source: sourceModel.id,\n              target: clusterNodeId,\n              id: 'cluster-edge-' + ge.id,\n              style: {\n                stroke: 'l(0) 0:' + _c3 + ' 1:' + _c4,\n                lineWidth: 0.4,\n                strokeOpacity: 0.2,\n              },\n            });\n          }\n        });\n\n        // hide the common nodes in the cluster\n        graphNodes.forEach(function (gn) {\n          if (\n            gn.getModel().cluster === model.cluster &&\n            gn.getModel().id.substr(0, 7) !== 'cluster'\n          )\n            gn.hide();\n        });\n        // hide the common edges about cluster\n        graphEdges.forEach(function (ge) {\n          if (!ge.get('sourceNode').get('visible') || !ge.get('targetNode').get('visible'))\n            ge.hide();\n        });\n      }\n    });\n    if (typeof window !== 'undefined')\n      window.onresize = () => {\n        if (!graph || graph.get('destroyed')) return;\n        if (!container || !container.scrollWidth || !container.scrollHeight) return;\n        graph.changeSize(container.scrollWidth, container.scrollHeight);\n      };\n  });\n\nfunction mapValueToProp(items, valueName, propName, range) {\n  const valueRange = [9999999999, -9999999999];\n  items.forEach(function (n) {\n    if (n[valueName] > valueRange[1]) valueRange[1] = n[valueName];\n    if (n[valueName] < valueRange[0]) valueRange[0] = n[valueName];\n  });\n  const valueLength = valueRange[1] - valueRange[0];\n  const rLength = range[1] - range[0];\n  const propNameStrs = propName.split('.');\n  if (propNameStrs[0] === 'style' && propNameStrs.length > 1) {\n    items.forEach(function (n) {\n      if (n.style === undefined) n.style = {};\n      n.style[propNameStrs[1]] =\n        (rLength * (n[valueName] - valueRange[0])) / valueLength + range[0];\n    });\n  } else {\n    items.forEach(function (n) {\n      n[propNameStrs[0]] = (rLength * (n[valueName] - valueRange[0])) / valueLength + range[0];\n    });\n  }\n}\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g6\", \"insert-css\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g6\"), require(\"insert-css\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.g6, global.insertCss);\n    global.simplifyCluster = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_g, _insertCss) {\n  \"use strict\";\n\n  _g = _interopRequireDefault(_g);\n  _insertCss = _interopRequireDefault(_insertCss);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  (0, _insertCss.default)(\"\\n  .g6-tooltip {\\n    border: 1px solid #e2e2e2;\\n    border-radius: 4px;\\n    font-size: 12px;\\n    color: #545454;\\n    background-color: rgba(255, 255, 255, 0.9);\\n    padding: 10px 8px;\\n    box-shadow: rgb(174, 174, 174) 0px 0px 10px;\\n  }\\n\");\n  /**\n   * 该示例演示 Fruchterman 布局算法的聚类效果，以及点击交互进行聚类的聚合和扩散效果\n   * by 十吾\n   */\n\n  var descriptionDiv = document.createElement('div');\n  descriptionDiv.innerHTML = 'Reading data & Doing layout......';\n  var container = document.getElementById('container');\n  container.appendChild(descriptionDiv);\n  var width = container.scrollWidth;\n  var height = container.scrollHeight - 30;\n  var colors = ['#f5222d', '#faad14', '#a0d911', '#13c2c2', '#1890ff', '#b37feb', '#eb2f96'];\n  var beginColor = '#5b8c00'; // green\n\n  var endColor = '#ff4d4f'; // red\n\n  fetch('https://gw.alipayobjects.com/os/basement_prod/7bacd7d1-4119-4ac1-8be3-4c4b9bcbc25f.json').then(function (res) {\n    return res.json();\n  }).then(function (data) {\n    var nodes = data.nodes;\n    var edges = data.edges;\n    var nodeMap = new Map();\n    var clusterMap = new Map();\n    var cidx = 0;\n    nodes.forEach(function (n) {\n      nodeMap.set(n.id, n);\n      var region = n.region.split(' ');\n      if (n.region === 'East Asia') region = n.region;else region = region[region.length - 1];\n\n      if (clusterMap.get(region) === undefined) {\n        clusterMap.set(region, cidx);\n        cidx++;\n      }\n\n      var clusterId = clusterMap.get(region);\n      var color = colors[clusterId % colors.length];\n      n.style = {\n        color: color,\n        fill: color,\n        stroke: '#666',\n        lineWidth: 0.6\n      };\n      n.cluster = clusterId;\n      n.importValue = 0;\n      n.exportValue = 0;\n    }); // map the value of\n\n    edges.forEach(function (e) {\n      if (e.value === '') e.value = 0;\n      var v = parseFloat(e.value);\n      nodeMap.get(e.source).exportValue += v;\n      nodeMap.get(e.target).importValue += v;\n    });\n    mapValueToProp(nodes, 'exportValue', 'size', [2, 12]);\n    var graph = new _g.default.Graph({\n      container: 'container',\n      width: width,\n      height: height,\n      layout: {\n        type: 'fruchterman',\n        maxIteration: 8000,\n        gravity: 10,\n        clustering: true,\n        clusterGravity: 30,\n        workerEnabled: true\n      },\n      fitView: true,\n      linkCenter: true,\n      defaultNode: {\n        type: 'circle',\n        size: 5\n      },\n      defaultEdge: {\n        type: 'quadratic'\n      },\n      modes: {\n        default: ['drag-node', 'drag-canvas', {\n          type: 'tooltip',\n          formatText: function formatText(model) {\n            var name = '';\n            var countries = '';\n            if (model.name) name = model.name + '<br/>';\n            if (model.countries) countries = '<br/>Number of Countries: ' + model.countries;\n            var text = \"\".concat(name, \" Export Value: \").concat(model.exportValue, \"(1000USD)<br/>Region: \").concat(model.region, \"<br/>Cluster: \").concat(model.cluster, \" \").concat(countries);\n            return text;\n          },\n          shouldUpdate: function shouldUpdate() {\n            return true;\n          }\n        }]\n      }\n    });\n    graph.on('afterlayout', function () {\n      descriptionDiv.innerHTML = 'Done!';\n    });\n    graph.data(data);\n    graph.render();\n    var edgeItems = graph.getEdges();\n    edgeItems.forEach(function (e) {\n      var lineWidth = 0.4;\n      var strokeOpacity = 0.2;\n      var stroke = 'l(0) 0:' + beginColor + ' 1:' + endColor;\n      var sourceModel = e.getSource().getModel();\n      var targetModel = e.getTarget().getModel();\n\n      if (sourceModel.x > targetModel.x) {\n        stroke = 'l(0) 0:' + endColor + ' 1:' + beginColor;\n      }\n\n      e.update({\n        style: {\n          lineWidth: lineWidth,\n          strokeOpacity: strokeOpacity,\n          stroke: stroke\n        }\n      });\n    });\n    graph.paint();\n    graph.on('node:click', function (e) {\n      var targetItem = e.item;\n      var model = targetItem.getModel();\n      var graphEdges = graph.getEdges();\n      var graphNodes = graph.getNodes(); // click on the cluster node\n\n      if (model.id.substr(0, 7) === 'cluster') {\n        graphNodes.forEach(function (gn) {\n          var gnModel = gn.getModel(); // show the common nodes\n\n          if (gnModel.cluster === model.cluster && gnModel.id.substr(0, 7) !== 'cluster') {\n            gn.show();\n          } // remove the cluster nodes\n\n\n          if (gnModel.id === model.id) graph.removeItem(gn);\n        });\n        graphEdges.forEach(function (ge) {\n          var sourceModel = ge.get('sourceNode').getModel();\n          var targetModel = ge.get('targetNode').getModel(); // show the common edges\n\n          if (sourceModel.cluster === model.cluster && sourceModel.id.substr(0, 7) !== 'cluster' || targetModel.cluster === model.cluster && targetModel.id.substr(0, 7) !== 'cluster') {\n            ge.show(); // add the edges to other cluster nodes\n\n            if (!ge.get('sourceNode').get('visible') && sourceModel.cluster !== model.cluster) {\n              var c1 = beginColor,\n                  c2 = endColor;\n\n              if (model.x > targetModel.x) {\n                c1 = endColor;\n                c2 = beginColor;\n              }\n\n              graph.addItem('edge', {\n                source: 'cluster' + sourceModel.cluster,\n                target: targetModel.id,\n                id: 'cluster-edge-' + ge.id,\n                style: {\n                  stroke: 'l(0) 0:' + c1 + ' 1:' + c2,\n                  lineWidth: 0.4,\n                  strokeOpacity: 0.2\n                }\n              });\n            } else if (ge.get('targetNode').get('visible') && targetModel.cluster !== model.cluster) {\n              var _c = beginColor,\n                  _c2 = endColor;\n\n              if (sourceModel.x > model.x) {\n                _c = endColor;\n                _c2 = beginColor;\n              }\n\n              graph.addItem('edge', {\n                source: sourceModel.id,\n                target: 'cluster' + targetModel.id,\n                id: 'cluster-edge-' + ge.id,\n                style: {\n                  stroke: 'l(0) 0:' + _c + ' 1:' + _c2,\n                  lineWidth: 0.4,\n                  strokeOpacity: 0.2\n                }\n              });\n            } // hide the edges to the common nodes in other clusters\n\n\n            if (!ge.get('sourceNode').get('visible') || !ge.get('targetNode').get('visible')) {\n              ge.hide();\n            }\n          } // remove the cluster edges\n\n\n          if (sourceModel.id === model.id || targetModel.id === model.id) {\n            graph.removeItem(ge);\n          }\n        });\n      } else {\n        // click on the common node, cllapse them\n        // calculate the cluster center\n        var center = {\n          x: 0,\n          y: 0,\n          count: 0,\n          exportValue: 0\n        };\n        nodes.forEach(function (n) {\n          if (n.cluster === model.cluster) {\n            center.x += n.x;\n            center.y += n.y;\n            center.count++;\n            center.exportValue += n.exportValue;\n          }\n        });\n        center.x /= center.count;\n        center.y /= center.count; // add cluster node on the center\n\n        var size = center.count * 1;\n        var clusterNodeId = 'cluster' + model.cluster;\n        var color = colors[model.cluster % colors.length];\n        var regionStrs = model.region.split(' ');\n        var region = regionStrs[regionStrs.length - 1];\n        if (model.region === 'East Asia') region = model.region;\n        var labelPosition = 'center';\n        if (region.length > size) labelPosition = 'left';\n        graph.addItem('node', {\n          x: center.x,\n          y: center.y,\n          id: clusterNodeId,\n          cluster: model.cluster,\n          region: region,\n          countries: center.count,\n          exportValue: center.exportValue,\n          style: {\n            color: color,\n            fill: color,\n            stroke: '#666',\n            lineWidth: 0.6\n          },\n          size: size,\n          label: region,\n          labelCfg: {\n            style: {\n              fontSize: 8.5\n            },\n            position: labelPosition\n          }\n        }); // add edges about the cluster\n\n        graphEdges.forEach(function (ge) {\n          var sourceModel = ge.get('sourceNode').getModel();\n          var targetModel = ge.get('targetNode').getModel();\n          if (!ge.get('sourceNode').get('visible') || !ge.get('targetNode').get('visible')) return;\n\n          if (sourceModel.cluster === model.cluster && targetModel.cluster !== model.cluster) {\n            var c1 = beginColor,\n                c2 = endColor;\n\n            if (center.x > targetModel.x) {\n              c1 = endColor;\n              c2 = beginColor;\n            }\n\n            graph.addItem('edge', {\n              source: clusterNodeId,\n              target: targetModel.id,\n              id: 'cluster-edge-' + ge.id,\n              style: {\n                stroke: 'l(0) 0:' + c1 + ' 1:' + c2,\n                lineWidth: 0.4,\n                strokeOpacity: 0.2\n              }\n            });\n          } else if (targetModel.cluster === model.cluster && sourceModel.cluster !== model.cluster) {\n            var _c3 = beginColor,\n                _c4 = endColor;\n\n            if (sourceModel.x > center.x) {\n              _c3 = endColor;\n              _c4 = beginColor;\n            }\n\n            graph.addItem('edge', {\n              source: sourceModel.id,\n              target: clusterNodeId,\n              id: 'cluster-edge-' + ge.id,\n              style: {\n                stroke: 'l(0) 0:' + _c3 + ' 1:' + _c4,\n                lineWidth: 0.4,\n                strokeOpacity: 0.2\n              }\n            });\n          }\n        }); // hide the common nodes in the cluster\n\n        graphNodes.forEach(function (gn) {\n          if (gn.getModel().cluster === model.cluster && gn.getModel().id.substr(0, 7) !== 'cluster') gn.hide();\n        }); // hide the common edges about cluster\n\n        graphEdges.forEach(function (ge) {\n          if (!ge.get('sourceNode').get('visible') || !ge.get('targetNode').get('visible')) ge.hide();\n        });\n      }\n    });\n    if (typeof window !== 'undefined') window.onresize = function () {\n      if (!graph || graph.get('destroyed')) return;\n      if (!container || !container.scrollWidth || !container.scrollHeight) return;\n      graph.changeSize(container.scrollWidth, container.scrollHeight);\n    };\n  });\n\n  function mapValueToProp(items, valueName, propName, range) {\n    var valueRange = [9999999999, -9999999999];\n    items.forEach(function (n) {\n      if (n[valueName] > valueRange[1]) valueRange[1] = n[valueName];\n      if (n[valueName] < valueRange[0]) valueRange[0] = n[valueName];\n    });\n    var valueLength = valueRange[1] - valueRange[0];\n    var rLength = range[1] - range[0];\n    var propNameStrs = propName.split('.');\n\n    if (propNameStrs[0] === 'style' && propNameStrs.length > 1) {\n      items.forEach(function (n) {\n        if (n.style === undefined) n.style = {};\n        n.style[propNameStrs[1]] = rLength * (n[valueName] - valueRange[0]) / valueLength + range[0];\n      });\n    } else {\n      items.forEach(function (n) {\n        n[propNameStrs[0]] = rLength * (n[valueName] - valueRange[0]) / valueLength + range[0];\n      });\n    }\n  }\n});"},{"relativePath":"case/graphDemos/demo/donutTransfer.js","absolutePath":"/Users/shiwu/code/G6-2021/G6/packages/site/examples/case/graphDemos/demo/donutTransfer.js","order":5,"filename":"donutTransfer.js","title":{"zh":"甜甜圈转账图","en":"Donut Transfer"},"screenshot":"https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*YK6yRIfKQaIAAAAAAAAAAAAAARQnAQ","source":"import G6 from '@antv/g6';\n\n/**\n * by Shiwu\n */\n\nconst data = {\n  nodes: [\n    {\n      id: 'person A',\n      label: 'person A',\n      // the attributes for drawing donut\n      donutAttrs: {\n        'income': 10,\n        'outcome': 20,\n        'unknown': 25\n      },\n    },\n    {\n      id: 'person B',\n      label: 'person B',\n      donutAttrs: {\n        'income': 20,\n        'outcome': 10,\n        'unknown': 5\n      },\n    },\n    {\n      id: 'person C',\n      label: 'person C',\n      donutAttrs: {\n        'income': 200,\n        'outcome': 20,\n        'unknown': 25\n      },\n    },\n    {\n      id: 'person D',\n      label: 'person D',\n      donutAttrs: {\n        'income': 50,\n        'outcome': 10,\n        'unknown': 15\n      },\n    },\n    {\n      id: 'person E',\n      label: 'person E',\n      donutAttrs: {\n        'income': 80,\n        'outcome': 40,\n        'unknown': 45\n      },\n    },\n    {\n      id: 'person F',\n      label: 'person F',\n      donutAttrs: {\n        'income': 90,\n        'outcome': 110,\n        'unknown': 15\n      },\n    },\n  ],\n  edges: [\n    {source: 'person C', target: 'person F', size: 10},\n    {source: 'person B', target: 'person A', size: 5},\n    {source: 'person D', target: 'person E', size: 20},\n    {source: 'person D', target: 'person C', size: 5},\n    {source: 'person B', target: 'person C', size: 10},\n    {source: 'person A', target: 'person C', size: 5},\n  ]\n};\n\ndata.edges.forEach(edge=> {\n  edge.label = `Transfer $${edge.size}`\n})\n\nconst colors = {\n  'income': '#61DDAA',\n  'outcome': '#F08BB4',\n  'unknown': '#65789B'\n}\n\ndata.nodes.forEach(node => {\n  node.donutColorMap = colors;\n  node.size = 0;\n  Object.keys(node.donutAttrs).forEach(key => {\n    node.size += node.donutAttrs[key];\n  })\n  node.size = Math.sqrt(node.size) * 5\n})\n\n\nconst legendData = {\n  nodes: [{\n    id: 'income',\n    label: 'Income',\n    order: 0,\n    style: {\n      fill: '#61DDAA',\n    }\n  }, {\n    id: 'outcome',\n    label: 'Outcome',\n    order: 2,\n    style: {\n      fill: '#F08BB4',\n    }\n  }, {\n    id: 'unknown',\n    label: 'Unknown',\n    order: 2,\n    style: {\n      fill: '#65789B',\n    }\n  }]\n}\nconst legend = new G6.Legend({\n  data: legendData,\n  align: 'center',\n  layout: 'horizontal', // vertical\n  position: 'bottom-left',\n  vertiSep: 12,\n  horiSep: 24,\n  offsetY: -24,\n  padding: [4, 16, 8, 16],\n  containerStyle: {\n    fill: '#ccc',\n    lineWidth: 1\n  },\n  title: ' ',\n  titleConfig: {\n    offsetY: -8,\n  },\n});\n\n\nconst width = document.getElementById('container').scrollWidth;\nconst height = document.getElementById('container').scrollHeight || 500;\nconst graph = new G6.Graph({\n  container: 'container',\n  width,\n  height,\n  // translate the graph to align the canvas's center, support by v3.5.1\n  fitCenter: true,\n  plugins: [legend],\n  modes: {\n    default: ['drag-canvas', 'drag-node'],\n  },\n  layout: {\n    type: 'radial',\n    focusNode: 'li',\n    linkDistance: 200,\n    unitRadius: 200\n  },\n  defaultEdge: {\n    style: {\n      endArrow: true\n    },\n    labelCfg: {\n      autoRotate: true,\n      style: {\n        stroke: \"#fff\",\n        lineWidth: 5\n      }\n    }\n  },\n  defaultNode: {\n    type: 'donut',\n    style: {\n      lineWidth: 0,\n    },\n    labelCfg: {\n      position: 'bottom',\n    },\n  },\n});\n\ngraph.data(data);\ngraph.render();\n\ngraph.on('node:mouseenter', (evt) => {\n  const { item } = evt;\n  graph.setItemState(item, 'active', true);\n});\n\ngraph.on('node:mouseleave', (evt) => {\n  const { item } = evt;\n  graph.setItemState(item, 'active', false);\n});\n\ngraph.on('node:click', (evt) => {\n  const { item } = evt;\n  graph.setItemState(item, 'selected', true);\n});\ngraph.on('canvas:click', (evt) => {\n  graph.getNodes().forEach((node) => {\n    graph.clearItemStates(node);\n  });\n});\n","babeledSource":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"@antv/g6\"], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(require(\"@antv/g6\"));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(global.g6);\n    global.donutTransfer = mod.exports;\n  }\n})(typeof globalThis !== \"undefined\" ? globalThis : typeof self !== \"undefined\" ? self : this, function (_g) {\n  \"use strict\";\n\n  _g = _interopRequireDefault(_g);\n\n  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n  /**\n   * by Shiwu\n   */\n  var data = {\n    nodes: [{\n      id: 'person A',\n      label: 'person A',\n      // the attributes for drawing donut\n      donutAttrs: {\n        'income': 10,\n        'outcome': 20,\n        'unknown': 25\n      }\n    }, {\n      id: 'person B',\n      label: 'person B',\n      donutAttrs: {\n        'income': 20,\n        'outcome': 10,\n        'unknown': 5\n      }\n    }, {\n      id: 'person C',\n      label: 'person C',\n      donutAttrs: {\n        'income': 200,\n        'outcome': 20,\n        'unknown': 25\n      }\n    }, {\n      id: 'person D',\n      label: 'person D',\n      donutAttrs: {\n        'income': 50,\n        'outcome': 10,\n        'unknown': 15\n      }\n    }, {\n      id: 'person E',\n      label: 'person E',\n      donutAttrs: {\n        'income': 80,\n        'outcome': 40,\n        'unknown': 45\n      }\n    }, {\n      id: 'person F',\n      label: 'person F',\n      donutAttrs: {\n        'income': 90,\n        'outcome': 110,\n        'unknown': 15\n      }\n    }],\n    edges: [{\n      source: 'person C',\n      target: 'person F',\n      size: 10\n    }, {\n      source: 'person B',\n      target: 'person A',\n      size: 5\n    }, {\n      source: 'person D',\n      target: 'person E',\n      size: 20\n    }, {\n      source: 'person D',\n      target: 'person C',\n      size: 5\n    }, {\n      source: 'person B',\n      target: 'person C',\n      size: 10\n    }, {\n      source: 'person A',\n      target: 'person C',\n      size: 5\n    }]\n  };\n  data.edges.forEach(function (edge) {\n    edge.label = \"Transfer $\".concat(edge.size);\n  });\n  var colors = {\n    'income': '#61DDAA',\n    'outcome': '#F08BB4',\n    'unknown': '#65789B'\n  };\n  data.nodes.forEach(function (node) {\n    node.donutColorMap = colors;\n    node.size = 0;\n    Object.keys(node.donutAttrs).forEach(function (key) {\n      node.size += node.donutAttrs[key];\n    });\n    node.size = Math.sqrt(node.size) * 5;\n  });\n  var legendData = {\n    nodes: [{\n      id: 'income',\n      label: 'Income',\n      order: 0,\n      style: {\n        fill: '#61DDAA'\n      }\n    }, {\n      id: 'outcome',\n      label: 'Outcome',\n      order: 2,\n      style: {\n        fill: '#F08BB4'\n      }\n    }, {\n      id: 'unknown',\n      label: 'Unknown',\n      order: 2,\n      style: {\n        fill: '#65789B'\n      }\n    }]\n  };\n  var legend = new _g.default.Legend({\n    data: legendData,\n    align: 'center',\n    layout: 'horizontal',\n    // vertical\n    position: 'bottom-left',\n    vertiSep: 12,\n    horiSep: 24,\n    offsetY: -24,\n    padding: [4, 16, 8, 16],\n    containerStyle: {\n      fill: '#ccc',\n      lineWidth: 1\n    },\n    title: ' ',\n    titleConfig: {\n      offsetY: -8\n    }\n  });\n  var width = document.getElementById('container').scrollWidth;\n  var height = document.getElementById('container').scrollHeight || 500;\n  var graph = new _g.default.Graph({\n    container: 'container',\n    width: width,\n    height: height,\n    // translate the graph to align the canvas's center, support by v3.5.1\n    fitCenter: true,\n    plugins: [legend],\n    modes: {\n      default: ['drag-canvas', 'drag-node']\n    },\n    layout: {\n      type: 'radial',\n      focusNode: 'li',\n      linkDistance: 200,\n      unitRadius: 200\n    },\n    defaultEdge: {\n      style: {\n        endArrow: true\n      },\n      labelCfg: {\n        autoRotate: true,\n        style: {\n          stroke: \"#fff\",\n          lineWidth: 5\n        }\n      }\n    },\n    defaultNode: {\n      type: 'donut',\n      style: {\n        lineWidth: 0\n      },\n      labelCfg: {\n        position: 'bottom'\n      }\n    }\n  });\n  graph.data(data);\n  graph.render();\n  graph.on('node:mouseenter', function (evt) {\n    var item = evt.item;\n    graph.setItemState(item, 'active', true);\n  });\n  graph.on('node:mouseleave', function (evt) {\n    var item = evt.item;\n    graph.setItemState(item, 'active', false);\n  });\n  graph.on('node:click', function (evt) {\n    var item = evt.item;\n    graph.setItemState(item, 'selected', true);\n  });\n  graph.on('canvas:click', function (evt) {\n    graph.getNodes().forEach(function (node) {\n      graph.clearItemStates(node);\n    });\n  });\n});"}]},"description":"<div><h2 id=\"一般图场景案例\" style=\"position:relative;\"><a href=\"#%E4%B8%80%E8%88%AC%E5%9B%BE%E5%9C%BA%E6%99%AF%E6%A1%88%E4%BE%8B\" aria-label=\"一般图场景案例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一般图场景案例</h2><p>一般图是指非树嵌套结构的、可能存在环路的数据结构展示的图。一般图与树图的区别详见 <a href=\"/zh/docs/manual/middle/layout/graph-layout#%E7%AE%80%E4%BB%8B\">一般图与树图介绍</a></p><h3 id=\"图表决策\" style=\"position:relative;\"><a href=\"#%E5%9B%BE%E8%A1%A8%E5%86%B3%E7%AD%96\" aria-label=\"图表决策 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>图表决策</h3><p>这是一个带交互的图表决策图，辅助用户“按使用目的”寻找合适的可视化方式。该 demo 结合了自定义节点、自定义边、力导向布局、数据切换、交互等功能，已应用在 AntV 官网。</p><h3 id=\"聚类的折叠扩展\" style=\"position:relative;\"><a href=\"#%E8%81%9A%E7%B1%BB%E7%9A%84%E6%8A%98%E5%8F%A0%E6%89%A9%E5%B1%95\" aria-label=\"聚类的折叠扩展 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>聚类的折叠/扩展</h3><p>使用 Fruchterman 布局实现交互式折叠/扩展聚类。尝试点击节点以折叠/扩展一个聚类。</p><h3 id=\"圣诞推文可视化\" style=\"position:relative;\"><a href=\"#%E5%9C%A3%E8%AF%9E%E6%8E%A8%E6%96%87%E5%8F%AF%E8%A7%86%E5%8C%96\" aria-label=\"圣诞推文可视化 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>圣诞推文可视化</h3><p>该案例展示了圣诞夜与圣诞节网友们在 Tweeter 上发送的推文中，出现频率 top 100 的单词。可以通过拖拽、点击等交互，查看单词的上下文。</p><p><strong>”彩蛋“</strong>：别人家的彩蛋是彩蛋，而我们的\"彩蛋\"是个课堂作业：</p><div>实现了该 demo 后，我们发现了一个小 Bug：由于 ’christmas‘ 的上下文节点众多，展开它后，在布局即将收敛时出现了疯狂的抖动鬼畜。欢迎在 <a href='https://github.com/antvis/G6' target='_blank'>GitHub</a> 上提 PR 修复它。</div><br/><h3 id=\"美国航线边绑定\" style=\"position:relative;\"><a href=\"#%E7%BE%8E%E5%9B%BD%E8%88%AA%E7%BA%BF%E8%BE%B9%E7%BB%91%E5%AE%9A\" aria-label=\"美国航线边绑定 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>美国航线边绑定</h3><p>使用 G6 可视化美国航线图，使用边绑定工具降低视觉混乱。在大规模图上，使用边绑定可以降低视觉混乱，更清晰地展示图的整体走势、结构，突出航线频繁的城市，它们可能是重要的交通枢纽，并展示更多的统计信息，以便观察者进行分析。图中颜色映射航班的飞行方向（出发（橙红色）与降落（青色））。节点大小表示到达与离开该城市的航班总数量，每个节点使用了饼图展示达到（橙红色）和离开（青色）航班的比例。并增加 hover 的交互，使用 tooltip 展示每个城市的经纬度。</p><h3 id=\"大规模图下钻式探索\" style=\"position:relative;\"><a href=\"#%E5%A4%A7%E8%A7%84%E6%A8%A1%E5%9B%BE%E4%B8%8B%E9%92%BB%E5%BC%8F%E6%8E%A2%E7%B4%A2\" aria-label=\"大规模图下钻式探索 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>大规模图下钻式探索</h3><div><a className='description' href='https://github.com/antvis/G6/blob/master/site/pages/largegraph.zh.tsx' target='_blanck'>源代码</a></div><p>一些科学研究表明，不超过 500 个节点的图可视化是适合终端用户阅读和交互式探索的。根据这个原则，在大规模图上，我们将元数据中的节点通过 LOUVAIN 聚类算法进行聚合。首先展示被聚合后的图，然后用户可以通过展开聚合节点进行下钻式探索。如果一次聚合后的节点数仍然庞大，可以进行多层次的聚合。为了控制渲染节点的数量，展开多个聚类后，最早被展开的聚类将会被自动收起。这一方案除了满足上述原则，还能减少前端计算和渲染的负担。</p><h4 id=\"定义\" style=\"position:relative;\"><a href=\"#%E5%AE%9A%E4%B9%89\" aria-label=\"定义 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>定义</h4><p>该 Demo 简要演示了一种针对大规模图数据的一整套展示、交互、分析方案，包括：用户交互界面，数据处理流程，交互式探索，分析过程回溯，算法分析。</p><h4 id=\"何时使用\" style=\"position:relative;\"><a href=\"#%E4%BD%95%E6%97%B6%E4%BD%BF%E7%94%A8\" aria-label=\"何时使用 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>何时使用</h4><p>在大规模数据场景中，前端浏览器的计算、渲染性能有限，很难保证流畅的实时交互，又需要基于海量的关系数据进行探索分析时。该方案可以解决该问题。</p><h4 id=\"图例\" style=\"position:relative;\"><a href=\"#%E5%9B%BE%E4%BE%8B\" aria-label=\"图例 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>图例</h4><ul>\n<li>聚合节点：<img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1y4AS7ucVXMAAAAAAAAAAAAAARQnAQ' width=50  style='min-width: 10px' />代表由 Louvain 算法计算出的一个聚类，包含多个真实节点。中间的数字代表了该聚类所包含的真实节点个数。 <br /></li>\n<li>真实节点：<img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IOgvSLWF1IQAAAAAAAAAAAAAARQnAQ' width=20 style='min-width: 10px' />原数据中的节点。颜色代表所属聚类。 <br /></li>\n<li>带有绿点标记的节点：<img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*EdtxSYsEeeQAAAAAAAAAAAAAARQnAQ' width=80 style='min-width: 10px' /> 相较于上一次的结果，该标记标识了本次更新的结果中新增的聚合节点或真实节点。 <br /></li>\n<li>聚合边：<img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*WG4sQaSj00QAAAAAAAAAAAAAARQnAQ' width=80 style='min-width: 10px' />至少一个端点是聚合节点。 <br /></li>\n<li>真实边：<img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*sIHZRZSh_jAAAAAAAAAAAAAAARQnAQ' width=80 style='min-width: 10px' /> 两个端点都是真实节点。</li>\n</ul><h4 id=\"图交互\" style=\"position:relative;\"><a href=\"#%E5%9B%BE%E4%BA%A4%E4%BA%92\" aria-label=\"图交互 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>图交互</h4><img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IgoxQ7wfjCcAAAAAAAAAAAAAARQnAQ' width=150 style='min-width: 10px' />\n&nbsp; &nbsp; <img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*cCk4SrHVfDsAAAAAAAAAAAAAARQnAQ' width=180 style='min-width: 10px' /><p><br /><br /> 每个“聚合点” <img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1y4AS7ucVXMAAAAAAAAAAAAAARQnAQ' width=50  style='min-width: 10px' /> 代表了一个 LOUVAIN 计算出的聚类，包含多个“真实节点” <img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IOgvSLWF1IQAAAAAAAAAAAAAARQnAQ' width=20 style='min-width: 10px' />。</p><p><strong>「右击」</strong> 任意节点或边，一个相对应的上下文菜单将会出现。</p><p>右击 <img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*1y4AS7ucVXMAAAAAAAAAAAAAARQnAQ' width=50 style='min-width: 10px' /> 并选择“展开聚合节点”，聚合节点将会被该聚类中的真实节点替代，这就是下钻式探索。</p><p>你也可以通过右击 <img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*IOgvSLWF1IQAAAAAAAAAAAAAARQnAQ' width=20 style='min-width: 10px' /> 并选择“聚合该聚类”将已经展开的节点聚合；或选择 “寻找 k 度邻居”，被选中点的 k 度邻居节点将会被融合到当前图中。</p><h4 id=\"画布菜单\" style=\"position:relative;\"><a href=\"#%E7%94%BB%E5%B8%83%E8%8F%9C%E5%8D%95\" aria-label=\"画布菜单 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>画布菜单</h4><p><em>请在<a href=\"/zh/largegraph\">全屏模式</a>下体验</em> <br /> <img src='https://gw.alipayobjects.com/mdn/rms_f8c6a0/afts/img/A*FKbFRIzj34EAAAAAAAAAAAAAARQnAQ' width=250 style='min-width: 10px' /> <br /> 在画布左上角，有一个画布菜单，包含一系列辅助探索的工具。从左到右，它们分别是： <br /></p><ul>\n<li>显示/隐藏边标签；</li>\n<li>鱼眼放大镜；</li>\n<li>拉索选择模式；</li>\n<li>寻找最短路径（按 SHIFT 点选两个端点）；</li>\n<li>缩小；</li>\n<li>使图内容适应视窗；</li>\n<li>放大；</li>\n<li>搜索一个节点（输入 ID）。</li>\n</ul><h4 id=\"注意\" style=\"position:relative;\"><a href=\"#%E6%B3%A8%E6%84%8F\" aria-label=\"注意 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>注意</h4><p>该 demo 仅为展示大规模图可视化方案，因此使用的数据是一个较小的、模拟的数据集。除了上述内容外，还有很多其他的功能。愉快地探索吧。希望它对你有所帮助。</p></div>"}},"staticQueryHashes":["1976131296","3000541721","3000541721","3378097331","638047554"]}